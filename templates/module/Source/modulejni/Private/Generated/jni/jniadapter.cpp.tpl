{{- /* Copyright Epic Games, Inc. All Rights Reserved */ -}}
/**{{ template "copyright" }}*/
{{- $ModuleName := Camel .Module.Name}}
{{- $ModuleNameRaw :=  .Module.Name}}
{{- $IfaceName := Camel .Interface.Name }}
{{- $Category := printf "ApiGear|%s|%s" $ModuleName $IfaceName }}
{{- $DisplayName := printf "%s%s" $ModuleName $IfaceName }}
{{- $Class := printf "U%sJniAdapter" $DisplayName}}
{{- $Iface := printf "%s%s" $ModuleName $IfaceName }}
{{- $jniservice_name:= printf "%sjniservice" ( camel $ModuleNameRaw) }}
{{- $javaClassPath := ( join "/" (strSlice ( camel $ModuleNameRaw) $jniservice_name) ) }}
{{- $javaClassName :=  printf "%sJniService" $IfaceName }}
{{- $jniFullFuncPrefix := ( join "_" (strSlice "Java" ( camel $ModuleNameRaw) $jniservice_name $javaClassName ) ) }}
{{- $api_module_name:= printf "%s_api" ( camel $ModuleNameRaw) }}
{{- $javaIfClassName :=  printf "I%s" $IfaceName }}
{{- $javaIfClassFull :=  ( join "/" (strSlice (camel $ModuleNameRaw) $api_module_name $javaIfClassName ) ) }}


{{- define "convert_to_java_type"}}
        {{- $localName := printf "jlocal_%s" (Camel .Name) }}
        {{- $cppropName := ueVar "" .}}
        {{- $javaClassConverter := printf "%sDataJavaConverter" ( Camel .Schema.Import ) }}
        {{- if (eq $javaClassConverter  "DataJavaConverter" )}}{{- $javaClassConverter = printf "%sDataJavaConverter" (Camel .Schema.Module.Name) }}{{ end }}
    {{- if .IsArray }}
        {{- if (eq .KindType "string")}}
        auto {{$localName}} = FJavaHelper::ToJavaStringArray(Env,{{$cppropName}});
        {{- else if and (.IsPrimitive ) (not (eq .KindType "enum")) }}
        auto len{{snake .Name}} = {{$cppropName}}.Num();
        {{jniToReturnType .}} {{$localName}} = Env->New{{jniToEnvNameType .}}Array(len{{snake .Name}});
        if ({{$localName}}  == NULL){/*Log error, skip?*/};
        Env->Set{{jniToEnvNameType .}}ArrayRegion({{$localName}}, 0, len{{snake .Name}}, {{$cppropName}}.GetData());
        {{- else if not (eq .KindType "extern")}}
        {{jniToReturnType .}} {{$localName}} = {{$javaClassConverter}}::makeJava{{Camel .Type }}Array(Env, {{$cppropName}});
        {{- end }}
    {{- else if (eq .KindType "string")}}
        jobject {{$localName}} = FJavaHelper::ToJavaString(Env, {{$cppropName}});
    {{- else if ( or (not .IsPrimitive ) (eq .KindType "enum" ) ) }}
        {{jniToReturnType .}} {{$localName}} = {{$javaClassConverter}}::makeJava{{Camel .Type }}(Env, {{$cppropName}});
    {{- end }}
{{- end}}


////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "{{$ModuleName}}/Generated/Jni/{{$Iface}}JniAdapter.h"
#include "{{$ModuleName}}/Generated/Jni/{{$ModuleName}}DataJavaConverter.h"
#include "JavaServiceStarter.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
#include "HAL/Platform.h"

{{- $includes := getEmptyStringList}}
{{- range .Module.Externs }}
{{- $class := ueExtern . }}
{{- if $class.Include }}
{{- $includeName :=  printf "\"%s\"" $class.Include }}
{{- $includes = (appendList $includes $includeName) }}
{{- end }}
{{- end }}
{{- range .Module.Imports }}
{{- $importModuleName := Camel .Name }}
{{- $includeName :=  printf "\"%s/Generated/api/%s_data.h\"" $importModuleName $importModuleName }}
{{- $includeName :=  printf "\"%s/Generated/Jni/%sDataJavaConverter.h\"" $importModuleName $importModuleName }}
{{- $includes = (appendList $includes $includeName) }}
{{- end }}
{{- $includes = unique $includes }}
{{ range $includes }}
#include {{ .}}
{{- end }}
{{ if or (len .Module.Enums) (len .Module.Structs) -}}
#include "{{$ModuleName}}/Generated/api/{{ $ModuleName }}_data.h"
{{ end }}

#if PLATFORM_ANDROID

#include "Engine/Engine.h"
#include "Android/AndroidJNI.h"
#include "Android/AndroidApplication.h"

#if USE_ANDROID_JNI
#include <jni.h>
#endif
#endif

DEFINE_LOG_CATEGORY(Log{{$Iface}}_JNI);


namespace 
{
	{{$Class}}* g{{$Class}}Handle = nullptr;
}


{{- if .Interface.Description }}
/**
   \brief {{.Interface.Description}}
*/
{{- end }}
{{$Class}}::{{$Class}}()
{
}

void {{$Class}}::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
	g{{$Class}}Handle = this;
#if PLATFORM_ANDROID
#if USE_ANDROID_JNI
    m_javaJniServiceClass =  FAndroidApplication::FindJavaClassGlobalRef("{{$javaClassPath}}/{{$javaClassName}}");
	jobject localRef = ApiGear::JavaServiceStarter::startAndroidServer("{{$javaClassPath}}/{{$javaClassName}}Starter", "{{$javaIfClassFull}}");
    m_javaJniServiceInstance = FAndroidApplication::GetJavaEnv()->NewGlobalRef(localRef);
    FAndroidApplication::GetJavaEnv()->DeleteLocalRef(localRef);
#endif
#endif
}

void {{$Class}}::Deinitialize()
{
	callJniServiceReady(false);
	ApiGear::JavaServiceStarter::stopAdnroidServer("{{$javaClassPath}}/{{$javaClassName}}Starter");
	g{{$Class}}Handle = nullptr;
#if PLATFORM_ANDROID
#if USE_ANDROID_JNI
    m_javaJniServiceClass = nullptr;
    if (m_javaJniServiceInstance)
    {
        FAndroidApplication::GetJavaEnv()->DeleteGlobalRef(m_javaJniServiceInstance);
        m_javaJniServiceInstance = nullptr;
    }
#endif
#endif
	Super::Deinitialize();
}

void {{$Class}}::setBackendService(TScriptInterface<I{{Camel .Module.Name}}{{$IfaceName}}Interface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
{{- if or (len .Interface.Properties) (.Interface.Signals) }}
		U{{$Iface}}Signals* BackendSignals = BackendService->_GetSignals();
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service {{$Iface}}"));
{{- end }}
{{- range .Interface.Properties }}
		if (On{{Camel .Name}}ChangedHandle.IsValid())
		{
			BackendSignals->On{{Camel .Name}}Changed.Remove(On{{Camel .Name}}ChangedHandle);
			On{{Camel .Name}}ChangedHandle.Reset();
		}
{{- end }}
{{- range .Interface.Signals }}
		if (On{{Camel .Name}}SignalHandle.IsValid())
		{
			BackendSignals->On{{Camel .Name}}Signal.Remove(On{{Camel .Name}}SignalHandle);
			On{{Camel .Name}}SignalHandle.Reset();
		}
{{- end }}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface {{$Iface}} is not fully implemented"));

	// subscribe to new backend
{{- $Service := printf "I%sInterface" $Iface }}
	BackendService = InService;
{{- if or (len .Interface.Properties) (.Interface.Signals) }}
	U{{$Iface}}Signals* BackendSignals = BackendService->_GetSignals();
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service {{$Iface}}"));
{{- end }}
	// connect property changed signals or simple events
{{- range .Interface.Properties }}
	On{{Camel .Name}}ChangedHandle = BackendSignals->On{{Camel .Name}}Changed.AddUObject(this, &{{$Class}}::On{{Camel .Name}}Changed);
{{- end }}
{{- range .Interface.Signals }}
	On{{Camel .Name}}SignalHandle = BackendSignals->On{{Camel .Name}}Signal.AddUObject(this, &{{$Class}}::On{{Camel .Name}});
{{- end }}

	callJniServiceReady(true);
}

TScriptInterface<I{{Camel .Module.Name}}{{Camel .Interface.Name}}Interface> {{$Class}}::getBackendService()
{
	return BackendService;
}

void {{$Class}}::callJniServiceReady(bool isServiceReady)
{
    UE_LOG(Log{{$Iface}}_JNI, Verbose, TEXT("{{$Class}} call nativeServiceReady the service function "));
    
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (!m_javaJniServiceClass || !m_javaJniServiceInstance )
        {
            UE_LOG(Log{{$Iface}}_JNI, Warning, TEXT("{{$javaClassPath}}/{{$javaClassName}}:nativeServiceReady(Z)V CLASS not found"));
            return;
        }

        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "nativeServiceReady", "(Z)V");

        if (MethodID != nullptr)
        {
            FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, isServiceReady);
        }
        else
        {
            UE_LOG(Log{{$Iface}}_JNI, Warning, TEXT("{{$javaClassPath}}/{{$javaClassName}}:nativeServiceReady(Z)V not found "));
        }
    }
#endif 
}

{{- range .Interface.Signals }}

void {{$Class}}::On{{Camel .Name}}({{ueParams "" .Params}})
{
// Notify java side about singal
}
{{- end }}


{{- range .Interface.Properties }}

void {{$Class}}::On{{Camel .Name}}Changed({{ueParam "In" .}})
{
    // Notify java side about property changed
}
{{- end }}


#if PLATFORM_ANDROID && USE_ANDROID_JNI

{{- range .Interface.Operations }}
JNI_METHOD {{ jniToReturnType .Return}} {{$jniFullFuncPrefix}}_native{{ Camel   .Name }}(JNIEnv* Env, jclass Clazz, {{jniJavaParams "" .Params }})
{
	return {{ jniEmptyReturn .Return }};
}
{{- end}}

	

{{- range .Interface.Properties }}
{{- if not .IsReadOnly }}
JNI_METHOD void {{$jniFullFuncPrefix}}_nativeSet{{ Camel .Name }}(JNIEnv* Env, jclass Clazz, {{jniJavaParam "" . }})
{

        if (g{{$Class}}Handle == nullptr)
        {
            UE_LOG(Log{{$Iface}}_JNI, Warning, TEXT("{{$jniFullFuncPrefix}}_nativeSet{{ Camel .Name }}: JNI SERVICE ADAPTER NOT FOUND "));
            return;
        }
// set property on backend
}
{{- end}}

JNI_METHOD {{jniToReturnType .}} {{$jniFullFuncPrefix}}_nativeGet{{ Camel .Name }}(JNIEnv* Env, jclass Clazz)
{
    UE_LOG(Log{{$Iface}}_JNI, Verbose, TEXT("{{$jniFullFuncPrefix}}_nativeGet{{Camel .Name}}"));
    if (g{{$Class}}Handle == nullptr)
    {
        UE_LOG(Log{{$Iface}}_JNI, Warning, TEXT("{{$jniFullFuncPrefix}}_nativeGet{{Camel .Name }}: JNI SERVICE ADAPTER NOT FOUND "));
        return {{ jniEmptyReturn . }};
    }
    auto service = g{{$Class}}Handle->getBackendService();
    if (service != nullptr)
    {
    {{- $cppropName := ueVar "" .}}
        auto {{$cppropName}} = service->Get{{Camel .Name}}();
    {{- if or  .IsArray ( or (eq .KindType "enum") (not (ueIsStdSimpleType .))  ) }}
        {{template "convert_to_java_type" .}}
        {{- $localName := printf "jlocal_%s" (Camel .Name) }}
        return {{$localName}};
    {{- else }} 
        return {{$cppropName}};
    {{- end }}
    }
    else
    {
        UE_LOG(Log{{$Iface}}_JNI, Warning, TEXT("service not available, try setting a backend service "));
        return {{ jniEmptyReturn . }};
    }
}
{{- end }}
#endif
