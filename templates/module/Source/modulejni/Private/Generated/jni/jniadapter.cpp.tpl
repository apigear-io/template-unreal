{{- /* Copyright Epic Games, Inc. All Rights Reserved */ -}}
/**{{ template "copyright" }}*/
{{- $ModuleName := Camel .Module.Name}}
{{- $ModuleNameRaw :=  .Module.Name}}
{{- $IfaceName := Camel .Interface.Name }}
{{- $Category := printf "ApiGear|%s|%s" $ModuleName $IfaceName }}
{{- $DisplayName := printf "%s%s" $ModuleName $IfaceName }}
{{- $Class := printf "U%sJniAdapter" $DisplayName}}
{{- $Iface := printf "%s%s" $ModuleName $IfaceName }}
{{- $jniservice_name:= printf "%sjniservice" ( camel $ModuleNameRaw) }}
{{- $javaClassName :=  printf "%sJniService" $IfaceName }}
{{- $jniFullFuncPrefix := ( join "_" (strSlice "Java" ( camel $ModuleNameRaw) $jniservice_name $javaClassName ) ) }}


////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "{{$ModuleName}}/Generated/Jni/{{$Iface}}JniAdapter.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
#include "HAL/Platform.h"

#if PLATFORM_ANDROID

#include "Engine/Engine.h"
#include "Android/AndroidJNI.h"
#include "Android/AndroidApplication.h"

#if USE_ANDROID_JNI
#include <jni.h>
#endif
#endif

DEFINE_LOG_CATEGORY(Log{{$Iface}}_JNI);

{{- if .Interface.Description }}
/**
   \brief {{.Interface.Description}}
*/
{{- end }}
{{$Class}}::{{$Class}}()
{
}

void {{$Class}}::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void {{$Class}}::Deinitialize()
{
	Super::Deinitialize();
}

void {{$Class}}::setBackendService(TScriptInterface<I{{Camel .Module.Name}}{{$IfaceName}}Interface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
{{- if or (len .Interface.Properties) (.Interface.Signals) }}
		U{{$Iface}}Signals* BackendSignals = BackendService->_GetSignals();
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service {{$Iface}}"));
{{- end }}
{{- range .Interface.Properties }}
		if (On{{Camel .Name}}ChangedHandle.IsValid())
		{
			BackendSignals->On{{Camel .Name}}Changed.Remove(On{{Camel .Name}}ChangedHandle);
			On{{Camel .Name}}ChangedHandle.Reset();
		}
{{- end }}
{{- range .Interface.Signals }}
		if (On{{Camel .Name}}SignalHandle.IsValid())
		{
			BackendSignals->On{{Camel .Name}}Signal.Remove(On{{Camel .Name}}SignalHandle);
			On{{Camel .Name}}SignalHandle.Reset();
		}
{{- end }}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface {{$Iface}} is not fully implemented"));

	// subscribe to new backend
{{- $Service := printf "I%sInterface" $Iface }}
	BackendService = InService;
{{- if or (len .Interface.Properties) (.Interface.Signals) }}
	U{{$Iface}}Signals* BackendSignals = BackendService->_GetSignals();
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service {{$Iface}}"));
{{- end }}
	// connect property changed signals or simple events
{{- range .Interface.Properties }}
	On{{Camel .Name}}ChangedHandle = BackendSignals->On{{Camel .Name}}Changed.AddUObject(this, &{{$Class}}::On{{Camel .Name}}Changed);
{{- end }}
{{- range .Interface.Signals }}
	On{{Camel .Name}}SignalHandle = BackendSignals->On{{Camel .Name}}Signal.AddUObject(this, &{{$Class}}::On{{Camel .Name}});
{{- end }}
}

TScriptInterface<I{{Camel .Module.Name}}{{Camel .Interface.Name}}Interface> {{$Class}}::getBackendService()
{
	return BackendService;
}

{{- range .Interface.Signals }}

void {{$Class}}::On{{Camel .Name}}({{ueParams "" .Params}})
{
// Notify java side about singal
}
{{- end }}


{{- range .Interface.Properties }}

void {{$Class}}::On{{Camel .Name}}Changed({{ueParam "In" .}})
{
    // Notify java side about property changed
}
{{- end }}


#if PLATFORM_ANDROID && USE_ANDROID_JNI

{{- range .Interface.Operations }}
JNI_METHOD {{ jniToReturnType .Return}} {{$jniFullFuncPrefix}}_native{{ Camel   .Name }}(JNIEnv* Env, jclass Clazz, {{jniJavaParams "" .Params }})
{
	return {{ jniEmptyReturn .Return }};
}
{{- end}}

	

{{- range .Interface.Properties }}
{{- if not .IsReadOnly }}
JNI_METHOD void {{$jniFullFuncPrefix}}_nativeSet{{ Camel .Name }}(JNIEnv* Env, jclass Clazz, {{jniJavaParam "" . }})
{
// set property on backend
}
{{- end}}

JNI_METHOD {{jniToReturnType .}} {{$jniFullFuncPrefix}}_nativeGet{{ Camel .Name }}(JNIEnv* Env, jclass Clazz)
{
// get property from backend 
    return {{ jniEmptyReturn . }};
}
{{- end }}
#endif
