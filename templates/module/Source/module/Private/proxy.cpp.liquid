{% comment %} Copyright Epic Games, Inc. All Rights Reserved {% endcomment -%}
{% assign class_name_capital = module.name | capital | append: interface.name | capital -%}
{% assign class = "U" | append: class_name_capital | append: "Proxy" %}
{% assign moduleCapital = module.name | capital %}
{% assign moduleInterfaceCapital = moduleCapital | append: interface.name | capital %}
/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
{% assign module_name_capital = module.name | capital -%}
{% assign module_name = "F"| append:module_name_capital | append: "ModuleFactory" %}
#include "{{module.name|capital}}{{interface.name|capital}}Proxy.h"
#include "{{interface.name|capital}}/{{module.name|capital}}{{interface.name|capital}}Local.h"
#include "apig/{{module.name|capital}}.trace.h"
#include "{{module.name|capital}}Factory.h"
#include "Engine/LatentActionManager.h"
#include "LatentActions.h"

class F{{class_name_capital}}LatentAction : public FPendingLatentAction
{
private:
	FName ExecutionFunction;
	int32 OutputLink;
	FWeakObjectPtr CallbackTarget;
	bool bInProgress;

public:
	F{{class_name_capital}}LatentAction(const FLatentActionInfo& LatentInfo)
		: ExecutionFunction(LatentInfo.ExecutionFunction)
		, OutputLink(LatentInfo.Linkage)
		, CallbackTarget(LatentInfo.CallbackTarget)
		, bInProgress(true)
	{
	}

	void Cancel()
	{
		bInProgress = false;
	}

	virtual void UpdateOperation(FLatentResponse& Response) override
	{
		if (bInProgress == false)
		{
			Response.FinishAndTriggerIf(true, ExecutionFunction, OutputLink, CallbackTarget);
		}
	}

	virtual void NotifyObjectDestroyed()
	{
		Cancel();
	}

	virtual void NotifyActionAborted()
	{
		Cancel();
	}
};

{% if interface.description %}
/**
   \brief {{interface.description}}
*/
{% endif %}
{{class}}::{{class}}()
	: I{{module.name | capital}}{{interface.name|capital}}Interface()
{% for property in interface.properties %}
	, {{property|unrealVarName}}({{property|unrealDefault: moduleCapital}})
{% endfor %}
{
{% assign service_capital = module.name | capital | append: interface.name | capital -%}
{% assign service = "I" | append: service_capital | append: "Interface" %}
	service = {{module_name}}::create{{service}}();

{% for property in interface.properties %}
	service->Get{{property.name|capital}}ChangedDelegate().AddDynamic(this, &{{class}}::On{{property.name|capital}}Changed);
{% endfor %}
{% for signal in interface.signals %}
	service->Get{{signal|unrealVarName}}SignalDelegate().AddDynamic(this, &{{class}}::On{{signal|unrealVarName}});
{% endfor %}
}

{{class}}::~{{class}}()
{
{% for property in interface.properties %}
	service->Get{{property.name|capital}}ChangedDelegate().RemoveDynamic(this, &{{class}}::On{{property.name|capital}}Changed);
{% endfor %}
{% for signal in interface.signals %}
	service->Get{{signal|unrealVarName}}SignalDelegate().RemoveDynamic(this, &{{class}}::On{{signal|unrealVarName}});
{% endfor %}
}

{% for signal in interface.signals %}
void {{class}}::On{{signal|unrealVarName}}({{signal|unrealParams: moduleCapital}})
{
	{{module.name | capital}}{{interface.name|capital}}Tracer::trace_signal{{signal.name|capital}}({% for param in signal.params %}{{param | unrealVarName}}{% unless forloop.last %},{{' '}}{% endunless %}{% endfor %});
	{{signal|unrealVarName}}Signal.Broadcast(
	{%- for param in signal.params -%}
		{{param|unrealVarName}}{% unless forloop.last %},{{' '}}{% endunless -%}
	{%- endfor -%}
	);
}
{{nl}}
F{{signal|unrealVarName: moduleInterfaceCapital}}Delegate& {{class}}::Get{{signal|unrealVarName}}SignalDelegate()
{
	return {{signal|unrealVarName}}Signal;
}
{{nl}}
{% endfor %}

{% for property in interface.properties %}
void {{class}}::On{{property.name|capital}}Changed({{property|unrealParam: moduleCapital, 'In'}})
{
	{{module.name | capital}}{{interface.name|capital}}Tracer::capture_state(this);
	{{property.name|capital}}Changed.Broadcast({{property|unrealVarName: 'In'}});
}

{{property|unrealTypeName: false, moduleCapital}} {{class}}::Get{{property.name | capital}}() const
{
	return service->Get{{property.name | capital}}();
}

void {{class}}::Set{{property.name | capital}}({{property|unrealParam: moduleCapital, 'In'}})
{
	{{module.name | capital}}{{interface.name|capital}}Tracer::trace_callSet{{property.name|capital}}({{property|unrealVarName: 'In'}});
	service->Set{{property.name | capital}}({{property|unrealVarName: 'In'}});
}
{{nl}}
F{{moduleInterfaceCapital}}{{property.name|capital}}ChangedDelegate& {{class}}::Get{{property.name|capital}}ChangedDelegate()
{
	return {{property.name|capital}}Changed;
}
{{nl}}
{% endfor %}

{% for operation in interface.operations %}

{% if operation.description %}
/**
   \brief {{operation.description}}
*/
{% endif %}
{% assign returnVal = operation|unrealReturn: moduleCapital %}
{% if returnVal != "void" %}
void {{class}}::{{operation.name|capital}}(UObject* WorldContextObject, FLatentActionInfo LatentInfo, {{operation|unrealReturn: moduleCapital}}& Result{% if operation.params.size > 0 %},{{' '}}{%endif%}{{operation|unrealParams: moduleCapital}})
{
	{{module.name | capital}}{{interface.name|capital}}Tracer::trace_call{{operation.name|capital}}({% for param in operation.params %}{{param | unrealVarName}}{% unless forloop.last %},{{' '}}{% endunless %}{% endfor %});

	if (UWorld* World = GEngine->GetWorldFromContextObjectChecked(WorldContextObject))
	{
		FLatentActionManager& LatentActionManager = World->GetLatentActionManager();
		F{{class_name_capital}}LatentAction* oldRequest = LatentActionManager.FindExistingAction<F{{class_name_capital}}LatentAction>(LatentInfo.CallbackTarget, LatentInfo.UUID);

		if (oldRequest != nullptr)
		{
			// cancel old request
			oldRequest->Cancel();
			LatentActionManager.RemoveActionsForObject(LatentInfo.CallbackTarget);
		}

		F{{class_name_capital}}LatentAction* CompletionAction = new F{{class_name_capital}}LatentAction(LatentInfo);
		LatentActionManager.AddNewAction(LatentInfo.CallbackTarget, LatentInfo.UUID, CompletionAction);
		Async(EAsyncExecution::Thread,
			[{% for param in operation.params %}{{param|unrealVarName}},{{' '}}{% endfor %}this, &Result, CompletionAction]()
			{
				Result = service->{{operation.name|capital}}(
	{%- for param in operation.params %}{{param | unrealVarName}}{% unless forloop.last %},{{' '}}{% endunless %}{% endfor -%}
);
				CompletionAction->Cancel();
			});
	}
}
{% endif %}
{{returnVal}} {{class}}::{{operation.name|capital}}({{operation|unrealParams: moduleCapital}})
{
	{{module.name | capital}}{{interface.name|capital}}Tracer::trace_call{{operation.name|capital}}({% for param in operation.params %}{{param | unrealVarName}}{% unless forloop.last %},{{' '}}{% endunless %}{% endfor %});
	{% if returnVal != "void" %}
	return service->{{operation.name|capital}}(
		{%- for param in operation.params %}{{param | unrealVarName}}{% unless forloop.last %},{{' '}}{% endunless %}{% endfor -%}
	);
	{% else %}
	service->{{operation.name|capital}}(
		{%- for param in operation.params %}{{param | unrealVarName}}{% unless forloop.last %},{{' '}}{% endunless %}{% endfor -%}
	);
	{% endif %}
}
{% endfor %}
