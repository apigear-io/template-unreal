{{- /* Copyright Epic Games, Inc. All Rights Reserved */ -}}
/**{{ template "copyright" }}*/
{{- $ModuleName := Camel .Module.Name}}
{{- $IfaceName := Camel .Interface.Name }}
{{- $Category := printf "ApiGear|%s|%s" $ModuleName $IfaceName }}
{{- $DisplayName := printf "%s%s" $ModuleName $IfaceName }}
{{- $Class := printf "U%sMsgBusAdapter" $DisplayName}}
{{- $Iface := printf "%s%s" $ModuleName $IfaceName }}
{{- $ifaceId := printf "%s.%s" .Module.Name .Interface.Name}}

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/MsgBus/{{$Iface}}MsgBusAdapter.h"
#include "Generated/MsgBus/{{$Iface}}MsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"

{{- if .Interface.Description }}
/**
   \brief {{.Interface.Description}}
*/
{{- end }}
{{$Class}}::{{$Class}}()
{
}

void {{$Class}}::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void {{$Class}}::Deinitialize()
{
	StopListening();

	Super::Deinitialize();
}

void {{$Class}}::StartListening()
{
	if ({{$Iface}}MsgBusEndpoint.IsValid())
		return;

	// clang-format off
	{{$Iface}}MsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/{{$ModuleName}}/{{$IfaceName}}/Service")
		.Handling<F{{$Iface}}DiscoveryMessage>(this, &{{$Class}}::OnNewClientDiscovered)
		.Handling<F{{$Iface}}ClientDisconnectMessage>(this, &{{$Class}}::OnClientDisconnected)
{{- range $i, $e := .Interface.Properties }}
{{- if not .IsReadOnly }}
		.Handling<F{{$Iface}}Set{{Camel .Name}}RequestMessage>(this, &{{$Class}}::OnSet{{Camel .Name}}Request)
{{- end }}
{{- end }}
{{- range $i, $e := .Interface.Operations }}
		.Handling<F{{$Iface}}{{Camel .Name}}RequestMessage>(this, &{{$Class}}::On{{Camel .Name}}Request)
{{- end }}
		.Build();
	// clang-format on

	if ({{$Iface}}MsgBusEndpoint.IsValid())
	{
		{{$Iface}}MsgBusEndpoint->Subscribe<F{{$Iface}}DiscoveryMessage>();
	}
}

void {{$Class}}::StopListening()
{
	auto msg = new F{{$Iface}}ServiceDisconnectMessage();

	if ({{$Iface}}MsgBusEndpoint.IsValid())
	{
		{{$Iface}}MsgBusEndpoint->Send<F{{$Iface}}ServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	{{$Iface}}MsgBusEndpoint.Reset();
	ConnectedClients.Reset();
}

bool {{$Class}}::IsListening() const
{
	return {{$Iface}}MsgBusEndpoint.IsValid();
}

void {{$Class}}::setBackendService(TScriptInterface<I{{$Iface}}Interface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
{{- if or (len .Interface.Properties) (.Interface.Signals) }}
		U{{$Iface}}Signals* BackendSignals = BackendService->Execute__GetSignals(BackendService.GetObject());
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service {{$Iface}}"));
{{- end }}
{{- range .Interface.Properties }}
		BackendSignals->On{{Camel .Name}}Changed.RemoveDynamic(this, &{{$Class}}::On{{Camel .Name}}Changed);
{{- end }}
{{- range .Interface.Signals }}
		BackendSignals->On{{Camel .Name}}Signal.RemoveDynamic(this, &{{$Class}}::On{{Camel .Name}});
{{- end }}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface {{$Iface}} is not fully implemented"));

	// subscribe to new backend
{{- $Service := printf "I%sInterface" $Iface }}
	BackendService = InService;
{{- if or (len .Interface.Properties) (.Interface.Signals) }}
	U{{$Iface}}Signals* BackendSignals = BackendService->Execute__GetSignals(BackendService.GetObject());
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service {{$Iface}}"));
{{- end }}
	// connect property changed signals or simple events
{{- range .Interface.Properties }}
	BackendSignals->On{{Camel .Name}}Changed.AddDynamic(this, &{{$Class}}::On{{Camel .Name}}Changed);
{{- end }}
{{- range .Interface.Signals }}
	BackendSignals->On{{Camel .Name}}Signal.AddDynamic(this, &{{$Class}}::On{{Camel .Name}});
{{- end }}
}

void {{$Class}}::OnNewClientDiscovered(const F{{$Iface}}DiscoveryMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FMessageAddress& ClientAddress = ConnectedClients.AddDefaulted_GetRef();
	ClientAddress = Context->GetSender();

	auto msg = new F{{$Iface}}InitMessage();
{{- range $i, $e := .Interface.Properties }}
	msg->{{ueVar "" .}} = BackendService->Execute_Get{{Camel .Name}}(BackendService.GetObject());
{{- end }}

	if ({{$Iface}}MsgBusEndpoint.IsValid())
	{
		{{$Iface}}MsgBusEndpoint->Send<F{{$Iface}}InitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void {{$Class}}::OnClientDisconnected(const F{{$Iface}}ClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	ConnectedClients.Remove(Context->GetSender());
}
{{- range .Interface.Operations }}

void {{$Class}}::On{{Camel .Name}}Request(const F{{$Iface}}{{Camel .Name}}RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
{{- if .Return.IsVoid }}
	BackendService->Execute_{{Camel .Name}}(BackendService.GetObject()
{{- range $i, $e := .Params -}}
	, InMessage.{{ueVar "" .}}
{{- end -}}
	);
{{- else }}
	auto msg = new F{{$Iface}}{{Camel .Name}}ReplyMessage();
	msg->RepsonseId = InMessage.RepsonseId;
	msg->Result = BackendService->Execute_{{Camel .Name}}(BackendService.GetObject()
{{- range $i, $e := .Params -}}
	, InMessage.{{ueVar "" .}}
{{- end -}}
	);

	if ({{$Iface}}MsgBusEndpoint.IsValid())
	{
		{{$Iface}}MsgBusEndpoint->Send<F{{$Iface}}{{Camel .Name}}ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
{{- end }}
}
{{- end }}
{{- range .Interface.Signals }}

void {{$Class}}::On{{Camel .Name}}({{ueParams "In" .Params}})
{
	auto msg = new F{{$Iface}}{{Camel .Name}}SignalMessage();
{{- range $i, $e := .Params }}
	msg->{{ueVar "" .}} = {{ueVar "In" .}};
{{- end }}
	if ({{$Iface}}MsgBusEndpoint.IsValid())
	{
		{{$Iface}}MsgBusEndpoint->Send<F{{$Iface}}{{Camel .Name}}SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
{{- end }}
{{- range .Interface.Properties }}
{{- if not .IsReadOnly }}

void {{$Class}}::OnSet{{Camel .Name}}Request(const F{{$Iface}}Set{{Camel .Name}}RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_Set{{Camel .Name}}(BackendService.GetObject(), InMessage.{{ueVar "" .}});
}
{{- end }}

void {{$Class}}::On{{Camel .Name}}Changed({{ueParam "In" .}})
{
	auto msg = new F{{$Iface}}{{Camel .Name}}ChangedMessage();
	msg->{{ueVar "" .}} = {{ueVar "In" .}};

	if ({{$Iface}}MsgBusEndpoint.IsValid())
	{
		{{$Iface}}MsgBusEndpoint->Send<F{{$Iface}}{{Camel .Name}}ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
{{- end }}
