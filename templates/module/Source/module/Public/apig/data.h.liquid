{% comment %} Copyright Epic Games, Inc. All Rights Reserved {% endcomment -%}
{% assign API_MACRO = module.name | upcase | remove: '.' | append: "_API" %}
{% capture category %}ApiGear|{{module.name | capital}}{% endcapture -%}
{% assign moduleCapital = module.name | capital %}
{% capture nl %}
{% endcapture %}
/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#pragma once

#include "CoreMinimal.h"
{% if module.enums.size  > 0 or module.structs.size > 0 %}
#include "{{module.name|capital}}_data.generated.h"
{% endif %}


{% for enum in module.enums %}
{% assign class = enum.name %}

{% comment %} 
*****************************************************************
*** ENUMERATIONS											  ***
*****************************************************************
{% endcomment %}

/**
 * Enumeration {{enum|unrealTypeName: false, moduleCapital }}
 */
UENUM(BlueprintType)
enum class {{enum|unrealTypeName: false, moduleCapital}} : uint8
{
{% for member in enum.members %}
	{{member.name | constant }} UMETA(Displayname = "{{member.name}}"){% unless forloop.last %},{% endunless %}
{% endfor %}
};

/**
 * Convert from uint8 to {{enum|unrealTypeName: false, moduleCapital}}
 */
bool toUE4Type({{enum|unrealTypeName: false, moduleCapital}}& value, uint8 v);

{% endfor %}

{% for struct in module.structs %}

{% comment %} 
*****************************************************************
*** STRUCTS												   ***
*****************************************************************
{% endcomment %}

/**
 * Struct {{struct|unrealTypeName: false, moduleCapital}}
 */
USTRUCT(BlueprintType)
struct {{API_MACRO}} {{struct|unrealTypeName: false, moduleCapital}}
{
	GENERATED_BODY()

{% for field in struct.fields %}

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "{{category}}")
	{{field|unrealTypeName: false, moduleCapital}} {{field.name}};
{% endfor %}

	bool operator==(const {{struct|unrealTypeName: false, moduleCapital}}& rhs) const;
	bool operator!=(const {{struct|unrealTypeName: false, moduleCapital}}& rhs) const;
};

{% endfor %}
