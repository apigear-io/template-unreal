{% comment %} Copyright Epic Games, Inc. All Rights Reserved {% endcomment -%}
{% assign class = module.name | capital | append: interface.name | capital | append: "WAMPService" -%}
{% assign moduleCapital = module.name | capital %}
{% assign moduleInterfaceCapital = moduleCapital | append: interface.name | capital %}
/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
{% capture nl %}
{% endcapture %}

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "{{module.name|capital}}{{interface.name|capital}}WAMP.h"
#include "apig/{{module.name|capital}}.json.adapter.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "unrealwamp.h"
{{nl}}
using namespace ApiGear::WAMP;

{% if interface.description%}
/**
   \brief {{interface.description}}
*/
{% endif %}
{{class}}::{{class}}()
: I{{module.name | capital}}{{interface.name|capital}}Interface()
{% for property in interface.properties %}
, {{property|unrealVarName}}({{property|unrealDefault: moduleCapital}})
{% endfor %}
{
    EventFunc {{interface.name | capital}}StateChangedFunc = [this](EventArg arg)
    {
        const json fields = arg.kwargs;
{% for property in interface.properties %}
        if(fields.contains("{{property.name}}")) {
            if({{property|unrealVarName}} != fields["{{property.name}}"].get<{{property|unrealTypeName: false, moduleCapital}}>())
            {
                {{property|unrealVarName}} = fields["{{property.name}}"].get<{{property|unrealTypeName: false, moduleCapital}}>();
                {{property.name|capital}}Changed.Broadcast({{property|unrealVarName}});
            }
        }
{% endfor %}
    };
    UnrealWamp::instance()->doSubscribe("{{module.name}}.{{interface.name}}", {{interface.name | capital}}StateChangedFunc);
{{nl}}
    ResponseFunc Get{{interface.name | capital}}StateFunc = [this](ResponseArg arg)
    {
        if(arg.args.size() != 1) {
          return;
        }
        const json fields = arg.args[0];
{% for property in interface.properties %}
        if(fields.contains("{{property.name}}")) {
            if({{property|unrealVarName}} != fields["{{property.name}}"].get<{{property|unrealTypeName: false, moduleCapital}}>())
            {
                {{property|unrealVarName}} = fields["{{property.name}}"].get<{{property|unrealTypeName: false, moduleCapital}}>();
                {{property.name|capital}}Changed.Broadcast({{property|unrealVarName}});
            }
        }
{% endfor %}
    };
    UnrealWamp::instance()->doCall("{{module.name}}.{{interface.name}}._get", Arguments(), ArgumentsKw(), Get{{interface.name | capital}}StateFunc);
{{nl}}
{% for signal in interface.signals %}
    EventFunc {{signal.name}}Func = [this](EventArg arg)
    { 
    {% if signal.params.size > 0 %}
        if(arg.args.size() == {{signal.params.size}})
        {
            {{signal|unrealVarName}}Signal.Broadcast(
    {%- for param in signal.params -%}
            arg.args[{{forloop.index0}}].get<{{param|unrealReturn: moduleCapital}}>(){% unless forloop.last %},{% endunless -%}
    {%- endfor -%}
        );
        }
    {% else %}
        {{signal|unrealVarName}}Signal.Broadcast();
    {% endif %}
    };
    UnrealWamp::instance()->doSubscribe("{{module.name}}.{{interface.name}}.{{signal.name}}", {{signal.name}}Func);
    {{nl}}
{% endfor %}
}
{{nl}}
{{class}}::~{{class}}()
{
    UnrealWamp::instance()->doUnSubscribe("{{module.name}}.{{interface.name}}");
{% for signal in interface.signals %}
    UnrealWamp::instance()->doUnSubscribe("{{module.name}}.{{interface.name}}.{{signal.name}}");
{% endfor %}
}
{{nl}}
{% for signal in interface.signals %}
F{{signal|unrealVarName: moduleInterfaceCapital}}Delegate& {{class}}::Get{{signal|unrealVarName}}SignalDelegate()
{
    return {{signal|unrealVarName}}Signal;
}
{{nl}}
{% endfor %}

{% for property in interface.properties %}
{{property|unrealTypeName: false, moduleCapital}} {{class}}::Get{{property.name | capital}}() const
{
    return {{property|unrealVarName}};
}

void {{class}}::Set{{property.name | capital}}({{property|unrealParam: moduleCapital, 'In'}})
{
    ArgumentsKw fields_;
    fields_["{{property.name}}"] = {{property|unrealVarName: 'In'}};
    UnrealWamp::instance()->doCall("{{module.name}}.{{interface.name}}._set", Arguments(), fields_);
}

F{{moduleInterfaceCapital}}{{property.name|capital}}ChangedDelegate& {{class}}::Get{{property.name|capital}}ChangedDelegate()
{
    return {{property.name|capital}}Changed;
}
{{nl}}
{% endfor %}
{{nl}}
{% for operation in interface.operations %}
{% if operation.description %}
/**
   \brief {{operation.description}}
*/
{% endif %}
{% assign returnVal = operation|unrealReturn: moduleCapital %}
{{returnVal}} {{class}}::{{operation.name|capital}}({{operation|unrealParams: moduleCapital}})
{
    {% if returnVal == "void" %}
    UnrealWamp::instance()->doCall("{{module.name}}.{{interface.name}}.{{operation.name}}", {
    {%- for param in operation.params -%}
        {{param|unrealVarName}}{% unless forloop.last %},{% endunless -%}
    {%- endfor -%}}, ArgumentsKw());
    {% else %}
    TPromise<{{returnVal}}> Promise;
    Async(EAsyncExecution::Thread, [{%- for param in operation.params -%}
        {{param|unrealVarName}}, 
    {%- endfor -%}&Promise]()
    {
        ResponseFunc Get{{interface.name | capital}}StateFunc = [&Promise](ResponseArg arg)
        {
            if(arg.args.size() != 1) {
              return;
            }
            Promise.SetValue(arg.args[0].get<{{returnVal}}>());
        };
        UnrealWamp::instance()->doCall("{{module.name}}.{{interface.name}}.{{operation.name}}", {
        {%- for param in operation.params -%}
            {{param|unrealVarName}}{% unless forloop.last %},{% endunless -%}
        {%- endfor -%}}, ArgumentsKw(), Get{{interface.name | capital}}StateFunc);
    });

    return Promise.GetFuture().Get();
    {% endif %}
}
{{nl}}
{% endfor %}
