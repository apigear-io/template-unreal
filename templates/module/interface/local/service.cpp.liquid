{% comment %} Copyright Epic Games, Inc. All Rights Reserved {% endcomment -%}
{% assign class = module.name | capital | append: interface.name | capital | append: "LocalService" -%}
/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
{% capture nl %}
{% endcapture %}

#include "{{module.name|capital}}{{interface.name|capital}}Local.h"
{% if interface.description%}
/**
   \brief {{interface.description}}
*/
{% endif %}
{{class}}::{{class}}()
    : I{{module.name | capital}}{{interface.name|capital}}Interface()
{% for property in interface.properties %}
    , {{property|unrealVarName}}({{property|unrealDefault}})
{% endfor %}
{
}
{{class}}::~{{class}}()
{
}
{{nl}}
{% for signal in interface.signals %}
F{{signal|unrealVarName}}Delegate& {{class}}::Get{{signal|unrealVarName}}SignalDelegate()
{
    return {{signal|unrealVarName}}Signal;
}
{{nl}}
{% endfor %}
{% for property in interface.properties %}
{{property|unrealTypeName}} {{class}}::Get{{property.name | capital}}() const
{
    return {{property|unrealVarName}};
}
{{nl}}
void {{class}}::Set{{property.name | capital}}({{property|unrealTypeName: true}} Value)
{
    if({{property|unrealVarName}} != Value)
    {
        {{property|unrealVarName}} = Value;
        {{property|unrealVarName}}Changed.Broadcast({{property|unrealVarName}});
    }
}
{{nl}}
F{{property|unrealVarName}}ChangedDelegate& {{class}}::Get{{property|unrealVarName}}ChangedDelegate()
{
    return {{property|unrealVarName}}Changed;
}
{% endfor %}
{{nl}}
{% for operation in interface.operations %}

{% if operation.description %}
/**
   \brief {{operation.description}}
*/
{% endif %}
{% assign returnVal = operation|unrealReturn %}
{{returnVal}} {{class}}::{{operation.name|capital}}({{operation|unrealParams}})
{
    {% for parameter in operation.params %}
    (void) {{parameter|unrealVarName}};
    {% endfor %}
    // do business logic here
    {% if returnVal != "void" %}
    return {{operation|unrealDefault}};
    {% endif %}
}
{% endfor %}
