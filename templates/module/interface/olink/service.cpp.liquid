{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{% assign class = module.name | capital | append: interface.name | capital | append: "OLinkService" -%}
{% assign moduleCapital = module.name | capital %}
{% assign moduleInterfaceCapital = moduleCapital | append: interface.name | capital -%}
/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
{% capture nl %}
{% endcapture %}

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "{{module.name|capital}}{{interface.name|capital}}OLink.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "apig/{{module.name|capital}}.json.adapter.h"
#include "unrealolink.h"
#include "Misc/DateTime.h"

{{nl}}
using namespace ApiGear::ObjectLink;

{% if interface.description%}
/**
   \brief {{interface.description}}
*/
{% endif %}
{{class}}::{{class}}()
    : I{{module.name | capital}}{{interface.name|capital}}Interface()
    , m_node(nullptr)
    , m_isReady(false)
{% for property in interface.properties %}
    , {{property|unrealVarName}}({{property|unrealDefault: moduleCapital}})
{% endfor %}
{
    UnrealOLink::instance()->linkObjectSource(olinkObjectName());
    m_node = ClientRegistry::get().addObjectSink(this);
}
{{nl}}
{{class}}::~{{class}}()
{
    m_isReady = false;
    m_node = nullptr;
}
{{nl}}

{% for signal in interface.signals %}
F{{signal|unrealVarName: moduleInterfaceCapital}}Delegate& {{class}}::Get{{signal|unrealVarName}}SignalDelegate()
{
    return {{signal|unrealVarName}}Signal;
}
{{nl}}
{% endfor %}

{% for property in interface.properties %}
{{property|unrealTypeName: false, moduleCapital}} {{class}}::Get{{property.name | capital}}() const
{
    return {{property|unrealVarName}};
}

void {{class}}::Set{{property.name | capital}}({{property|unrealParam: moduleCapital, 'In'}})
{
    if(!m_node) {
        return;
    }
    m_node->setRemoteProperty("{{module}}.{{interface}}/{{property}}", {{property|unrealVarName: 'In'}});
}
{{nl}}
F{{moduleInterfaceCapital}}{{property.name|capital}}ChangedDelegate& {{class}}::Get{{property.name|capital}}ChangedDelegate()
{
    return {{property.name|capital}}Changed;
}
{% endfor %}
{{nl}}
{% for operation in interface.operations %}
{% if operation.description %}
/**
   \brief {{operation.description}}
*/
{% endif %}
{% assign returnVal = operation|unrealReturn: moduleCapital %}
{{returnVal}} {{class}}::{{operation.name|capital}}({{operation|unrealParams: moduleCapital}})
{
    {% if returnVal == "void" %}
    if(!m_node) {
        UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
        return;
    }
    InvokeReplyFunc func = [this](InvokeReplyArg arg) {};
    m_node->invokeRemote("{{module.name|identifier}}.{{interface}}/{{operation}}", {
        {%- for param in operation.params -%}
            {{param|unrealVarName}}{% unless forloop.last %},{% endunless -%}
        {%- endfor -%}}, func);
    {% else %}
    if(!m_node) {
        UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
        return {{ operation|unrealDefault: moduleCapital}};
    }
    TPromise<{{returnVal}}> Promise;
    Async(EAsyncExecution::Thread, [{%- for param in operation.params -%}
        {{param|unrealVarName}}, 
    {%- endfor -%}&Promise, this]()
    {
        InvokeReplyFunc Get{{interface.name | capital}}StateFunc = [&Promise](InvokeReplyArg arg)
        {
            Promise.SetValue(arg.value.get<{{returnVal}}>());
        };
        m_node->invokeRemote("{{module}}.{{interface}}/{{operation}}", {
        {%- for param in operation.params -%}
            {{param|unrealVarName}}{% unless forloop.last %},{% endunless -%}
        {%- endfor -%}}, Get{{interface.name | capital}}StateFunc);
    });

    return Promise.GetFuture().Get();
    {% endif %}
}
{{nl}}
{% endfor %}

void {{class}}::applyState(const nlohmann::json& fields) 
{
{% for property in interface.properties %}
    if(fields.contains("{{property.name}}")) {
        if({{property|unrealVarName}} != fields["{{property.name}}"].get<{{property|unrealTypeName: false, moduleCapital}}>())
        {
            {{property|unrealVarName}} = fields["{{property.name}}"].get<{{property|unrealTypeName: false, moduleCapital}}>();
            {{property.name|capital}}Changed.Broadcast({{property|unrealVarName}});
        }
    }
{% endfor %}
}

std::string {{class}}::olinkObjectName()
{
    return "{{module}}.{{interface}}";
}

void {{class}}::olinkOnSignal(std::string name, nlohmann::json args)
{
    std::string path = Name::pathFromName(name);
{% for signal in interface.signals %}
    if(path == "{{signal}}") {
        {{signal|unrealVarName}}Signal.Broadcast(
{%- for param in signal.params -%}
        args[{{forloop.index0}}].get<{{param|unrealTypeName: false, moduleCapital}}>(){% unless forloop.last %},{% endunless -%}
{%- endfor -%}
    );
        return;
    }
{% endfor %}
}

void {{class}}::olinkOnPropertyChanged(std::string name, nlohmann::json value)
{
    std::string path = Name::pathFromName(name);
    applyState({ {path, value} });
}

void {{class}}::olinkOnInit(std::string name, nlohmann::json props, IClientNode *node)
{
    m_isReady = true;
    m_node = node;
    applyState(props);
    //call isReady();
}

void {{class}}::olinkOnRelease()
{
    m_isReady = false;
    m_node = nullptr;
}
