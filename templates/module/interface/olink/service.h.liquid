{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{% assign class = module.name | capital | append: interface.name | capital | append: "OLinkService" -%}
{% capture category %}API|{{module.name | capital}}|{{interface.name | capital}}{% endcapture -%}
{% capture nl %}
{% endcapture -%}
/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#pragma once

#include "apig/{{module.name|capital}}_apig.h"
#include "olink/clientnode.h"

class {{class}} : public I{{module.name | capital}}{{interface.name | capital}}Interface, public ApiGear::ObjectLink::IObjectSink
{
public:

    explicit {{class}}();
    virtual ~{{class}}();

    // signals
{% for signal in interface.signals %}
    F{{signal|unrealVarName}}Delegate {{signal|unrealVarName}}Signal;
    F{{signal|unrealVarName}}Delegate& Get{{signal|unrealVarName}}SignalDelegate() override;
    {{nl}}
{% endfor %}
{% for property in interface.properties %}
    F{{property|unrealVarName}}ChangedDelegate {{property|unrealVarName}}Changed;
    F{{property|unrealVarName}}ChangedDelegate& Get{{property|unrealVarName}}ChangedDelegate() override;
{{nl}}
{% endfor %}
    // properties
{% for property in interface.properties %}
    {{property|unrealTypeName}} Get{{property.name | capital}}() const override;
    void Set{{property.name | capital}}({{property|unrealParam: '', 'In'}}) override;
{{nl}}
{% endfor %}

    // operations
{% for operation in interface.operations %}
    {{operation|unrealReturn}} {{operation.name | capital}}({{operation|unrealParams}}) override;
    {{nl}}
{% endfor %}

    // olink sink interface
    std::string olinkObjectName() override;
    void olinkOnSignal(std::string name, nlohmann::json args) override;
    void olinkOnPropertyChanged(std::string name, nlohmann::json value) override;
    void olinkOnInit(std::string name, nlohmann::json props, ApiGear::ObjectLink::IClientNode *node) override;
    void olinkOnRelease() override;

private:
    void applyState(const nlohmann::json& fields);
    
    ApiGear::ObjectLink::IClientNode *m_node;
    bool m_isReady;
    // properties - local copy
{% for property in interface.properties %}
{% if property.description != nil %}
    /** {{property.description}} */
{% endif %}
    {{property|unrealTypeName}} {{property|unrealVarName}};
{% endfor %}
};
