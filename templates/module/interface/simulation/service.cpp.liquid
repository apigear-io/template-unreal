{% comment %} Copyright Epic Games, Inc. All Rights Reserved {% endcomment -%}
{% assign class = module.name | capital | append: interface.name | capital | append: "SimulationService" -%}
{% assign moduleCapital = module.name | capital %}
{% assign moduleInterfaceCapital = moduleCapital | append: interface.name | capital -%}
/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
{% capture nl %}
{% endcapture %}

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "{{module.name|capital}}{{interface.name|capital}}Simulation.h"
#include "apig/{{module.name|capital}}.json.adapter.h"
#include "unrealsimulation.h"
{{nl}}
using namespace ApiGear::JSONRPC;

{% if interface.description%}
/**
   \brief {{interface.description}}
*/
{% endif %}
{{class}}::{{class}}()
    : I{{module.name | capital}}{{interface.name|capital}}Interface()
{% for property in interface.properties %}
    , {{property|unrealVarName}}({{property|unrealDefault: moduleCapital}})
{% endfor %}
{
    NotifyRequestFunc {{interface.name | capital}}StateChangedFunc = [this](NotifyRequestArg arg)
    {
        const json fields = arg.params;
{% for property in interface.properties %}
        if(fields.contains("{{property.name}}")) {
            if({{property|unrealVarName}} != fields["{{property.name}}"].get<{{property|unrealTypeName: false, moduleCapital}}>())
            {
                {{property|unrealVarName}} = fields["{{property.name}}"].get<{{property|unrealTypeName: false, moduleCapital}}>();
                {{moduleInterfaceCapital}}{{property.name|capital}}Changed.Broadcast({{property|unrealVarName}});
            }
        }
{% endfor %}
    };
    UnrealSimulation::instance()->onNotifyState("{{module.name}}/{{interface.name}}", {{interface.name | capital}}StateChangedFunc);
{{nl}}
    CallResponseFunc Get{{interface.name | capital}}StateFunc = [this](CallResponseArg arg)
    {
        if(arg.result.size() != 1) {
          return;
        }
        const json fields = arg.result;
{% for property in interface.properties %}
        if(fields.contains("{{property.name}}")) {
            if({{property|unrealVarName}} != fields["{{property.name}}"].get<{{property|unrealTypeName: false, moduleCapital}}>())
            {
                {{property|unrealVarName}} = fields["{{property.name}}"].get<{{property|unrealTypeName: false, moduleCapital}}>();
                {{moduleInterfaceCapital}}{{property.name|capital}}Changed.Broadcast({{property|unrealVarName}});
            }
        }
{% endfor %}
    };
    UnrealSimulation::instance()->doFetchState("{{module.name}}/{{interface.name}}", Get{{interface.name | capital}}StateFunc);
{{nl}}
    // register notification callback functions, signal/event -> fcn
{% for signal in interface.signals %}
    NotifyRequestFunc {{signal.name}}Func = [this](NotifyRequestArg arg)
    {
    {% if signal.params.size > 0 %}
        const json fields = arg.params;
        if(
    {%- for param in signal.params -%}
        fields.contains("{{param.name}}"){% unless forloop.last %} &&{% endunless -%}
    {%- endfor %})
        {
            {{signal|unrealVarName: moduleInterfaceCapital}}Signal.Broadcast(
        {%- for param in signal.params -%}
                fields["{{param.name}}"].get<{{param|unrealReturn: moduleCapital}}>(){% unless forloop.last %},{% endunless -%}
        {%- endfor -%}
            );
        }
    {% else %}
        {{signal|unrealVarName: moduleInterfaceCapital}}Signal.Broadcast();
    {% endif %}
    };
    UnrealSimulation::instance()->onNotify("{{module.name}}/{{interface.name}}#{{signal.name}}", {{signal.name}}Func);
{{nl}}
{% endfor %}
}
{{nl}}
{{class}}::~{{class}}()
{
    UnrealSimulation::instance()->RemoveOnNotifyState("{{module.name}}/{{interface.name}}");
    // unregister notification callback functions
{% for signal in interface.signals %}
    UnrealSimulation::instance()->RemoveOnNotify("{{module.name}}/{{interface.name}}#{{signal.name}}");
{% endfor %}
}
{{nl}}

{% for signal in interface.signals %}
F{{signal|unrealVarName: moduleInterfaceCapital}}Delegate& {{class}}::Get{{signal|unrealVarName: moduleInterfaceCapital}}SignalDelegate()
{
    return {{signal|unrealVarName: moduleInterfaceCapital}}Signal;
}
{{nl}}
{% endfor %}
{% for property in interface.properties %}
{{property|unrealTypeName: false, moduleCapital}} {{class}}::Get{{property.name | capital}}() const
{
    return {{property|unrealVarName}};
}

void {{class}}::Set{{property.name | capital}}({{property|unrealParam: moduleCapital, 'In'}})
{
    Params params;
    params["{{property.name}}"] = {{property|unrealVarName: 'In'}};
    UnrealSimulation::instance()->doCall("{{module.name}}/{{interface.name}}", "_set", params);
}

F{{moduleInterfaceCapital}}{{property.name|capital}}ChangedDelegate& {{class}}::Get{{moduleInterfaceCapital}}{{property.name|capital}}ChangedDelegate()
{
    return {{moduleInterfaceCapital}}{{property.name|capital}}Changed;
}
{{nl}}
{% endfor %}

{% for operation in interface.operations %}
{% if operation.description %}
/**
   \brief {{operation.description}}
*/
{% endif %}
{% assign returnVal = operation|unrealReturn: moduleCapital %}
{{returnVal}} {{class}}::{{operation.name|capital}}({{operation|unrealParams: moduleCapital}})
{
    Params params;
    {% for param in operation.params %}
    params["{{param.name}}"] = {{param|unrealVarName}};
    {% endfor %}

    {% if returnVal == "void" %}
    UnrealSimulation::instance()->doCall("{{module.name}}/{{interface.name}}", "{{operation.name}}", params);
    {% else %}
    TPromise<{{returnVal}}> Promise;
    Async(EAsyncExecution::Thread, [params, &Promise]()
    {
        CallResponseFunc Get{{interface.name | capital}}StateFunc = [&Promise](CallResponseArg arg)
        {
            Promise.SetValue(arg.result.get<{{returnVal}}>());
        };
        UnrealSimulation::instance()->doCall("{{module.name}}/{{interface.name}}", "{{operation.name}}", params, Get{{interface.name | capital}}StateFunc);
    });

    return Promise.GetFuture().Get();
    {% endif %}
}
{{nl}}
{% endfor %}
