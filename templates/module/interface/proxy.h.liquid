{% comment %} Copyright Epic Games, Inc. All Rights Reserved {% endcomment -%}
{% assign class_name_capital = module.name | capital | append: interface.name | capital -%}
{% assign class = "U" | append: class_name_capital | append: "Proxy" %}
{% capture category %}ApiGear|{{module.name | capital}}|{{interface.name | capital}}{% endcapture -%}
{% assign moduleCapital = module.name | capital %}
{% assign moduleInterfaceCapital = moduleCapital | append: interface.name | capital %}
{% assign API_MACRO = module.name | upcase | remove: '.' | append: "_API" -%}
{% capture nl %}
{% endcapture %}
/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#pragma once

#include "CoreMinimal.h"
#include "UObject/NoExportTypes.h"
#include "apig/{{module.name|capital}}_apig.h"
#include "{{module.name|capital}}{{interface.name|capital}}Proxy.generated.h"

UCLASS(BlueprintType, Blueprintable, DisplayName="{{class_name_capital}}")
class {{ API_MACRO }} {{class}} : public UObject, public I{{module.name | capital}}{{interface.name | capital}}Interface
{
	GENERATED_BODY()

public:
    explicit {{class}}();
    virtual ~{{class}}();

    // signals
{% for signal in interface.signals %}
	UPROPERTY(BlueprintAssignable, Category = "{{category}}", DisplayName = "{{signal.name | capital}} Signal")
    F{{signal|unrealVarName: moduleInterfaceCapital}}Delegate {{signal|unrealVarName}}Signal;
    F{{signal|unrealVarName: moduleInterfaceCapital}}Delegate& Get{{signal|unrealVarName}}SignalDelegate() override;
	UFUNCTION(Category = "{{category}}", BlueprintInternalUseOnly)
    void On{{signal|unrealVarName}}({{signal|unrealParams: moduleCapital}});
    {{nl}}
{% endfor %}
{% for property in interface.properties %}
	UPROPERTY(BlueprintAssignable, Category = "{{category}}", DisplayName = "{{property.name | capital}} Changed")
    F{{moduleInterfaceCapital}}{{property.name|capital}}ChangedDelegate {{property.name|capital}}Changed;
    F{{moduleInterfaceCapital}}{{property.name|capital}}ChangedDelegate& Get{{property.name|capital}}ChangedDelegate() override;
	UFUNCTION(BlueprintCallable, Category = "{{category}}", BlueprintInternalUseOnly)
    void On{{property.name|capital}}Changed({{property|unrealParam: moduleCapital}});
{{nl}}
{% endfor %}
    // properties
{% for property in interface.properties %}
{% if property.description != nil %}
    /** {{property.description}} */
{% endif %}
	UFUNCTION(BlueprintCallable, Category = "{{category}}")
    {{property|unrealTypeName: false, moduleCapital}} Get{{property.name | capital}}() const override;

	UFUNCTION(BlueprintCallable, Category = "{{category}}")
    void Set{{property.name | capital}}({{property|unrealParam: moduleCapital}}) override;
{{nl}}
{% endfor %}
    // operations
{% for operation in interface.operations %}
{% assign returnVal = operation|unrealReturn: moduleCapital %}
    {% if returnVal == "void" %}
	UFUNCTION(BlueprintCallable, Category = "{{category}}")
    {{operation|unrealReturn: moduleCapital}} {{operation.name | capital}}({{operation|unrealParams: moduleCapital}}) override;
    {% else %}
	UFUNCTION(BlueprintCallable, Category = "{{category}}", meta=(Latent, LatentInfo="LatentInfo", HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject"))
    void {{operation.name | capital}}(UObject* WorldContextObject, struct FLatentActionInfo LatentInfo, {{operation|unrealReturn: moduleCapital}}& Result{% if operation.params.size > 0 %}, {%endif%}{{operation|unrealParams: moduleCapital}});
    {{operation|unrealReturn: moduleCapital}} {{operation.name | capital}}({{operation|unrealParams: moduleCapital}}) override;
    {% endif %}
{{nl}}
{% endfor %}
private:
	/** The connection to the service backend. */
	TSharedPtr<I{{module.name | capital}}{{interface.name|capital}}Interface, ESPMode::ThreadSafe> service;

    // properties - local copy
{% for property in interface.properties %}
{% if property.description != nil %}
    /** {{property.description}} */
{% endif %}
	UPROPERTY(EditAnywhere, BlueprintGetter=Get{{property.name | capital}}, BlueprintSetter=Set{{property.name | capital}}, Category = "{{category}}")
    {{property|unrealTypeName: false, moduleCapital}} {{property|unrealVarName}};
{{nl}}
{% endfor %}
};
