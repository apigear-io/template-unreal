{% comment %} Copyright Epic Games, Inc. All Rights Reserved {% endcomment -%}
/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
{% assign module_name_capital = module.name | capital -%}
{% assign module_name = "F"| append:module_name_capital | append: "ModuleFactory" %}

#include "{{module.name|capital}}Factory.h"
{% for interface in module.interfaces %}
{% assign class_capital = module.name | capital | append: interface.name | capital %}
#include "{{interface.name | capital}}/{{class_capital}}Local.h"
#include "{{interface.name | capital}}/{{class_capital}}WAMP.h"
#include "{{interface.name | capital}}/{{class_capital}}OLink.h"
#include "{{interface.name | capital}}/{{class_capital}}Simulation.h"
{% endfor %}
#include "{{module_name_capital}}Settings.h"

//General Log
DEFINE_LOG_CATEGORY(Log{{module_name}});

{% for interface in module.interfaces %}
{% assign class_capital = module.name | capital | append: interface.name | capital -%}
{% assign class = "I" | append: class_capital | append: "Interface" %}

TSharedPtr<I{{module.name | capital}}{{interface.name | capital}}Interface, ESPMode::ThreadSafe> {{module_name}}::create{{class}}()
{
    U{{module_name_capital}}Settings* settings = GetMutableDefault<U{{module_name_capital}}Settings>();

    switch(settings->ServiceConnection) {
        case E{{module_name_capital}}Connection::CONNECTION_WAMP:
            UE_LOG(Log{{module_name}}, Log, TEXT("create{{class}}: Using WAMP service backend"));
            return MakeShared<{{module.name | capital}}::{{interface.name | capital}}::Private::WAMPService, ESPMode::ThreadSafe>();
        case E{{module_name_capital}}Connection::CONNECTION_OLINK:
            UE_LOG(Log{{module_name}}, Log, TEXT("create{{class}}: Using OLink service backend"));
            return MakeShared<{{module.name | capital}}::{{interface.name | capital}}::Private::OLinkService, ESPMode::ThreadSafe>();
        case E{{module_name_capital}}Connection::CONNECTION_SIMU:
            UE_LOG(Log{{module_name}}, Log, TEXT("create{{class}}: Using simulation service backend"));
            return MakeShared<{{module.name | capital}}::{{interface.name | capital}}::Private::SimulationService, ESPMode::ThreadSafe>();
        case E{{module_name_capital}}Connection::CONNECTION_LOCAL:
            UE_LOG(Log{{module_name}}, Log, TEXT("create{{class}}: Using local service backend"));
        default:
            UE_LOG(Log{{module_name}}, Log, TEXT("create{{class}}: Defaulting to local service backend"));
            return MakeShared<{{module.name | capital}}::{{interface.name | capital}}::Private::LocalService, ESPMode::ThreadSafe>();
    }
}
{% endfor %}
