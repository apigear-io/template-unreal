{% comment %} Copyright Epic Games, Inc. All Rights Reserved {% endcomment -%}
{% capture nl %}
{% endcapture -%}
/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#pragma once

#include <cinttypes>
#include <string>
#include <list>
#include "UObject/Interface.h"

#include "{{module.name|capital}}_data.h"
#include "{{module.name|capital}}_apig.generated.h"
{{nl}}
{% comment %} 
*****************************************************************
*** INTERFACES                                                ***
*****************************************************************
{% endcomment %}
{% for interface in module.interfaces %}
{% capture category %}ApiGear|{{module.name | capital}}|{{interface.name | capital}}{% endcapture -%}
{{nl}}
/**
 * Declaration for {{interface.name}}
 */
{% assign class_capital = module.name | capital | append: interface.name | capital -%}
{% assign class = "U" | append: class_capital | append: "Interface" %}
// signal delegates
{% for signal in interface.signals %}
DECLARE_DYNAMIC_MULTICAST_DELEGATE{{signal.params.length|unrealDelegateNameAppendix}}(F{{signal|unrealVarName}}Delegate
{%- for param in signal.params -%}
    , {{param|unrealTypeName: true}}, {{param|unrealVarName}}
{%- endfor -%}
);
{{nl}}
{% endfor %}
// property delegates
{% for property in interface.properties %}
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F{{property|unrealVarName}}ChangedDelegate, {{property|unrealTypeName: true}}, {{property|unrealVarName}});
{{nl}}
{% endfor %}
/**
 * Interface {{class}} only for Unreal Engine's reflection system
 */
UINTERFACE(MinimalAPI)
class {{class}} : public UInterface
{
    GENERATED_BODY()
};

{% assign class = "I" | append: class_capital | append: "Interface" %}

/**
 * Interface {{class}}
 */
class {{ module.name | constant }}_API {{class}}
{
    GENERATED_BODY()

public:
// signals
{% for signal in interface.signals %}
    virtual F{{signal|unrealVarName}}Delegate& Get{{signal|unrealVarName}}SignalDelegate() = 0;
{{nl}}
{% endfor %}
{% for property in interface.properties %}
    virtual F{{property|unrealVarName}}ChangedDelegate& Get{{property|unrealVarName}}ChangedDelegate() = 0;
{{nl}}
{% endfor %}

// methods
{% for operation in interface.operations %}
    virtual {{operation|unrealReturn}} {{operation.name|capital}}({{operation|unrealParams}}) = 0;
{% endfor %}
// properties
{% for property in interface.properties %}
    virtual {{property|unrealTypeName}} Get{{property.name | capital}}() const = 0;
    virtual void Set{{property.name | capital}}({{property|unrealTypeName: true}} Value) = 0;
{% endfor %}
};

{% endfor %}
