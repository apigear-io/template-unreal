/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */




#include "TbSame1/Generated/Jni/TbSame1SameEnum2InterfaceJniClient.h"
#include "TbSame1/Generated/Jni/TbSame1DataJavaConverter.h"
#include "TbSame1/Generated/api/TbSame1_data.h"

#include "Async/Async.h"
#include "Engine/Engine.h"

#if PLATFORM_ANDROID

#include "Engine/Engine.h"
 #include "Android/AndroidJNI.h"
 #include "Android/AndroidApplication.h"

 #if USE_ANDROID_JNI
 #include <jni.h>
 #endif
#endif

#include <atomic>
#include "HAL/CriticalSection.h"
#include "GenericPlatform/GenericPlatformMisc.h"

/**
   \brief data structure to hold the last sent property values
*/


class UTbSame1SameEnum2InterfaceJniClientMethodHelper
{
public:
    template <typename ResultType>
    FGuid StorePromise(TPromise<ResultType>& Promise);

    template <typename ResultType>
    bool FulfillPromise(const FGuid& Id, const ResultType& Value);
private:
    TMap<FGuid, void*> ReplyPromisesMap;
    FCriticalSection ReplyPromisesMapCS;

};

namespace {

    UTbSame1SameEnum2InterfaceJniClient* gUTbSame1SameEnum2InterfaceJniClientHandle = nullptr;
    TFunction<void(bool)> gUTbSame1SameEnum2InterfaceJniClientnotifyIsReady = [](bool value) { (void)value; UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("notifyIsReady used but not set ")); };
    TFunction<void(ETbSame1Enum1)> gUTbSame1SameEnum2InterfaceJniClientOnProp1ChangedEmpty = [](ETbSame1Enum1 value) { (void)value; UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("onProp1Changed used but not set ")); };
    TFunction<void(ETbSame1Enum1)> gUTbSame1SameEnum2InterfaceJniClientOnProp1Changed = gUTbSame1SameEnum2InterfaceJniClientOnProp1ChangedEmpty;
    TFunction<void(ETbSame1Enum2)> gUTbSame1SameEnum2InterfaceJniClientOnProp2ChangedEmpty = [](ETbSame1Enum2 value) { (void)value; UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("onProp2Changed used but not set ")); };
    TFunction<void(ETbSame1Enum2)> gUTbSame1SameEnum2InterfaceJniClientOnProp2Changed = gUTbSame1SameEnum2InterfaceJniClientOnProp2ChangedEmpty;

    UTbSame1SameEnum2InterfaceJniClientMethodHelper  gUTbSame1SameEnum2InterfaceJniClientmethodHelper;

}


DEFINE_LOG_CATEGORY(LogTbSame1SameEnum2InterfaceClient_JNI);

UTbSame1SameEnum2InterfaceJniClient::UTbSame1SameEnum2InterfaceJniClient()
{
#if !(PLATFORM_ANDROID && USE_ANDROID_JNI)
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("This is class that adapts the usage with android and jni, but seems to be used on different target. Make sure  you are using it with Android"));
#endif
}

UTbSame1SameEnum2InterfaceJniClient::UTbSame1SameEnum2InterfaceJniClient(FVTableHelper& Helper)
    : Super(Helper)
{
}
UTbSame1SameEnum2InterfaceJniClient::~UTbSame1SameEnum2InterfaceJniClient() = default;

void UTbSame1SameEnum2InterfaceJniClient::Initialize(FSubsystemCollectionBase& Collection)
{
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("Init"));
    Super::Initialize(Collection);

    gUTbSame1SameEnum2InterfaceJniClientHandle = this;
    gUTbSame1SameEnum2InterfaceJniClientnotifyIsReady = [this](bool value) {
         b_isReady = value;
         AsyncTask(ENamedThreads::GameThread, [this]()
             {
                 _ConnectionStatusChangedBP.Broadcast(b_isReady);
                 _ConnectionStatusChanged.Broadcast(b_isReady);
             });
        };
	gUTbSame1SameEnum2InterfaceJniClientOnProp1Changed = [this](ETbSame1Enum1 InProp1)
    {
         Prop1 = InProp1;
         _GetPublisher()->BroadcastProp1Changed(Prop1);
    };
	gUTbSame1SameEnum2InterfaceJniClientOnProp2Changed = [this](ETbSame1Enum2 InProp2)
    {
         Prop2 = InProp2;
         _GetPublisher()->BroadcastProp2Changed(Prop2);
    };

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    m_javaJniClientClass = FAndroidApplication::FindJavaClassGlobalRef("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient");
    jmethodID constructor = Env->GetMethodID(m_javaJniClientClass, "<init>", "()V");
    jobject localRef = Env->NewObject(m_javaJniClientClass, constructor);
    m_javaJniClientInstance = Env->NewGlobalRef(localRef);
    FAndroidApplication::GetJavaEnv()->DeleteLocalRef(localRef);
#endif
}

void UTbSame1SameEnum2InterfaceJniClient::Deinitialize()
{
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("deinit"));
    _unbind();
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    Env->DeleteGlobalRef(m_javaJniClientInstance);
    m_javaJniClientClass = nullptr;
    m_javaJniClientInstance = nullptr;
#endif

    gUTbSame1SameEnum2InterfaceJniClientnotifyIsReady = [](bool value){(void)value; UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("notifyIsReady used but not set "));};
    gUTbSame1SameEnum2InterfaceJniClientOnProp1Changed = gUTbSame1SameEnum2InterfaceJniClientOnProp1ChangedEmpty;
    gUTbSame1SameEnum2InterfaceJniClientOnProp2Changed = gUTbSame1SameEnum2InterfaceJniClientOnProp2ChangedEmpty;

    gUTbSame1SameEnum2InterfaceJniClientHandle = nullptr;
    Super::Deinitialize();
}
ETbSame1Enum1 UTbSame1SameEnum2InterfaceJniClient::GetProp1() const
{
    return Prop1;
}
void UTbSame1SameEnum2InterfaceJniClient::SetProp1(ETbSame1Enum1 InProp1)
{
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:setProp1"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetProp1() == InProp1 )
    {
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("Property prop1 to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:setProp1 (LtbSame1/tbSame1_api/Enum1;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setProp1", "(LtbSame1/tbSame1_api/Enum1;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:setProp1 (LtbSame1/tbSame1_api/Enum1;)V not found"));
            return;
        }
        
        jobject jlocal_Prop1 = TbSame1DataJavaConverter::makeJavaEnum1(Env, InProp1);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_Prop1);
        Env->DeleteLocalRef(jlocal_Prop1);
    }
#endif

}
ETbSame1Enum2 UTbSame1SameEnum2InterfaceJniClient::GetProp2() const
{
    return Prop2;
}
void UTbSame1SameEnum2InterfaceJniClient::SetProp2(ETbSame1Enum2 InProp2)
{
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:setProp2"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetProp2() == InProp2 )
    {
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("Property prop2 to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:setProp2 (LtbSame1/tbSame1_api/Enum2;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setProp2", "(LtbSame1/tbSame1_api/Enum2;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:setProp2 (LtbSame1/tbSame1_api/Enum2;)V not found"));
            return;
        }
        
        jobject jlocal_Prop2 = TbSame1DataJavaConverter::makeJavaEnum2(Env, InProp2);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_Prop2);
        Env->DeleteLocalRef(jlocal_Prop2);
    }
#endif

}
ETbSame1Enum1 UTbSame1SameEnum2InterfaceJniClient::Func1(ETbSame1Enum1 InParam1)
{
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:func1 "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return ETbSame1Enum1::TS1E1_Value1;
    }
    TPromise<ETbSame1Enum1> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:func1Async:(Ljava/lang/String;LtbSame1/tbSame1_api/Enum1;)V CLASS not found"));
        return ETbSame1Enum1::TS1E1_Value1;
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "func1Async", "(Ljava/lang/String;LtbSame1/tbSame1_api/Enum1;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbSame1SameEnum2InterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobject jlocal_Param1 = TbSame1DataJavaConverter::makeJavaEnum1(Env, InParam1);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_Param1);
        Env->DeleteLocalRef(jlocal_Param1);
    }
    else
    {
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:func1Async (Ljava/lang/String;LtbSame1/tbSame1_api/Enum1;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
ETbSame1Enum1 UTbSame1SameEnum2InterfaceJniClient::Func2(ETbSame1Enum1 InParam1, ETbSame1Enum2 InParam2)
{
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:func2 "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return ETbSame1Enum1::TS1E1_Value1;
    }
    TPromise<ETbSame1Enum1> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:func2Async:(Ljava/lang/String;LtbSame1/tbSame1_api/Enum1;LtbSame1/tbSame1_api/Enum2;)V CLASS not found"));
        return ETbSame1Enum1::TS1E1_Value1;
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "func2Async", "(Ljava/lang/String;LtbSame1/tbSame1_api/Enum1;LtbSame1/tbSame1_api/Enum2;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbSame1SameEnum2InterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobject jlocal_Param1 = TbSame1DataJavaConverter::makeJavaEnum1(Env, InParam1);
        jobject jlocal_Param2 = TbSame1DataJavaConverter::makeJavaEnum2(Env, InParam2);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_Param1,  jlocal_Param2);
        Env->DeleteLocalRef(jlocal_Param1);
        Env->DeleteLocalRef(jlocal_Param2);
    }
    else
    {
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:func2Async (Ljava/lang/String;LtbSame1/tbSame1_api/Enum1;LtbSame1/tbSame1_api/Enum2;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}

bool UTbSame1SameEnum2InterfaceJniClient::_bindToService(FString servicePackage, FString connectionId)
{
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("Request JNI connection to %s"), *servicePackage);
    if (b_isReady)
    {
        if (servicePackage == m_lastBoundServicePackage && connectionId == m_lastConnectionId)
        {
            UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("Already bound"));
            return true;
        }
        else
        {
            _unbind();
        }
    }
    m_lastBoundServicePackage = servicePackage;
    m_lastConnectionId = connectionId;
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:bind:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z CLASS not found"));
        return false;
    }
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "bind", "(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z");
    if (MethodID != nullptr)
    {
        jobject Activity = FJavaWrapper::GameActivityThis;
        auto jPackage = FJavaHelper::ToJavaString(Env, servicePackage);
        auto jConnId = FJavaHelper::ToJavaString(Env, connectionId);
        auto res = FJavaWrapper::CallBooleanMethod(Env, m_javaJniClientInstance, MethodID, Activity, *jPackage, *jConnId);
        return res;
    }
    else
    {
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:bind (Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z not found"));
    }
#endif
    return false;
}

void UTbSame1SameEnum2InterfaceJniClient::_unbind()
{

    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("Request JNI unbind"));

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:unbind:()V CLASS not found"));
        return;
    }
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "unbind", "()V");
    if (MethodID != nullptr)
    {
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID);
    }
    else
    {
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("tbSame1/tbSame1jniclient/SameEnum2InterfaceJniClient:unbind ()V not found"));
    }
#endif
}

bool UTbSame1SameEnum2InterfaceJniClient::_IsReady() const
{
    return b_isReady;
}

#if PLATFORM_ANDROID && USE_ANDROID_JNI
JNI_METHOD void Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnProp1Changed(JNIEnv* Env, jclass Clazz,jobject prop1)
{
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnProp1Changed"));
    if (gUTbSame1SameEnum2InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnProp1Changed: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    ETbSame1Enum1 local_prop1 = TbSame1DataJavaConverter::getEnum1Value(Env, prop1);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop1= MoveTemp(local_prop1)]()
    {
        gUTbSame1SameEnum2InterfaceJniClientOnProp1Changed(plocal_prop1);
    });
}
JNI_METHOD void Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnProp2Changed(JNIEnv* Env, jclass Clazz,jobject prop2)
{
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnProp2Changed"));
    if (gUTbSame1SameEnum2InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnProp2Changed: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    ETbSame1Enum2 local_prop2 = TbSame1DataJavaConverter::getEnum2Value(Env, prop2);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop2= MoveTemp(local_prop2)]()
    {
        gUTbSame1SameEnum2InterfaceJniClientOnProp2Changed(plocal_prop2);
    });
}

JNI_METHOD void Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnSig1(JNIEnv* Env, jclass Clazz, jobject param1)
{
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnSig1"));
    if (gUTbSame1SameEnum2InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnSig1: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    ETbSame1Enum1 local_param1 = TbSame1DataJavaConverter::getEnum1Value(Env, param1);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param1= MoveTemp(local_param1)]()
        {
            if (gUTbSame1SameEnum2InterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnSig1: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbSame1SameEnum2InterfaceJniClientHandle->_GetPublisher()->BroadcastSig1Signal( plocal_param1);
        });
}

JNI_METHOD void Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnSig2(JNIEnv* Env, jclass Clazz, jobject param1, jobject param2)
{
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnSig2"));
    if (gUTbSame1SameEnum2InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnSig2: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    ETbSame1Enum1 local_param1 = TbSame1DataJavaConverter::getEnum1Value(Env, param1);
    ETbSame1Enum2 local_param2 = TbSame1DataJavaConverter::getEnum2Value(Env, param2);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param1= MoveTemp(local_param1),  plocal_param2= MoveTemp(local_param2)]()
        {
            if (gUTbSame1SameEnum2InterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Warning, TEXT("Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnSig2: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbSame1SameEnum2InterfaceJniClientHandle->_GetPublisher()->BroadcastSig2Signal( plocal_param1,  plocal_param2);
        });
}

JNI_METHOD void Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnFunc1Result(JNIEnv* Env, jclass Clazz, jobject result, jstring callId)
{
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnFunc1Result"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    ETbSame1Enum1 cpp_result = TbSame1DataJavaConverter::getEnum1Value(Env, result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbSame1SameEnum2InterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnFunc2Result(JNIEnv* Env, jclass Clazz, jobject result, jstring callId)
{
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT("Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeOnFunc2Result"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    ETbSame1Enum1 cpp_result = TbSame1DataJavaConverter::getEnum1Value(Env, result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbSame1SameEnum2InterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbSame1_tbSame1jniclient_SameEnum2InterfaceJniClient_nativeIsReady(JNIEnv* Env, jclass Clazz, jboolean value)
{
    AsyncTask(ENamedThreads::GameThread, [value]()
        {
            gUTbSame1SameEnum2InterfaceJniClientnotifyIsReady(value);
        });
}
#endif


template <typename ResultType>
FGuid UTbSame1SameEnum2InterfaceJniClientMethodHelper::StorePromise(TPromise<ResultType>& Promise)
{
    FGuid Id = FGuid::NewGuid();
    FScopeLock Lock(&ReplyPromisesMapCS);
    ReplyPromisesMap.Add(Id, &Promise);
    //TODO invalid id if sth goes wrong + log + checking
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT(" method store id %s"), *(Id.ToString(EGuidFormats::Digits)));
    return Id;
}

template <typename ResultType>
bool UTbSame1SameEnum2InterfaceJniClientMethodHelper::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
    UE_LOG(LogTbSame1SameEnum2InterfaceClient_JNI, Verbose, TEXT(" method resolving id %s"), *(Id.ToString(EGuidFormats::Digits)));
    TPromise<ResultType>* PromisePtr = nullptr;

    {
        FScopeLock Lock(&ReplyPromisesMapCS);
        if (auto** Found = ReplyPromisesMap.Find(Id))
        {
            PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
            ReplyPromisesMap.Remove(Id);
        }
    }

    if (PromisePtr)
    {
        AsyncTask(ENamedThreads::GameThread, [Value, PromisePtr]()
            {
                PromisePtr->SetValue(Value);
            });
        return true;

    }
    return false;
}
template FGuid UTbSame1SameEnum2InterfaceJniClientMethodHelper::StorePromise<ETbSame1Enum1>(TPromise<ETbSame1Enum1>& Promise);
template bool UTbSame1SameEnum2InterfaceJniClientMethodHelper::FulfillPromise<ETbSame1Enum1>(const FGuid& Id, const ETbSame1Enum1& Value);

