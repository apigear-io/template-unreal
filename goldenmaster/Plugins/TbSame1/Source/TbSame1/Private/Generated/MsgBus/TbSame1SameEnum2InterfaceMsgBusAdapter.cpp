/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/MsgBus/TbSame1SameEnum2InterfaceMsgBusAdapter.h"
#include "Generated/MsgBus/TbSame1SameEnum2InterfaceMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "TimerManager.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"

DEFINE_LOG_CATEGORY(LogTbSame1SameEnum2InterfaceMsgBusAdapter);
UTbSame1SameEnum2InterfaceMsgBusAdapter::UTbSame1SameEnum2InterfaceMsgBusAdapter()
{
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTimerHandle.IsValid() && GetWorld())
	{
		GetWorld()->GetTimerManager().SetTimer(_HeartbeatTimerHandle, this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::_CheckClientTimeouts, _HeartbeatIntervalMS / 1000.0f, true);
	}

	if (TbSame1SameEnum2InterfaceMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	TbSame1SameEnum2InterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSame1/SameEnum2Interface/Service")
		.Handling<FTbSame1SameEnum2InterfaceDiscoveryMessage>(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnDiscoveryMessage)
		.Handling<FTbSame1SameEnum2InterfaceServiceAnnouncementReplyMessage>(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnServiceAnnouncementMessage)
		.Handling<FTbSame1SameEnum2InterfacePingMessage>(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnPing)
		.Handling<FTbSame1SameEnum2InterfaceClientDisconnectMessage>(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnClientDisconnected)
		.Handling<FTbSame1SameEnum2InterfaceSetProp1RequestMessage>(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnSetProp1Request)
		.Handling<FTbSame1SameEnum2InterfaceSetProp2RequestMessage>(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnSetProp2Request)
		.Handling<FTbSame1SameEnum2InterfaceFunc1RequestMessage>(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnFunc1Request)
		.Handling<FTbSame1SameEnum2InterfaceFunc2RequestMessage>(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnFunc2Request)
		.Build();
	// clang-format on

	if (TbSame1SameEnum2InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame1SameEnum2InterfaceMsgBusEndpoint->Subscribe<FTbSame1SameEnum2InterfaceDiscoveryMessage>();
		TbSame1SameEnum2InterfaceMsgBusEndpoint->Subscribe<FTbSame1SameEnum2InterfaceServiceAnnouncementReplyMessage>();
	}

	_AnnounceService();
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::_AnnounceService()
{
	if (!TbSame1SameEnum2InterfaceMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTbSame1SameEnum2InterfaceDiscoveryMessage();
	msg->Type = ETbSame1SameEnum2InterfaceDiscoveryMessageType::ServiceAnnouncement;
	TbSame1SameEnum2InterfaceMsgBusEndpoint->Publish<FTbSame1SameEnum2InterfaceDiscoveryMessage>(msg);
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTimerHandle.IsValid() && GetWorld())
	{
		GetWorld()->GetTimerManager().ClearTimer(_HeartbeatTimerHandle);
	}

	auto msg = new FTbSame1SameEnum2InterfaceServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (TbSame1SameEnum2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSame1SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum2InterfaceServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbSame1SameEnum2InterfaceMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTbSame1SameEnum2InterfaceMsgBusAdapter::_IsListening() const
{
	return TbSame1SameEnum2InterfaceMsgBusEndpoint.IsValid();
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::_setBackendService(TScriptInterface<ITbSame1SameEnum2InterfaceInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbSame1SameEnum2InterfaceSignals* BackendSignals = BackendService->Execute__GetSignals(BackendService.GetObject());
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service TbSame1SameEnum2Interface"));
		BackendSignals->OnProp1Changed.RemoveDynamic(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnProp1Changed);
		BackendSignals->OnProp2Changed.RemoveDynamic(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnProp2Changed);
		BackendSignals->OnSig1Signal.RemoveDynamic(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnSig1);
		BackendSignals->OnSig2Signal.RemoveDynamic(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnSig2);
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbSame1SameEnum2Interface is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbSame1SameEnum2InterfaceSignals* BackendSignals = BackendService->Execute__GetSignals(BackendService.GetObject());
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service TbSame1SameEnum2Interface"));
	// connect property changed signals or simple events
	BackendSignals->OnProp1Changed.AddDynamic(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnProp1Changed);
	BackendSignals->OnProp2Changed.AddDynamic(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnProp2Changed);
	BackendSignals->OnSig1Signal.AddDynamic(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnSig1);
	BackendSignals->OnSig2Signal.AddDynamic(this, &UTbSame1SameEnum2InterfaceMsgBusAdapter::OnSig2);
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::OnDiscoveryMessage(const FTbSame1SameEnum2InterfaceDiscoveryMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	switch (InMessage.Type)
	{
	case ETbSame1SameEnum2InterfaceDiscoveryMessageType::ServiceAnnouncement:
		HandleServiceAnnouncement(Context);
		break;
	case ETbSame1SameEnum2InterfaceDiscoveryMessageType::ConnectionRequest:
	default:
		HandleClientConnectionRequest(Context);
		break;
	}
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::HandleClientConnectionRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTbSame1SameEnum2InterfaceInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;
	msg->Prop1 = BackendService->Execute_GetProp1(BackendService.GetObject());
	msg->Prop2 = BackendService->Execute_GetProp2(BackendService.GetObject());

	if (TbSame1SameEnum2InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame1SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum2InterfaceInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::HandleServiceAnnouncement(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	// send service announcement
	auto msg = new FTbSame1SameEnum2InterfaceServiceAnnouncementReplyMessage();

	if (TbSame1SameEnum2InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame1SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum2InterfaceServiceAnnouncementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::OnServiceAnnouncementMessage(const FTbSame1SameEnum2InterfaceServiceAnnouncementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (TbSame1SameEnum2InterfaceMsgBusEndpoint->GetAddress() == Context->GetSender())
	{
		return;
	}
	UE_LOG(LogTbSame1SameEnum2InterfaceMsgBusAdapter, Error, TEXT("Service announcement from existing endpoint(%s) received, we should stop listening."), *Context->GetSender().ToString());
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::OnPing(const FTbSame1SameEnum2InterfacePingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSame1SameEnum2InterfacePongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (TbSame1SameEnum2InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame1SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum2InterfacePongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::OnClientDisconnected(const FTbSame1SameEnum2InterfaceClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::OnFunc1Request(const FTbSame1SameEnum2InterfaceFunc1RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSame1SameEnum2InterfaceFunc1ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Execute_Func1(BackendService.GetObject(), InMessage.Param1);

	if (TbSame1SameEnum2InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame1SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum2InterfaceFunc1ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::OnFunc2Request(const FTbSame1SameEnum2InterfaceFunc2RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSame1SameEnum2InterfaceFunc2ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Execute_Func2(BackendService.GetObject(), InMessage.Param1, InMessage.Param2);

	if (TbSame1SameEnum2InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame1SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum2InterfaceFunc2ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::OnSig1(ETbSame1Enum1 InParam1)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSame1SameEnum2InterfaceSig1SignalMessage();
	msg->Param1 = InParam1;
	if (TbSame1SameEnum2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSame1SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum2InterfaceSig1SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::OnSig2(ETbSame1Enum1 InParam1, ETbSame1Enum2 InParam2)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSame1SameEnum2InterfaceSig2SignalMessage();
	msg->Param1 = InParam1;
	msg->Param2 = InParam2;
	if (TbSame1SameEnum2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSame1SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum2InterfaceSig2SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::OnSetProp1Request(const FTbSame1SameEnum2InterfaceSetProp1RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetProp1(BackendService.GetObject(), InMessage.Prop1);
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::OnProp1Changed(ETbSame1Enum1 InProp1)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSame1SameEnum2InterfaceProp1ChangedMessage();
	msg->Prop1 = InProp1;

	if (TbSame1SameEnum2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSame1SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum2InterfaceProp1ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::OnSetProp2Request(const FTbSame1SameEnum2InterfaceSetProp2RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetProp2(BackendService.GetObject(), InMessage.Prop2);
}

void UTbSame1SameEnum2InterfaceMsgBusAdapter::OnProp2Changed(ETbSame1Enum2 InProp2)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSame1SameEnum2InterfaceProp2ChangedMessage();
	msg->Prop2 = InProp2;

	if (TbSame1SameEnum2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSame1SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame1SameEnum2InterfaceProp2ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
