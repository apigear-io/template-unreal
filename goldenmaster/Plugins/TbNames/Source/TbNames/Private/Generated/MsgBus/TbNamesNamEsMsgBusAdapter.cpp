/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/MsgBus/TbNamesNamEsMsgBusAdapter.h"
#include "Generated/MsgBus/TbNamesNamEsMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "TimerManager.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"

DEFINE_LOG_CATEGORY(LogTbNamesNamEsMsgBusAdapter);
UTbNamesNamEsMsgBusAdapter::UTbNamesNamEsMsgBusAdapter()
{
}

void UTbNamesNamEsMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbNamesNamEsMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTbNamesNamEsMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTimerHandle.IsValid() && GetWorld())
	{
		GetWorld()->GetTimerManager().SetTimer(_HeartbeatTimerHandle, this, &UTbNamesNamEsMsgBusAdapter::_CheckClientTimeouts, _HeartbeatIntervalMS / 1000.0f, true);
	}

	if (TbNamesNamEsMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	TbNamesNamEsMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbNames/NamEs/Service")
		.Handling<FTbNamesNamEsDiscoveryMessage>(this, &UTbNamesNamEsMsgBusAdapter::OnDiscoveryMessage)
		.Handling<FTbNamesNamEsServiceAnnouncementReplyMessage>(this, &UTbNamesNamEsMsgBusAdapter::OnServiceAnnouncementMessage)
		.Handling<FTbNamesNamEsPingMessage>(this, &UTbNamesNamEsMsgBusAdapter::OnPing)
		.Handling<FTbNamesNamEsClientDisconnectMessage>(this, &UTbNamesNamEsMsgBusAdapter::OnClientDisconnected)
		.Handling<FTbNamesNamEsSetSwitchRequestMessage>(this, &UTbNamesNamEsMsgBusAdapter::OnSetSwitchRequest)
		.Handling<FTbNamesNamEsSetSomePropertyRequestMessage>(this, &UTbNamesNamEsMsgBusAdapter::OnSetSomePropertyRequest)
		.Handling<FTbNamesNamEsSetSomePoperty2RequestMessage>(this, &UTbNamesNamEsMsgBusAdapter::OnSetSomePoperty2Request)
		.Handling<FTbNamesNamEsSomeFunctionRequestMessage>(this, &UTbNamesNamEsMsgBusAdapter::OnSomeFunctionRequest)
		.Handling<FTbNamesNamEsSomeFunction2RequestMessage>(this, &UTbNamesNamEsMsgBusAdapter::OnSomeFunction2Request)
		.Build();
	// clang-format on

	if (TbNamesNamEsMsgBusEndpoint.IsValid())
	{
		TbNamesNamEsMsgBusEndpoint->Subscribe<FTbNamesNamEsDiscoveryMessage>();
		TbNamesNamEsMsgBusEndpoint->Subscribe<FTbNamesNamEsServiceAnnouncementReplyMessage>();
	}

	_AnnounceService();
}

void UTbNamesNamEsMsgBusAdapter::_AnnounceService()
{
	if (!TbNamesNamEsMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTbNamesNamEsDiscoveryMessage();
	msg->Type = ETbNamesNamEsDiscoveryMessageType::ServiceAnnouncement;
	TbNamesNamEsMsgBusEndpoint->Publish<FTbNamesNamEsDiscoveryMessage>(msg);
}

void UTbNamesNamEsMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTimerHandle.IsValid() && GetWorld())
	{
		GetWorld()->GetTimerManager().ClearTimer(_HeartbeatTimerHandle);
	}

	auto msg = new FTbNamesNamEsServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (TbNamesNamEsMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbNamesNamEsMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTbNamesNamEsMsgBusAdapter::_IsListening() const
{
	return TbNamesNamEsMsgBusEndpoint.IsValid();
}

void UTbNamesNamEsMsgBusAdapter::_setBackendService(TScriptInterface<ITbNamesNamEsInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbNamesNamEsSignals* BackendSignals = BackendService->Execute__GetSignals(BackendService.GetObject());
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service TbNamesNamEs"));
		BackendSignals->OnSwitchChanged.RemoveDynamic(this, &UTbNamesNamEsMsgBusAdapter::OnSwitchChanged);
		BackendSignals->OnSomePropertyChanged.RemoveDynamic(this, &UTbNamesNamEsMsgBusAdapter::OnSomePropertyChanged);
		BackendSignals->OnSomePoperty2Changed.RemoveDynamic(this, &UTbNamesNamEsMsgBusAdapter::OnSomePoperty2Changed);
		BackendSignals->OnSomeSignalSignal.RemoveDynamic(this, &UTbNamesNamEsMsgBusAdapter::OnSomeSignal);
		BackendSignals->OnSomeSignal2Signal.RemoveDynamic(this, &UTbNamesNamEsMsgBusAdapter::OnSomeSignal2);
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbNamesNamEs is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbNamesNamEsSignals* BackendSignals = BackendService->Execute__GetSignals(BackendService.GetObject());
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service TbNamesNamEs"));
	// connect property changed signals or simple events
	BackendSignals->OnSwitchChanged.AddDynamic(this, &UTbNamesNamEsMsgBusAdapter::OnSwitchChanged);
	BackendSignals->OnSomePropertyChanged.AddDynamic(this, &UTbNamesNamEsMsgBusAdapter::OnSomePropertyChanged);
	BackendSignals->OnSomePoperty2Changed.AddDynamic(this, &UTbNamesNamEsMsgBusAdapter::OnSomePoperty2Changed);
	BackendSignals->OnSomeSignalSignal.AddDynamic(this, &UTbNamesNamEsMsgBusAdapter::OnSomeSignal);
	BackendSignals->OnSomeSignal2Signal.AddDynamic(this, &UTbNamesNamEsMsgBusAdapter::OnSomeSignal2);
}

void UTbNamesNamEsMsgBusAdapter::OnDiscoveryMessage(const FTbNamesNamEsDiscoveryMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	switch (InMessage.Type)
	{
	case ETbNamesNamEsDiscoveryMessageType::ServiceAnnouncement:
		HandleServiceAnnouncement(Context);
		break;
	case ETbNamesNamEsDiscoveryMessageType::ConnectionRequest:
	default:
		HandleClientConnectionRequest(Context);
		break;
	}
}

void UTbNamesNamEsMsgBusAdapter::HandleClientConnectionRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTbNamesNamEsInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;
	msg->bSwitch = BackendService->Execute_GetSwitch(BackendService.GetObject());
	msg->SomeProperty = BackendService->Execute_GetSomeProperty(BackendService.GetObject());
	msg->SomePoperty2 = BackendService->Execute_GetSomePoperty2(BackendService.GetObject());

	if (TbNamesNamEsMsgBusEndpoint.IsValid())
	{
		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTbNamesNamEsMsgBusAdapter::HandleServiceAnnouncement(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	// send service announcement
	auto msg = new FTbNamesNamEsServiceAnnouncementReplyMessage();

	if (TbNamesNamEsMsgBusEndpoint.IsValid())
	{
		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsServiceAnnouncementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbNamesNamEsMsgBusAdapter::OnServiceAnnouncementMessage(const FTbNamesNamEsServiceAnnouncementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (TbNamesNamEsMsgBusEndpoint->GetAddress() == Context->GetSender())
	{
		return;
	}
	UE_LOG(LogTbNamesNamEsMsgBusAdapter, Error, TEXT("Service announcement from existing endpoint(%s) received, we should stop listening."), *Context->GetSender().ToString());
}

void UTbNamesNamEsMsgBusAdapter::OnPing(const FTbNamesNamEsPingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbNamesNamEsPongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (TbNamesNamEsMsgBusEndpoint.IsValid())
	{
		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsPongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbNamesNamEsMsgBusAdapter::OnClientDisconnected(const FTbNamesNamEsClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

void UTbNamesNamEsMsgBusAdapter::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTbNamesNamEsMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}

void UTbNamesNamEsMsgBusAdapter::OnSomeFunctionRequest(const FTbNamesNamEsSomeFunctionRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	BackendService->Execute_SomeFunction(BackendService.GetObject(), InMessage.bSomeParam);
}

void UTbNamesNamEsMsgBusAdapter::OnSomeFunction2Request(const FTbNamesNamEsSomeFunction2RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	BackendService->Execute_SomeFunction2(BackendService.GetObject(), InMessage.bSomeParam);
}

void UTbNamesNamEsMsgBusAdapter::OnSomeSignal(bool bInSomeParam)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbNamesNamEsSomeSignalSignalMessage();
	msg->bSomeParam = bInSomeParam;
	if (TbNamesNamEsMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsSomeSignalSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbNamesNamEsMsgBusAdapter::OnSomeSignal2(bool bInSomeParam)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbNamesNamEsSomeSignal2SignalMessage();
	msg->bSomeParam = bInSomeParam;
	if (TbNamesNamEsMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsSomeSignal2SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbNamesNamEsMsgBusAdapter::OnSetSwitchRequest(const FTbNamesNamEsSetSwitchRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetSwitch(BackendService.GetObject(), InMessage.bSwitch);
}

void UTbNamesNamEsMsgBusAdapter::OnSwitchChanged(bool bInSwitch)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbNamesNamEsSwitchChangedMessage();
	msg->bSwitch = bInSwitch;

	if (TbNamesNamEsMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsSwitchChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbNamesNamEsMsgBusAdapter::OnSetSomePropertyRequest(const FTbNamesNamEsSetSomePropertyRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetSomeProperty(BackendService.GetObject(), InMessage.SomeProperty);
}

void UTbNamesNamEsMsgBusAdapter::OnSomePropertyChanged(int32 InSomeProperty)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbNamesNamEsSomePropertyChangedMessage();
	msg->SomeProperty = InSomeProperty;

	if (TbNamesNamEsMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsSomePropertyChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbNamesNamEsMsgBusAdapter::OnSetSomePoperty2Request(const FTbNamesNamEsSetSomePoperty2RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetSomePoperty2(BackendService.GetObject(), InMessage.SomePoperty2);
}

void UTbNamesNamEsMsgBusAdapter::OnSomePoperty2Changed(int32 InSomePoperty2)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbNamesNamEsSomePoperty2ChangedMessage();
	msg->SomePoperty2 = InSomePoperty2;

	if (TbNamesNamEsMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsSomePoperty2ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
