/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/MsgBus/TbNamesNamEsMsgBusClient.h"
#include "Generated/MsgBus/TbNamesNamEsMsgBusMessages.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
#include "MessageEndpointBuilder.h"
#include "MessageEndpoint.h"
#include <atomic>

/**
   \brief data structure to hold the last sent property values
*/
struct TbNamesNamEsPropertiesMsgBusData
{
	std::atomic<bool> bSwitch{false};
	std::atomic<int32> SomeProperty{0};
	std::atomic<int32> SomePoperty2{0};
};
DEFINE_LOG_CATEGORY(LogTbNamesNamEsMsgBusClient);

UTbNamesNamEsMsgBusClient::UTbNamesNamEsMsgBusClient()
	: UAbstractTbNamesNamEs()
	, _SentData(MakePimpl<TbNamesNamEsPropertiesMsgBusData>())
{
	/* m_sink = std::make_shared<FOLinkSink>("tb.names.Nam_Es"); */
}

UTbNamesNamEsMsgBusClient::~UTbNamesNamEsMsgBusClient() = default;

void UTbNamesNamEsMsgBusClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	Connect();
}

void UTbNamesNamEsMsgBusClient::Deinitialize()
{
	Disconnect();

	Super::Deinitialize();
}

void UTbNamesNamEsMsgBusClient::Connect()
{
	if (IsConnected())
	{
		return;
	}

	if (TbNamesNamEsMsgBusEndpoint.IsValid() && !ServiceAddress.IsValid())
	{
		DiscoverService();
		return;
	}

	// clang-format off
	TbNamesNamEsMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbNames/NamEs/Client")
		.Handling<FTbNamesNamEsInitMessage>(this, &UTbNamesNamEsMsgBusClient::OnConnectionInit)
		.Handling<FTbNamesNamEsServiceDisconnectMessage>(this, &UTbNamesNamEsMsgBusClient::OnServiceClosedConnection)
		.Handling<FTbNamesNamEsSomeSignalSignalMessage>(this, &UTbNamesNamEsMsgBusClient::OnSomeSignal)

		.Handling<FTbNamesNamEsSomeSignal2SignalMessage>(this, &UTbNamesNamEsMsgBusClient::OnSomeSignal2)
		.Handling<FTbNamesNamEsSwitchChangedMessage>(this, &UTbNamesNamEsMsgBusClient::OnSwitchChanged)

		.Handling<FTbNamesNamEsSomePropertyChangedMessage>(this, &UTbNamesNamEsMsgBusClient::OnSomePropertyChanged)

		.Handling<FTbNamesNamEsSomePoperty2ChangedMessage>(this, &UTbNamesNamEsMsgBusClient::OnSomePoperty2Changed)
		.Build();
	// clang-format on

	DiscoverService();
}

void UTbNamesNamEsMsgBusClient::Disconnect()
{
	if (!IsConnected())
	{
		return;
	}

	auto msg = new FTbNamesNamEsClientDisconnectMessage();

	if (TbNamesNamEsMsgBusEndpoint.IsValid())
	{
		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsClientDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbNamesNamEsMsgBusEndpoint.Reset();
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

void UTbNamesNamEsMsgBusClient::DiscoverService()
{
	if (TbNamesNamEsMsgBusEndpoint.IsValid())
	{
		TbNamesNamEsMsgBusEndpoint->Publish<FTbNamesNamEsDiscoveryMessage>(new FTbNamesNamEsDiscoveryMessage());
	}
}

bool UTbNamesNamEsMsgBusClient::IsConnected() const
{
	return TbNamesNamEsMsgBusEndpoint.IsValid() && ServiceAddress.IsValid();
}

void UTbNamesNamEsMsgBusClient::OnConnectionInit(const FTbNamesNamEsInitMessage& InInitMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ServiceAddress.IsValid())
	{
		ServiceAddress = Context->GetSender();
		const bool bbSwitchChanged = InInitMessage.bSwitch != bSwitch;
		if (bbSwitchChanged)
		{
			bSwitch = InInitMessage.bSwitch;
			Execute__GetSignals(this)->OnSwitchChanged.Broadcast(bSwitch);
		}

		const bool bSomePropertyChanged = InInitMessage.SomeProperty != SomeProperty;
		if (bSomePropertyChanged)
		{
			SomeProperty = InInitMessage.SomeProperty;
			Execute__GetSignals(this)->OnSomePropertyChanged.Broadcast(SomeProperty);
		}

		const bool bSomePoperty2Changed = InInitMessage.SomePoperty2 != SomePoperty2;
		if (bSomePoperty2Changed)
		{
			SomePoperty2 = InInitMessage.SomePoperty2;
			Execute__GetSignals(this)->OnSomePoperty2Changed.Broadcast(SomePoperty2);
		}

		_ConnectionStatusChanged.Broadcast(true);
	}
	else
	{
		UE_LOG(LogTbNamesNamEsMsgBusClient, Error, TEXT("Got a second init message - should not happen"));
	}
}

void UTbNamesNamEsMsgBusClient::OnServiceClosedConnection(const FTbNamesNamEsServiceDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		return;
	}

	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

bool UTbNamesNamEsMsgBusClient::GetSwitch_Implementation() const
{
	return bSwitch;
}

void UTbNamesNamEsMsgBusClient::SetSwitch_Implementation(bool bInSwitch)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbNamesNamEsMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetSwitch_Implementation() == bInSwitch)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->bSwitch == bInSwitch)
	{
		return;
	}

	auto msg = new FTbNamesNamEsSetSwitchRequestMessage();
	msg->bSwitch = bInSwitch;

	if (TbNamesNamEsMsgBusEndpoint.IsValid())
	{
		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsSetSwitchRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		_SentData->bSwitch = bInSwitch;
	}
}

int32 UTbNamesNamEsMsgBusClient::GetSomeProperty_Implementation() const
{
	return SomeProperty;
}

void UTbNamesNamEsMsgBusClient::SetSomeProperty_Implementation(int32 InSomeProperty)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbNamesNamEsMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetSomeProperty_Implementation() == InSomeProperty)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->SomeProperty == InSomeProperty)
	{
		return;
	}

	auto msg = new FTbNamesNamEsSetSomePropertyRequestMessage();
	msg->SomeProperty = InSomeProperty;

	if (TbNamesNamEsMsgBusEndpoint.IsValid())
	{
		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsSetSomePropertyRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		_SentData->SomeProperty = InSomeProperty;
	}
}

int32 UTbNamesNamEsMsgBusClient::GetSomePoperty2_Implementation() const
{
	return SomePoperty2;
}

void UTbNamesNamEsMsgBusClient::SetSomePoperty2_Implementation(int32 InSomePoperty2)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbNamesNamEsMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetSomePoperty2_Implementation() == InSomePoperty2)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->SomePoperty2 == InSomePoperty2)
	{
		return;
	}

	auto msg = new FTbNamesNamEsSetSomePoperty2RequestMessage();
	msg->SomePoperty2 = InSomePoperty2;

	if (TbNamesNamEsMsgBusEndpoint.IsValid())
	{
		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsSetSomePoperty2RequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		_SentData->SomePoperty2 = InSomePoperty2;
	}
}

void UTbNamesNamEsMsgBusClient::SomeFunction_Implementation(bool bInSomeParam)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbNamesNamEsMsgBusClient, Error, TEXT("Client has no connection to service."));

		return;
	}

	auto msg = new FTbNamesNamEsSomeFunctionRequestMessage();
	msg->RepsonseId = FGuid::NewGuid();
	msg->bSomeParam = bInSomeParam;

	if (TbNamesNamEsMsgBusEndpoint.IsValid())
	{

		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsSomeFunctionRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return;
	}

	return;
}

void UTbNamesNamEsMsgBusClient::SomeFunction2_Implementation(bool bInSomeParam)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbNamesNamEsMsgBusClient, Error, TEXT("Client has no connection to service."));

		return;
	}

	auto msg = new FTbNamesNamEsSomeFunction2RequestMessage();
	msg->RepsonseId = FGuid::NewGuid();
	msg->bSomeParam = bInSomeParam;

	if (TbNamesNamEsMsgBusEndpoint.IsValid())
	{

		TbNamesNamEsMsgBusEndpoint->Send<FTbNamesNamEsSomeFunction2RequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return;
	}

	return;
}

void UTbNamesNamEsMsgBusClient::OnSomeSignal(const FTbNamesNamEsSomeSignalSignalMessage& InSomeSignalMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbNamesNamEsMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSomeSignalSignal.Broadcast(InSomeSignalMessage.bSomeParam);
	return;
}

void UTbNamesNamEsMsgBusClient::OnSomeSignal2(const FTbNamesNamEsSomeSignal2SignalMessage& InSomeSignal2Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbNamesNamEsMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSomeSignal2Signal.Broadcast(InSomeSignal2Message.bSomeParam);
	return;
}

void UTbNamesNamEsMsgBusClient::OnSwitchChanged(const FTbNamesNamEsSwitchChangedMessage& bInSwitchMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbNamesNamEsMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bbSwitchChanged = bInSwitchMessage.bSwitch != bSwitch;
	if (bbSwitchChanged)
	{
		bSwitch = bInSwitchMessage.bSwitch;
		Execute__GetSignals(this)->OnSwitchChanged.Broadcast(bSwitch);
	}
}

void UTbNamesNamEsMsgBusClient::OnSomePropertyChanged(const FTbNamesNamEsSomePropertyChangedMessage& InSomePropertyMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbNamesNamEsMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bSomePropertyChanged = InSomePropertyMessage.SomeProperty != SomeProperty;
	if (bSomePropertyChanged)
	{
		SomeProperty = InSomePropertyMessage.SomeProperty;
		Execute__GetSignals(this)->OnSomePropertyChanged.Broadcast(SomeProperty);
	}
}

void UTbNamesNamEsMsgBusClient::OnSomePoperty2Changed(const FTbNamesNamEsSomePoperty2ChangedMessage& InSomePoperty2Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbNamesNamEsMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bSomePoperty2Changed = InSomePoperty2Message.SomePoperty2 != SomePoperty2;
	if (bSomePoperty2Changed)
	{
		SomePoperty2 = InSomePoperty2Message.SomePoperty2;
		Execute__GetSignals(this)->OnSomePoperty2Changed.Broadcast(SomePoperty2);
	}
}

template <typename ResultType>
bool UTbNamesNamEsMsgBusClient::StorePromise(const FGuid& Id, TPromise<ResultType>& Promise)
{
	FScopeLock Lock(&ReplyPromisesMapCS);
	return ReplyPromisesMap.Add(Id, &Promise) != nullptr;
}

template <typename ResultType>
bool UTbNamesNamEsMsgBusClient::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
	TPromise<ResultType>* PromisePtr = nullptr;

	{
		FScopeLock Lock(&ReplyPromisesMapCS);
		if (auto** Found = ReplyPromisesMap.Find(Id))
		{
			PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
			ReplyPromisesMap.Remove(Id);
		}
	}

	if (PromisePtr)
	{
		PromisePtr->SetValue(Value);
		return true;
	}
	return false;
}
