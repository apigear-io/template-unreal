/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbRefIfacesSimpleLocalIfOLinkSource.h"
#include "HAL/Platform.h"
#include "OLinkCommon.h"
#if !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
#include "Async/Future.h"
#include "Async/Async.h"
#include "TbRefIfaces/Generated/api/TbRefIfaces.json.adapter.h"
#include "TbIfaceimport/Generated/api/TbIfaceimport.json.adapter.h"
#include "OLinkClientConnection.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
THIRD_PARTY_INCLUDES_START
#include "olink/iobjectsource.h"
THIRD_PARTY_INCLUDES_END

using namespace ApiGear::ObjectLink;

namespace
{
static const std::string TbRefIfacesSimpleLocalIfIdentifier{"tb.ref_ifaces.SimpleLocalIf"};
}

DEFINE_LOG_CATEGORY(LogTbRefIfacesSimpleLocalIfOLinkSource);
TbRefIfacesSimpleLocalIfOLinkSource::TbRefIfacesSimpleLocalIfOLinkSource()
	: Host(nullptr)
{
}

void TbRefIfacesSimpleLocalIfOLinkSource::setBackendService(TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> InService)
{
	// only set if interface is implemented
	if (InService.GetInterface() == nullptr)
	{
		UE_LOG(LogTbRefIfacesSimpleLocalIfOLinkSource, Error, TEXT("Cannot set backend service - interface TbRefIfacesSimpleLocalIf is not fully implemented"));
		return;
	}

	BackendService = InService;
}
void TbRefIfacesSimpleLocalIfOLinkSource::OnIntSignal(int32 Param)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "intSignal");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {Param};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void TbRefIfacesSimpleLocalIfOLinkSource::OnIntPropertyChanged(int32 InIntProperty)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "intProperty");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InIntProperty);
		}
	}
}

void TbRefIfacesSimpleLocalIfOLinkSource::setOLinkHost(TSoftObjectPtr<UOLinkHost> InHost)
{
	Host = InHost.Get();
}

//
// IObjectSource interface
//

std::string TbRefIfacesSimpleLocalIfOLinkSource::olinkObjectName()
{
	return TbRefIfacesSimpleLocalIfIdentifier;
}

nlohmann::json TbRefIfacesSimpleLocalIfOLinkSource::olinkInvoke(const std::string& methodId, const nlohmann::json& args)
{
	if (!BackendService)
	{
		UE_LOG(LogTbRefIfacesSimpleLocalIfOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter TbRefIfacesSimpleLocalIfOLinkAdapter which implements the TbRefIfacesSimpleLocalIf interface"));
		return nlohmann::json();
	}

	const std::string path = Name::getMemberName(methodId);
	if (path == "intMethod")
	{
		int32 Param = args.at(0).get<int32>();
		int32 result = BackendService->IntMethod(Param);
		return result;
	}
	return nlohmann::json();
}

void TbRefIfacesSimpleLocalIfOLinkSource::olinkSetProperty(const std::string& propertyId, const nlohmann::json& value)
{
	if (!BackendService)
	{
		UE_LOG(LogTbRefIfacesSimpleLocalIfOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter TbRefIfacesSimpleLocalIfOLinkAdapter which implements the TbRefIfacesSimpleLocalIf interface"));
		return;
	}

	const std::string path = Name::getMemberName(propertyId);
	if (path == "intProperty")
	{
		int32 IntProperty = value.get<int32>();
		BackendService->SetIntProperty(IntProperty);
	}
}

nlohmann::json TbRefIfacesSimpleLocalIfOLinkSource::olinkCollectProperties()
{
	if (!BackendService)
	{
		UE_LOG(LogTbRefIfacesSimpleLocalIfOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter TbRefIfacesSimpleLocalIfOLinkAdapter which implements the TbRefIfacesSimpleLocalIf interface"));
		return nlohmann::json();
	}

	return nlohmann::json::object({

		{"intProperty", BackendService->GetIntProperty()}});
}
#endif // !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
