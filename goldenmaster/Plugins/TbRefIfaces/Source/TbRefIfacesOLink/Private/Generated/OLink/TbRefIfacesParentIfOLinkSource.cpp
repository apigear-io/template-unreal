/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbRefIfacesParentIfOLinkSource.h"
#include "HAL/Platform.h"
#include "OLinkCommon.h"
#if !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
#include "Async/Future.h"
#include "Async/Async.h"
#include "TbRefIfaces/Generated/api/TbRefIfaces.json.adapter.h"
#include "TbIfaceimport/Generated/api/TbIfaceimport.json.adapter.h"
#include "OLinkClientConnection.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
THIRD_PARTY_INCLUDES_START
#include "olink/iobjectsource.h"
THIRD_PARTY_INCLUDES_END

using namespace ApiGear::ObjectLink;

namespace
{
static const std::string TbRefIfacesParentIfIdentifier{"tb.ref_ifaces.ParentIf"};
}

DEFINE_LOG_CATEGORY(LogTbRefIfacesParentIfOLinkSource);
TbRefIfacesParentIfOLinkSource::TbRefIfacesParentIfOLinkSource()
	: Host(nullptr)
{
}

void TbRefIfacesParentIfOLinkSource::setBackendService(TScriptInterface<ITbRefIfacesParentIfInterface> InService)
{
	// only set if interface is implemented
	if (InService.GetInterface() == nullptr)
	{
		UE_LOG(LogTbRefIfacesParentIfOLinkSource, Error, TEXT("Cannot set backend service - interface TbRefIfacesParentIf is not fully implemented"));
		return;
	}

	BackendService = InService;
}
void TbRefIfacesParentIfOLinkSource::OnLocalIfSignal(const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& Param)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "localIfSignal");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {Param};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void TbRefIfacesParentIfOLinkSource::OnLocalIfSignalList(const TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>& Param)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "localIfSignalList");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {Param};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void TbRefIfacesParentIfOLinkSource::OnImportedIfSignal(const TScriptInterface<ITbIfaceimportEmptyIfInterface>& Param)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "importedIfSignal");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {Param};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void TbRefIfacesParentIfOLinkSource::OnImportedIfSignalList(const TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>& Param)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "importedIfSignalList");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {Param};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void TbRefIfacesParentIfOLinkSource::OnLocalIfChanged(const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& InLocalIf)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "localIf");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InLocalIf);
		}
	}
}

void TbRefIfacesParentIfOLinkSource::OnLocalIfListChanged(const TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>& InLocalIfList)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "localIfList");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InLocalIfList);
		}
	}
}

void TbRefIfacesParentIfOLinkSource::OnImportedIfChanged(const TScriptInterface<ITbIfaceimportEmptyIfInterface>& InImportedIf)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "importedIf");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InImportedIf);
		}
	}
}

void TbRefIfacesParentIfOLinkSource::OnImportedIfListChanged(const TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>& InImportedIfList)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "importedIfList");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InImportedIfList);
		}
	}
}

void TbRefIfacesParentIfOLinkSource::setOLinkHost(TSoftObjectPtr<UOLinkHost> InHost)
{
	Host = InHost.Get();
}

//
// IObjectSource interface
//

std::string TbRefIfacesParentIfOLinkSource::olinkObjectName()
{
	return TbRefIfacesParentIfIdentifier;
}

nlohmann::json TbRefIfacesParentIfOLinkSource::olinkInvoke(const std::string& methodId, const nlohmann::json& args)
{
	if (!BackendService)
	{
		UE_LOG(LogTbRefIfacesParentIfOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter TbRefIfacesParentIfOLinkAdapter which implements the TbRefIfacesParentIf interface"));
		return nlohmann::json();
	}

	const std::string path = Name::getMemberName(methodId);
	if (path == "localIfMethod")
	{
		TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> Param = args.at(0).get<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>();
		TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> result = BackendService->LocalIfMethod(Param);
		return result;
	}
	if (path == "localIfMethodList")
	{
		TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>> Param = args.at(0).get<TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>>();
		TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>> result = BackendService->LocalIfMethodList(Param);
		return result;
	}
	if (path == "importedIfMethod")
	{
		TScriptInterface<ITbIfaceimportEmptyIfInterface> Param = args.at(0).get<TScriptInterface<ITbIfaceimportEmptyIfInterface>>();
		TScriptInterface<ITbIfaceimportEmptyIfInterface> result = BackendService->ImportedIfMethod(Param);
		return result;
	}
	if (path == "importedIfMethodList")
	{
		TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>> Param = args.at(0).get<TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>>();
		TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>> result = BackendService->ImportedIfMethodList(Param);
		return result;
	}
	return nlohmann::json();
}

void TbRefIfacesParentIfOLinkSource::olinkSetProperty(const std::string& propertyId, const nlohmann::json& value)
{
	if (!BackendService)
	{
		UE_LOG(LogTbRefIfacesParentIfOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter TbRefIfacesParentIfOLinkAdapter which implements the TbRefIfacesParentIf interface"));
		return;
	}

	const std::string path = Name::getMemberName(propertyId);
	if (path == "localIf")
	{
		TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> LocalIf = value.get<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>();
		BackendService->SetLocalIf(LocalIf);
	}
	if (path == "localIfList")
	{
		TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>> LocalIfList = value.get<TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>>();
		BackendService->SetLocalIfList(LocalIfList);
	}
	if (path == "importedIf")
	{
		TScriptInterface<ITbIfaceimportEmptyIfInterface> ImportedIf = value.get<TScriptInterface<ITbIfaceimportEmptyIfInterface>>();
		BackendService->SetImportedIf(ImportedIf);
	}
	if (path == "importedIfList")
	{
		TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>> ImportedIfList = value.get<TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>>();
		BackendService->SetImportedIfList(ImportedIfList);
	}
}

nlohmann::json TbRefIfacesParentIfOLinkSource::olinkCollectProperties()
{
	if (!BackendService)
	{
		UE_LOG(LogTbRefIfacesParentIfOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter TbRefIfacesParentIfOLinkAdapter which implements the TbRefIfacesParentIf interface"));
		return nlohmann::json();
	}

	return nlohmann::json::object({

		{"localIf", BackendService->GetLocalIf()},
		{"localIfList", BackendService->GetLocalIfList()},
		{"importedIf", BackendService->GetImportedIf()},
		{"importedIfList", BackendService->GetImportedIfList()}});
}
#endif // !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
