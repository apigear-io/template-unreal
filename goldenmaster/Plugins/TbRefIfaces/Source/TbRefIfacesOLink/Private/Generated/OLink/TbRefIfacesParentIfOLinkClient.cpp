/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbRefIfaces/Generated/OLink/TbRefIfacesParentIfOLinkClient.h"
#include "ApiGearSettings.h"
#include "ApiGearOLink.h"
#include "Async/Async.h"
#include "TbRefIfaces/Generated/api/TbRefIfaces.json.adapter.h"
#include "TbIfaceimport/Generated/api/TbIfaceimport.json.adapter.h"
#include "OLinkClientConnection.h"
#include "OLinkSink.h"
#include "Engine/Engine.h"
#include "ApiGear/Public/ApiGearConnectionsStore.h"
#include "Misc/DateTime.h"
#include "TbRefIfacesSettings.h"
THIRD_PARTY_INCLUDES_START
#include "olink/clientnode.h"
#include "olink/iobjectsink.h"
THIRD_PARTY_INCLUDES_END
#include "HAL/CriticalSection.h"

/**
   \brief data structure to hold the last sent property values
*/
struct TbRefIfacesParentIfPropertiesData
{
	FCriticalSection LocalIfMutex;
	TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> LocalIf{TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>()};
	FCriticalSection ImportedIfMutex;
	TScriptInterface<ITbIfaceimportEmptyIfInterface> ImportedIf{TScriptInterface<ITbIfaceimportEmptyIfInterface>()};
};
DEFINE_LOG_CATEGORY(LogTbRefIfacesParentIfOLinkClient);

UTbRefIfacesParentIfOLinkClient::UTbRefIfacesParentIfOLinkClient()
	: UAbstractTbRefIfacesParentIf()
	, _SentData(MakePimpl<TbRefIfacesParentIfPropertiesData>())
{
	m_sink = std::make_shared<FOLinkSink>("tb.ref_ifaces.ParentIf");
}

UTbRefIfacesParentIfOLinkClient::UTbRefIfacesParentIfOLinkClient(FVTableHelper& Helper)
	: Super(Helper)
{
}
UTbRefIfacesParentIfOLinkClient::~UTbRefIfacesParentIfOLinkClient() = default;

void UTbRefIfacesParentIfOLinkClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	m_sink->setOnInitCallback([this]()
		{
		_SubscriptionStatusChanged.Broadcast(true);
		_SubscriptionStatusChangedBP.Broadcast(true);
	});
	m_sink->setOnReleaseCallback([this]()
		{
		_SubscriptionStatusChanged.Broadcast(false);
		_SubscriptionStatusChangedBP.Broadcast(false);
	});

	FOLinkSink::FPropertyChangedFunc PropertyChangedFunc = [this](const nlohmann::json& props)
	{
		this->applyState(props);
	};
	m_sink->setOnPropertyChangedCallback(PropertyChangedFunc);

	FOLinkSink::FSignalEmittedFunc SignalEmittedFunc = [this](const std::string& signalName, const nlohmann::json& args)
	{
		this->emitSignal(signalName, args);
	};
	m_sink->setOnSignalEmittedCallback(SignalEmittedFunc);

	check(GEngine);
	UTbRefIfacesSettings* settings = GetMutableDefault<UTbRefIfacesSettings>();

	UApiGearConnectionsStore* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionsStore>();

	TScriptInterface<IApiGearConnection> OLinkConnection = AGCM->GetConnection(settings->OLinkConnectionIdentifier);

	if (!OLinkConnection.GetInterface())
	{
		return;
	}
	UseConnection(OLinkConnection);
	OLinkConnection->Connect();
}

void UTbRefIfacesParentIfOLinkClient::Deinitialize()
{
	// tell the sink that we are gone and should not try to be invoked
	m_sink->resetOnPropertyChangedCallback();
	m_sink->resetOnSignalEmittedCallback();
	m_sink->resetOnInitCallback();
	m_sink->resetOnReleaseCallback();

	if (Connection.GetObject())
	{
		UOLinkClientConnection* UnrealOLinkConnection = Cast<UOLinkClientConnection>(Connection.GetObject());
		UnrealOLinkConnection->unlinkObjectSource(m_sink->olinkObjectName());
		UnrealOLinkConnection->node()->registry().removeSink(m_sink->olinkObjectName());
	}

	Super::Deinitialize();
}

void UTbRefIfacesParentIfOLinkClient::UseConnection(TScriptInterface<IApiGearConnection> InConnection)
{
	if (!InConnection.GetInterface())
	{
		UE_LOG(LogTbRefIfacesParentIfOLinkClient, Error, TEXT("The olink connection for the %s client does not implement the connection interface."), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only accept connections of type olink
	checkf(InConnection->GetConnectionProtocolIdentifier() == ApiGearOLinkProtocolIdentifier, TEXT("Cannot use connection - must be of type olink"));

	UOLinkClientConnection* UnrealOLinkConnection = nullptr;
	// remove old connection
	if (Connection.GetObject())
	{
		UnrealOLinkConnection = Cast<UOLinkClientConnection>(Connection.GetObject());
		UnrealOLinkConnection->unlinkObjectSource(m_sink->olinkObjectName());
		UnrealOLinkConnection->node()->registry().removeSink(m_sink->olinkObjectName());
		UnrealOLinkConnection = nullptr;
	}

	// set up new connection
	UnrealOLinkConnection = Cast<UOLinkClientConnection>(InConnection.GetObject());
	UnrealOLinkConnection->node()->registry().addSink(m_sink);
	UnrealOLinkConnection->linkObjectSource(m_sink->olinkObjectName());

	Connection = InConnection;
}

TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> UTbRefIfacesParentIfOLinkClient::GetLocalIf() const
{
	return LocalIf;
}

void UTbRefIfacesParentIfOLinkClient::SetLocalIf(const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& InLocalIf)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTbRefIfacesParentIfOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear TbRefIfaces plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetLocalIf() == InLocalIf)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->LocalIfMutex));
		if (_SentData->LocalIf == InLocalIf)
		{
			return;
		}
	}
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "localIf");
	m_sink->GetNode()->setRemoteProperty(memberId, InLocalIf);
	FScopeLock Lock(&(_SentData->LocalIfMutex));
	_SentData->LocalIf = InLocalIf;
}

TScriptInterface<ITbIfaceimportEmptyIfInterface> UTbRefIfacesParentIfOLinkClient::GetImportedIf() const
{
	return ImportedIf;
}

void UTbRefIfacesParentIfOLinkClient::SetImportedIf(const TScriptInterface<ITbIfaceimportEmptyIfInterface>& InImportedIf)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTbRefIfacesParentIfOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear TbRefIfaces plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetImportedIf() == InImportedIf)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->ImportedIfMutex));
		if (_SentData->ImportedIf == InImportedIf)
		{
			return;
		}
	}
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "importedIf");
	m_sink->GetNode()->setRemoteProperty(memberId, InImportedIf);
	FScopeLock Lock(&(_SentData->ImportedIfMutex));
	_SentData->ImportedIf = InImportedIf;
}

TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> UTbRefIfacesParentIfOLinkClient::LocalIfMethod(const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& Param)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTbRefIfacesParentIfOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear TbRefIfaces plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));

		return TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>();
	}
	TPromise<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>> Promise;
	Async(EAsyncExecution::ThreadPool,
		[Param, &Promise, this]()
		{
		ApiGear::ObjectLink::InvokeReplyFunc GetParentIfStateFunc = [&Promise](ApiGear::ObjectLink::InvokeReplyArg arg)
		{
			Promise.SetValue(arg.value.get<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>());
		};
		static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "localIfMethod");
		m_sink->GetNode()->invokeRemote(memberId, {Param}, GetParentIfStateFunc);
	});

	return Promise.GetFuture().Get();
}

TScriptInterface<ITbIfaceimportEmptyIfInterface> UTbRefIfacesParentIfOLinkClient::ImportedIfMethod(const TScriptInterface<ITbIfaceimportEmptyIfInterface>& Param)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTbRefIfacesParentIfOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear TbRefIfaces plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));

		return TScriptInterface<ITbIfaceimportEmptyIfInterface>();
	}
	TPromise<TScriptInterface<ITbIfaceimportEmptyIfInterface>> Promise;
	Async(EAsyncExecution::ThreadPool,
		[Param, &Promise, this]()
		{
		ApiGear::ObjectLink::InvokeReplyFunc GetParentIfStateFunc = [&Promise](ApiGear::ObjectLink::InvokeReplyArg arg)
		{
			Promise.SetValue(arg.value.get<TScriptInterface<ITbIfaceimportEmptyIfInterface>>());
		};
		static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "importedIfMethod");
		m_sink->GetNode()->invokeRemote(memberId, {Param}, GetParentIfStateFunc);
	});

	return Promise.GetFuture().Get();
}

bool UTbRefIfacesParentIfOLinkClient::_IsSubscribed() const
{
	return m_sink->IsReady();
}

void UTbRefIfacesParentIfOLinkClient::applyState(const nlohmann::json& fields)
{
	const bool bLocalIfChanged = fields.contains("localIf") && (LocalIf != fields["localIf"].get<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>());
	if (bLocalIfChanged)
	{
		LocalIf = fields["localIf"].get<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>();
		// reset sent data to the current state
		{
			FScopeLock Lock(&(_SentData->LocalIfMutex));
			_SentData->LocalIf = LocalIf;
		}
		_GetSignals()->BroadcastLocalIfChanged(LocalIf);
	}

	const bool bImportedIfChanged = fields.contains("importedIf") && (ImportedIf != fields["importedIf"].get<TScriptInterface<ITbIfaceimportEmptyIfInterface>>());
	if (bImportedIfChanged)
	{
		ImportedIf = fields["importedIf"].get<TScriptInterface<ITbIfaceimportEmptyIfInterface>>();
		// reset sent data to the current state
		{
			FScopeLock Lock(&(_SentData->ImportedIfMutex));
			_SentData->ImportedIf = ImportedIf;
		}
		_GetSignals()->BroadcastImportedIfChanged(ImportedIf);
	}
}

void UTbRefIfacesParentIfOLinkClient::emitSignal(const std::string& signalName, const nlohmann::json& args)
{
	if (signalName == "localIfSignal")
	{
		const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& outParam = args[0].get<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>();
		_GetSignals()->BroadcastLocalIfSignalSignal(outParam);
		return;
	}

	if (signalName == "importedIfSignal")
	{
		const TScriptInterface<ITbIfaceimportEmptyIfInterface>& outParam = args[0].get<TScriptInterface<ITbIfaceimportEmptyIfInterface>>();
		_GetSignals()->BroadcastImportedIfSignalSignal(outParam);
		return;
	}
}
