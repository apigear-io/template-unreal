/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbRefIfaces/Generated/MsgBus/TbRefIfacesSimpleLocalIfMsgBusAdapter.h"
#include "TbRefIfaces/Generated/MsgBus/TbRefIfacesSimpleLocalIfMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
#include "TbRefIfacesSettings.h"

DEFINE_LOG_CATEGORY(LogTbRefIfacesSimpleLocalIfMsgBusAdapter);
UTbRefIfacesSimpleLocalIfMsgBusAdapter::UTbRefIfacesSimpleLocalIfMsgBusAdapter()
{
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTickerHandle.IsValid())
	{
		UTbRefIfacesSettings* settings = GetMutableDefault<UTbRefIfacesSettings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefIfacesSimpleLocalIfMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#else
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefIfacesSimpleLocalIfMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if (TbRefIfacesSimpleLocalIfMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	TbRefIfacesSimpleLocalIfMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbRefIfaces/SimpleLocalIf/Service")
		.Handling<FTbRefIfacesSimpleLocalIfDiscoveryMessage>(this, &UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnDiscoveryMessage)
		.Handling<FTbRefIfacesSimpleLocalIfServiceAnnouncementReplyMessage>(this, &UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnServiceAnnouncementMessage)
		.Handling<FTbRefIfacesSimpleLocalIfPingMessage>(this, &UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnPing)
		.Handling<FTbRefIfacesSimpleLocalIfClientDisconnectMessage>(this, &UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnClientDisconnected)
		.Handling<FTbRefIfacesSimpleLocalIfSetIntPropertyRequestMessage>(this, &UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnSetIntPropertyRequest)
		.Handling<FTbRefIfacesSimpleLocalIfIntMethodRequestMessage>(this, &UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnIntMethodRequest)
		.Build();
	// clang-format on

	if (TbRefIfacesSimpleLocalIfMsgBusEndpoint.IsValid())
	{
		TbRefIfacesSimpleLocalIfMsgBusEndpoint->Subscribe<FTbRefIfacesSimpleLocalIfDiscoveryMessage>();
		TbRefIfacesSimpleLocalIfMsgBusEndpoint->Subscribe<FTbRefIfacesSimpleLocalIfServiceAnnouncementReplyMessage>();
	}

	_AnnounceService();
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::_AnnounceService()
{
	if (!TbRefIfacesSimpleLocalIfMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTbRefIfacesSimpleLocalIfDiscoveryMessage();
	msg->Type = ETbRefIfacesSimpleLocalIfDiscoveryMessageType::ServiceAnnouncement;
	TbRefIfacesSimpleLocalIfMsgBusEndpoint->Publish<FTbRefIfacesSimpleLocalIfDiscoveryMessage>(msg);
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTickerHandle.IsValid())
	{
#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif
	}

	auto msg = new FTbRefIfacesSimpleLocalIfServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (TbRefIfacesSimpleLocalIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefIfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefIfacesSimpleLocalIfServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbRefIfacesSimpleLocalIfMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTbRefIfacesSimpleLocalIfMsgBusAdapter::_IsListening() const
{
	return TbRefIfacesSimpleLocalIfMsgBusEndpoint.IsValid();
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::_setBackendService(TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbRefIfacesSimpleLocalIfPublisher* BackendPublisher = BackendService->_GetPublisher();
		checkf(BackendPublisher, TEXT("Cannot unsubscribe from delegates from backend service TbRefIfacesSimpleLocalIf"));
		if (OnIntPropertyChangedHandle.IsValid())
		{
			BackendPublisher->OnIntPropertyChanged.Remove(OnIntPropertyChangedHandle);
			OnIntPropertyChangedHandle.Reset();
		}
		if (OnIntSignalSignalHandle.IsValid())
		{
			BackendPublisher->OnIntSignalSignal.Remove(OnIntSignalSignalHandle);
			OnIntSignalSignalHandle.Reset();
		}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbRefIfacesSimpleLocalIf is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbRefIfacesSimpleLocalIfPublisher* BackendPublisher = BackendService->_GetPublisher();
	checkf(BackendPublisher, TEXT("Cannot subscribe to delegates from backend service TbRefIfacesSimpleLocalIf"));
	// connect property changed signals or simple events
	OnIntPropertyChangedHandle = BackendPublisher->OnIntPropertyChanged.AddUObject(this, &UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnIntPropertyChanged);
	OnIntSignalSignalHandle = BackendPublisher->OnIntSignalSignal.AddUObject(this, &UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnIntSignal);
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnDiscoveryMessage(const FTbRefIfacesSimpleLocalIfDiscoveryMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	switch (InMessage.Type)
	{
	case ETbRefIfacesSimpleLocalIfDiscoveryMessageType::ServiceAnnouncement:
		HandleServiceAnnouncement(Context);
		break;
	case ETbRefIfacesSimpleLocalIfDiscoveryMessageType::ConnectionRequest:
	default:
		HandleClientConnectionRequest(Context);
		break;
	}
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::HandleClientConnectionRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTbRefIfacesSimpleLocalIfInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;
	msg->IntProperty = BackendService->GetIntProperty();

	if (TbRefIfacesSimpleLocalIfMsgBusEndpoint.IsValid())
	{
		TbRefIfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefIfacesSimpleLocalIfInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::HandleServiceAnnouncement(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	// send service announcement
	auto msg = new FTbRefIfacesSimpleLocalIfServiceAnnouncementReplyMessage();

	if (TbRefIfacesSimpleLocalIfMsgBusEndpoint.IsValid())
	{
		TbRefIfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefIfacesSimpleLocalIfServiceAnnouncementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnServiceAnnouncementMessage(const FTbRefIfacesSimpleLocalIfServiceAnnouncementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (TbRefIfacesSimpleLocalIfMsgBusEndpoint->GetAddress() == Context->GetSender())
	{
		return;
	}
	UE_LOG(LogTbRefIfacesSimpleLocalIfMsgBusAdapter, Error, TEXT("Service announcement from existing endpoint(%s) received, we should stop listening."), *Context->GetSender().ToString());
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnPing(const FTbRefIfacesSimpleLocalIfPingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbRefIfacesSimpleLocalIfPongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (TbRefIfacesSimpleLocalIfMsgBusEndpoint.IsValid())
	{
		TbRefIfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefIfacesSimpleLocalIfPongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnClientDisconnected(const FTbRefIfacesSimpleLocalIfClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

bool UTbRefIfacesSimpleLocalIfMsgBusAdapter::_CheckClientTimeoutsTick(float /*DeltaTime*/)
{
	_CheckClientTimeouts();
	return true;
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnIntMethodRequest(const FTbRefIfacesSimpleLocalIfIntMethodRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbRefIfacesSimpleLocalIfIntMethodReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->IntMethod(InMessage.Param);

	if (TbRefIfacesSimpleLocalIfMsgBusEndpoint.IsValid())
	{
		TbRefIfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefIfacesSimpleLocalIfIntMethodReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnIntSignal(int32 InParam)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbRefIfacesSimpleLocalIfIntSignalSignalMessage();
	msg->Param = InParam;
	if (TbRefIfacesSimpleLocalIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefIfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefIfacesSimpleLocalIfIntSignalSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnSetIntPropertyRequest(const FTbRefIfacesSimpleLocalIfSetIntPropertyRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetIntProperty(InMessage.IntProperty);
}

void UTbRefIfacesSimpleLocalIfMsgBusAdapter::OnIntPropertyChanged(int32 InIntProperty)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbRefIfacesSimpleLocalIfIntPropertyChangedMessage();
	msg->IntProperty = InIntProperty;

	if (TbRefIfacesSimpleLocalIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefIfacesSimpleLocalIfMsgBusEndpoint->Send<FTbRefIfacesSimpleLocalIfIntPropertyChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
