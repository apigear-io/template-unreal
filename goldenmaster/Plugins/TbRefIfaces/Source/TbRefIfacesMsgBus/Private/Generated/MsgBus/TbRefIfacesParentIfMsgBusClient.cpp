/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbRefIfaces/Generated/MsgBus/TbRefIfacesParentIfMsgBusClient.h"
#include "TbRefIfaces/Generated/MsgBus/TbRefIfacesParentIfMsgBusMessages.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "Misc/DateTime.h"
#include "GenericPlatform/GenericPlatformMath.h"
#include "GenericPlatform/GenericPlatformTime.h"
#include "MessageEndpointBuilder.h"
#include "MessageEndpoint.h"
#include "TbRefIfacesSettings.h"
#include "HAL/CriticalSection.h"

/**
   \brief data structure to hold the last sent property values
*/
struct TbRefIfacesParentIfPropertiesMsgBusData
{
	FCriticalSection LocalIfMutex;
	TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> LocalIf{TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>()};
	FCriticalSection ImportedIfMutex;
	TScriptInterface<ITbIfaceimportEmptyIfInterface> ImportedIf{TScriptInterface<ITbIfaceimportEmptyIfInterface>()};
};
DEFINE_LOG_CATEGORY(LogTbRefIfacesParentIfMsgBusClient);

UTbRefIfacesParentIfMsgBusClient::UTbRefIfacesParentIfMsgBusClient()
	: UAbstractTbRefIfacesParentIf()
	, _SentData(MakePimpl<TbRefIfacesParentIfPropertiesMsgBusData>())
{
	PingRTTBuffer.SetNumZeroed(PING_RTT_BUFFER_SIZE);
}

UTbRefIfacesParentIfMsgBusClient::~UTbRefIfacesParentIfMsgBusClient() = default;

void UTbRefIfacesParentIfMsgBusClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbRefIfacesParentIfMsgBusClient::Deinitialize()
{
	_Disconnect();

	Super::Deinitialize();
}

void UTbRefIfacesParentIfMsgBusClient::_Connect()
{
	if (_IsConnected())
	{
		UE_LOG(LogTbRefIfacesParentIfMsgBusClient, Log, TEXT("Already connected, cannot connect again."));
		return;
	}

	if (!_HeartbeatTickerHandle.IsValid())
	{
		UTbRefIfacesSettings* settings = GetMutableDefault<UTbRefIfacesSettings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefIfacesParentIfMsgBusClient::_OnHeartbeatTick), _HeartbeatIntervalMS / 1000.0f);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefIfacesParentIfMsgBusClient::_OnHeartbeatTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if (TbRefIfacesParentIfMsgBusEndpoint.IsValid() && !ServiceAddress.IsValid())
	{
		_DiscoverService();
		return;
	}

	// clang-format off
	TbRefIfacesParentIfMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbRefIfaces/ParentIf/Client")
		.Handling<FTbRefIfacesParentIfInitMessage>(this, &UTbRefIfacesParentIfMsgBusClient::OnConnectionInit)
		.Handling<FTbRefIfacesParentIfPongMessage>(this, &UTbRefIfacesParentIfMsgBusClient::OnPong)
		.Handling<FTbRefIfacesParentIfServiceDisconnectMessage>(this, &UTbRefIfacesParentIfMsgBusClient::OnServiceClosedConnection)
		.Handling<FTbRefIfacesParentIfLocalIfSignalSignalMessage>(this, &UTbRefIfacesParentIfMsgBusClient::OnLocalIfSignal)
		.Handling<FTbRefIfacesParentIfImportedIfSignalSignalMessage>(this, &UTbRefIfacesParentIfMsgBusClient::OnImportedIfSignal)
		.Handling<FTbRefIfacesParentIfLocalIfChangedMessage>(this, &UTbRefIfacesParentIfMsgBusClient::OnLocalIfChanged)
		.Handling<FTbRefIfacesParentIfImportedIfChangedMessage>(this, &UTbRefIfacesParentIfMsgBusClient::OnImportedIfChanged)
		.Handling<FTbRefIfacesParentIfLocalIfMethodReplyMessage>(this, &UTbRefIfacesParentIfMsgBusClient::OnLocalIfMethodReply)
		.Handling<FTbRefIfacesParentIfImportedIfMethodReplyMessage>(this, &UTbRefIfacesParentIfMsgBusClient::OnImportedIfMethodReply)
		.Build();
	// clang-format on

	_DiscoverService();
}

void UTbRefIfacesParentIfMsgBusClient::_Disconnect()
{
	_LastHbTimestamp = 0.0f;

#if (ENGINE_MAJOR_VERSION < 5)
	FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
	FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif

	if (!_IsConnected())
	{
		return;
	}

	auto msg = new FTbRefIfacesParentIfClientDisconnectMessage();

	TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfClientDisconnectMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	TbRefIfacesParentIfMsgBusEndpoint.Reset();
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
	_ConnectionStatusChangedBP.Broadcast(false);
}

void UTbRefIfacesParentIfMsgBusClient::_DiscoverService()
{
	if (!TbRefIfacesParentIfMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTbRefIfacesParentIfDiscoveryMessage();
	TbRefIfacesParentIfMsgBusEndpoint->Publish<FTbRefIfacesParentIfDiscoveryMessage>(msg);
}

bool UTbRefIfacesParentIfMsgBusClient::_IsConnected() const
{
	return TbRefIfacesParentIfMsgBusEndpoint.IsValid() && ServiceAddress.IsValid();
}

void UTbRefIfacesParentIfMsgBusClient::OnConnectionInit(const FTbRefIfacesParentIfInitMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress.IsValid())
	{
		UE_LOG(LogTbRefIfacesParentIfMsgBusClient, Warning,
			TEXT("Got a second init message. It usually means that there are several instances of the same service on the network.")
				TEXT(" This can cause connection mixups. Please make sure that there is only one instance of the service running on the network."));
		return;
	}

	ServiceAddress = Context->GetSender();
	// reset ping stats for a new connection
	PingRTTBuffer.Empty();
	PingRTTBuffer.SetNumZeroed(PING_RTT_BUFFER_SIZE);
	CurrentPingCounter = 0;
	Stats.CurrentRTT_MS = 0.0f;
	Stats.AverageRTT_MS = 0.0f;
	Stats.MaxRTT_MS = 0.0f;
	Stats.MinRTT_MS = 10000.0f;

	const bool b_ClientPingIntervalMSChanged = InMessage._ClientPingIntervalMS != _HeartbeatIntervalMS;
	if (b_ClientPingIntervalMSChanged)
	{
		_HeartbeatIntervalMS = InMessage._ClientPingIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefIfacesParentIfMsgBusClient::_OnHeartbeatTick), _HeartbeatIntervalMS / 1000.0f);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefIfacesParentIfMsgBusClient::_OnHeartbeatTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}
	const bool bLocalIfChanged = InMessage.LocalIf != LocalIf;
	if (bLocalIfChanged)
	{
		LocalIf = InMessage.LocalIf;
		// reset sent data to the current state
		{
			FScopeLock Lock(&(_SentData->LocalIfMutex));
			_SentData->LocalIf = LocalIf;
		}
		_GetSignals()->BroadcastLocalIfChanged(LocalIf);
	}

	const bool bImportedIfChanged = InMessage.ImportedIf != ImportedIf;
	if (bImportedIfChanged)
	{
		ImportedIf = InMessage.ImportedIf;
		// reset sent data to the current state
		{
			FScopeLock Lock(&(_SentData->ImportedIfMutex));
			_SentData->ImportedIf = ImportedIf;
		}
		_GetSignals()->BroadcastImportedIfChanged(ImportedIf);
	}

	_ConnectionStatusChanged.Broadcast(true);
	_ConnectionStatusChangedBP.Broadcast(true);
}

bool UTbRefIfacesParentIfMsgBusClient::_OnHeartbeatTick(float /*DeltaTime*/)
{
	_OnHeartbeat();
	return true;
}

void UTbRefIfacesParentIfMsgBusClient::_OnHeartbeat()
{
	if (_LastHbTimestamp > 0.1)
	{
		const double DeltaMS = (FPlatformTime::Seconds() - _LastHbTimestamp) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			ServiceAddress.Invalidate();
			_LastHbTimestamp = 0.0;
			_ConnectionStatusChanged.Broadcast(false);
		}
	}

	if (!_IsConnected())
	{
		// only log warning message once a second
		if (FPlatformTime::Seconds() - _LastConnectionWarningTimestamp > 1.0)
		{
			UE_LOG(LogTbRefIfacesParentIfMsgBusClient, Warning, TEXT("Heartbeat failed. Client has no connection to service. Reconnecting ..."));
			_LastConnectionWarningTimestamp = FPlatformTime::Seconds();
		}

		_Connect();
		return;
	}

	auto msg = new FTbRefIfacesParentIfPingMessage();
	msg->Timestamp = FPlatformTime::Seconds();

	TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfPingMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
}

float UTbRefIfacesParentIfMsgBusClient::_CalculateAverageRTT() const
{
	if (CurrentPingCounter == 0)
	{
		return 0.0f;
	}

	float TotalRTT = 0.0f;

	for (const float& RTT : PingRTTBuffer)
	{
		TotalRTT += RTT;
	}

	return CurrentPingCounter > 0 ? TotalRTT / CurrentPingCounter : 0.0f;
}

void UTbRefIfacesParentIfMsgBusClient::OnPong(const FTbRefIfacesParentIfPongMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	_LastHbTimestamp = InMessage.Timestamp;

	const double Current = FPlatformTime::Seconds();
	const double DeltaMS = (Current - InMessage.Timestamp) * 1000.0f;

	Stats.CurrentRTT_MS = DeltaMS;
	if (CurrentPingCounter < PING_RTT_BUFFER_SIZE)
	{
		CurrentPingCounter++;
	}
	PingRTTBuffer.RemoveAt(0);
	PingRTTBuffer.Add(Stats.CurrentRTT_MS);
	Stats.AverageRTT_MS = _CalculateAverageRTT();
	Stats.MaxRTT_MS = FGenericPlatformMath::Max(Stats.MaxRTT_MS, Stats.CurrentRTT_MS);
	Stats.MinRTT_MS = FGenericPlatformMath::Min(Stats.MinRTT_MS, Stats.CurrentRTT_MS);

	_StatsUpdated.Broadcast(Stats);
}

const FTbRefIfacesParentIfStats& UTbRefIfacesParentIfMsgBusClient::_GetStats() const
{
	return Stats;
}

void UTbRefIfacesParentIfMsgBusClient::OnServiceClosedConnection(const FTbRefIfacesParentIfServiceDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		return;
	}

	_LastHbTimestamp = 0.0;
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
	_ConnectionStatusChangedBP.Broadcast(false);
}

TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> UTbRefIfacesParentIfMsgBusClient::GetLocalIf() const
{
	return LocalIf;
}

void UTbRefIfacesParentIfMsgBusClient::SetLocalIf(const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& InLocalIf)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbRefIfacesParentIfMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetLocalIf() == InLocalIf)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->LocalIfMutex));
		if (_SentData->LocalIf == InLocalIf)
		{
			return;
		}
	}

	auto msg = new FTbRefIfacesParentIfSetLocalIfRequestMessage();
	msg->LocalIf = InLocalIf;

	TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfSetLocalIfRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	FScopeLock Lock(&(_SentData->LocalIfMutex));
	_SentData->LocalIf = InLocalIf;
}

TScriptInterface<ITbIfaceimportEmptyIfInterface> UTbRefIfacesParentIfMsgBusClient::GetImportedIf() const
{
	return ImportedIf;
}

void UTbRefIfacesParentIfMsgBusClient::SetImportedIf(const TScriptInterface<ITbIfaceimportEmptyIfInterface>& InImportedIf)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbRefIfacesParentIfMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetImportedIf() == InImportedIf)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->ImportedIfMutex));
		if (_SentData->ImportedIf == InImportedIf)
		{
			return;
		}
	}

	auto msg = new FTbRefIfacesParentIfSetImportedIfRequestMessage();
	msg->ImportedIf = InImportedIf;

	TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfSetImportedIfRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	FScopeLock Lock(&(_SentData->ImportedIfMutex));
	_SentData->ImportedIf = InImportedIf;
}

TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> UTbRefIfacesParentIfMsgBusClient::LocalIfMethod(const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& InParam)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbRefIfacesParentIfMsgBusClient, Error, TEXT("Client has no connection to service."));

		return TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>();
	}

	auto msg = new FTbRefIfacesParentIfLocalIfMethodRequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->Param = InParam;
	TPromise<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>> Promise;
	StorePromise(msg->ResponseId, Promise);

	TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfLocalIfMethodRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UTbRefIfacesParentIfMsgBusClient::OnLocalIfMethodReply(const FTbRefIfacesParentIfLocalIfMethodReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

TScriptInterface<ITbIfaceimportEmptyIfInterface> UTbRefIfacesParentIfMsgBusClient::ImportedIfMethod(const TScriptInterface<ITbIfaceimportEmptyIfInterface>& InParam)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbRefIfacesParentIfMsgBusClient, Error, TEXT("Client has no connection to service."));

		return TScriptInterface<ITbIfaceimportEmptyIfInterface>();
	}

	auto msg = new FTbRefIfacesParentIfImportedIfMethodRequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->Param = InParam;
	TPromise<TScriptInterface<ITbIfaceimportEmptyIfInterface>> Promise;
	StorePromise(msg->ResponseId, Promise);

	TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfImportedIfMethodRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UTbRefIfacesParentIfMsgBusClient::OnImportedIfMethodReply(const FTbRefIfacesParentIfImportedIfMethodReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

void UTbRefIfacesParentIfMsgBusClient::OnLocalIfSignal(const FTbRefIfacesParentIfLocalIfSignalSignalMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbRefIfacesParentIfMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	_GetSignals()->BroadcastLocalIfSignalSignal(InMessage.Param);
	return;
}

void UTbRefIfacesParentIfMsgBusClient::OnImportedIfSignal(const FTbRefIfacesParentIfImportedIfSignalSignalMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbRefIfacesParentIfMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	_GetSignals()->BroadcastImportedIfSignalSignal(InMessage.Param);
	return;
}

void UTbRefIfacesParentIfMsgBusClient::OnLocalIfChanged(const FTbRefIfacesParentIfLocalIfChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbRefIfacesParentIfMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bLocalIfChanged = InMessage.LocalIf != LocalIf;
	if (bLocalIfChanged)
	{
		LocalIf = InMessage.LocalIf;
		// reset sent data to the current state
		{
			FScopeLock Lock(&(_SentData->LocalIfMutex));
			_SentData->LocalIf = LocalIf;
		}
		_GetSignals()->BroadcastLocalIfChanged(LocalIf);
	}
}

void UTbRefIfacesParentIfMsgBusClient::OnImportedIfChanged(const FTbRefIfacesParentIfImportedIfChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbRefIfacesParentIfMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bImportedIfChanged = InMessage.ImportedIf != ImportedIf;
	if (bImportedIfChanged)
	{
		ImportedIf = InMessage.ImportedIf;
		// reset sent data to the current state
		{
			FScopeLock Lock(&(_SentData->ImportedIfMutex));
			_SentData->ImportedIf = ImportedIf;
		}
		_GetSignals()->BroadcastImportedIfChanged(ImportedIf);
	}
}

template <typename ResultType>
bool UTbRefIfacesParentIfMsgBusClient::StorePromise(const FGuid& Id, TPromise<ResultType>& Promise)
{
	FScopeLock Lock(&ReplyPromisesMapCS);
	return ReplyPromisesMap.Add(Id, &Promise) != nullptr;
}

template <typename ResultType>
bool UTbRefIfacesParentIfMsgBusClient::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
	TPromise<ResultType>* PromisePtr = nullptr;

	{
		FScopeLock Lock(&ReplyPromisesMapCS);
		if (auto** Found = ReplyPromisesMap.Find(Id))
		{
			PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
			ReplyPromisesMap.Remove(Id);
		}
	}

	if (PromisePtr)
	{
		PromisePtr->SetValue(Value);
		return true;
	}
	return false;
}

template bool UTbRefIfacesParentIfMsgBusClient::StorePromise<TScriptInterface<ITbIfaceimportEmptyIfInterface>>(const FGuid& Id, TPromise<TScriptInterface<ITbIfaceimportEmptyIfInterface>>& Promise);
template bool UTbRefIfacesParentIfMsgBusClient::FulfillPromise<TScriptInterface<ITbIfaceimportEmptyIfInterface>>(const FGuid& Id, const TScriptInterface<ITbIfaceimportEmptyIfInterface>& Value);
template bool UTbRefIfacesParentIfMsgBusClient::StorePromise<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>(const FGuid& Id, TPromise<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>& Promise);
template bool UTbRefIfacesParentIfMsgBusClient::FulfillPromise<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>(const FGuid& Id, const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& Value);
