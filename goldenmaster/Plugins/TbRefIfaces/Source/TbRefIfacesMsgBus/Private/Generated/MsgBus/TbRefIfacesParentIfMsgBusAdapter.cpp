/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbRefIfaces/Generated/MsgBus/TbRefIfacesParentIfMsgBusAdapter.h"
#include "TbRefIfaces/Generated/MsgBus/TbRefIfacesParentIfMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/World.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
#include "TbRefIfacesSettings.h"

DEFINE_LOG_CATEGORY(LogTbRefIfacesParentIfMsgBusAdapter);
UTbRefIfacesParentIfMsgBusAdapter::UTbRefIfacesParentIfMsgBusAdapter()
{
}

void UTbRefIfacesParentIfMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbRefIfacesParentIfMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTbRefIfacesParentIfMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTickerHandle.IsValid())
	{
		UTbRefIfacesSettings* settings = GetMutableDefault<UTbRefIfacesSettings>();
		check(settings);
		_HeartbeatIntervalMS = settings->MsgBusHeartbeatIntervalMS;

#if (ENGINE_MAJOR_VERSION < 5)
		_HeartbeatTickerHandle = FTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefIfacesParentIfMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#else
		_HeartbeatTickerHandle = FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateUObject(this, &UTbRefIfacesParentIfMsgBusAdapter::_CheckClientTimeoutsTick), _HeartbeatIntervalMS / 1000.0f);
#endif
	}

	if (TbRefIfacesParentIfMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	TbRefIfacesParentIfMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbRefIfaces/ParentIf/Service")
		.Handling<FTbRefIfacesParentIfDiscoveryMessage>(this, &UTbRefIfacesParentIfMsgBusAdapter::OnDiscoveryMessage)
		.Handling<FTbRefIfacesParentIfServiceAnnouncementReplyMessage>(this, &UTbRefIfacesParentIfMsgBusAdapter::OnServiceAnnouncementMessage)
		.Handling<FTbRefIfacesParentIfPingMessage>(this, &UTbRefIfacesParentIfMsgBusAdapter::OnPing)
		.Handling<FTbRefIfacesParentIfClientDisconnectMessage>(this, &UTbRefIfacesParentIfMsgBusAdapter::OnClientDisconnected)
		.Handling<FTbRefIfacesParentIfSetLocalIfRequestMessage>(this, &UTbRefIfacesParentIfMsgBusAdapter::OnSetLocalIfRequest)
		.Handling<FTbRefIfacesParentIfSetImportedIfRequestMessage>(this, &UTbRefIfacesParentIfMsgBusAdapter::OnSetImportedIfRequest)
		.Handling<FTbRefIfacesParentIfLocalIfMethodRequestMessage>(this, &UTbRefIfacesParentIfMsgBusAdapter::OnLocalIfMethodRequest)
		.Handling<FTbRefIfacesParentIfImportedIfMethodRequestMessage>(this, &UTbRefIfacesParentIfMsgBusAdapter::OnImportedIfMethodRequest)
		.Build();
	// clang-format on

	if (TbRefIfacesParentIfMsgBusEndpoint.IsValid())
	{
		TbRefIfacesParentIfMsgBusEndpoint->Subscribe<FTbRefIfacesParentIfDiscoveryMessage>();
		TbRefIfacesParentIfMsgBusEndpoint->Subscribe<FTbRefIfacesParentIfServiceAnnouncementReplyMessage>();
	}

	_AnnounceService();
}

void UTbRefIfacesParentIfMsgBusAdapter::_AnnounceService()
{
	if (!TbRefIfacesParentIfMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTbRefIfacesParentIfDiscoveryMessage();
	msg->Type = ETbRefIfacesParentIfDiscoveryMessageType::ServiceAnnouncement;
	TbRefIfacesParentIfMsgBusEndpoint->Publish<FTbRefIfacesParentIfDiscoveryMessage>(msg);
}

void UTbRefIfacesParentIfMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTickerHandle.IsValid())
	{
#if (ENGINE_MAJOR_VERSION < 5)
		FTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#else
		FTSTicker::GetCoreTicker().RemoveTicker(_HeartbeatTickerHandle);
#endif
	}

	auto msg = new FTbRefIfacesParentIfServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (TbRefIfacesParentIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbRefIfacesParentIfMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTbRefIfacesParentIfMsgBusAdapter::_IsListening() const
{
	return TbRefIfacesParentIfMsgBusEndpoint.IsValid();
}

void UTbRefIfacesParentIfMsgBusAdapter::_setBackendService(TScriptInterface<ITbRefIfacesParentIfInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbRefIfacesParentIfSignals* BackendSignals = BackendService->_GetSignals();
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service TbRefIfacesParentIf"));
		if (OnLocalIfChangedHandle.IsValid())
		{
			BackendSignals->OnLocalIfChanged.Remove(OnLocalIfChangedHandle);
			OnLocalIfChangedHandle.Reset();
		}
		if (OnImportedIfChangedHandle.IsValid())
		{
			BackendSignals->OnImportedIfChanged.Remove(OnImportedIfChangedHandle);
			OnImportedIfChangedHandle.Reset();
		}
		if (OnLocalIfSignalSignalHandle.IsValid())
		{
			BackendSignals->OnLocalIfSignalSignal.Remove(OnLocalIfSignalSignalHandle);
			OnLocalIfSignalSignalHandle.Reset();
		}
		if (OnImportedIfSignalSignalHandle.IsValid())
		{
			BackendSignals->OnImportedIfSignalSignal.Remove(OnImportedIfSignalSignalHandle);
			OnImportedIfSignalSignalHandle.Reset();
		}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbRefIfacesParentIf is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbRefIfacesParentIfSignals* BackendSignals = BackendService->_GetSignals();
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service TbRefIfacesParentIf"));
	// connect property changed signals or simple events
	OnLocalIfChangedHandle = BackendSignals->OnLocalIfChanged.AddUObject(this, &UTbRefIfacesParentIfMsgBusAdapter::OnLocalIfChanged);
	OnImportedIfChangedHandle = BackendSignals->OnImportedIfChanged.AddUObject(this, &UTbRefIfacesParentIfMsgBusAdapter::OnImportedIfChanged);
	OnLocalIfSignalSignalHandle = BackendSignals->OnLocalIfSignalSignal.AddUObject(this, &UTbRefIfacesParentIfMsgBusAdapter::OnLocalIfSignal);
	OnImportedIfSignalSignalHandle = BackendSignals->OnImportedIfSignalSignal.AddUObject(this, &UTbRefIfacesParentIfMsgBusAdapter::OnImportedIfSignal);
}

void UTbRefIfacesParentIfMsgBusAdapter::OnDiscoveryMessage(const FTbRefIfacesParentIfDiscoveryMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	switch (InMessage.Type)
	{
	case ETbRefIfacesParentIfDiscoveryMessageType::ServiceAnnouncement:
		HandleServiceAnnouncement(Context);
		break;
	case ETbRefIfacesParentIfDiscoveryMessageType::ConnectionRequest:
	default:
		HandleClientConnectionRequest(Context);
		break;
	}
}

void UTbRefIfacesParentIfMsgBusAdapter::HandleClientConnectionRequest(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTbRefIfacesParentIfInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;
	msg->LocalIf = BackendService->GetLocalIf();
	msg->ImportedIf = BackendService->GetImportedIf();

	if (TbRefIfacesParentIfMsgBusEndpoint.IsValid())
	{
		TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTbRefIfacesParentIfMsgBusAdapter::HandleServiceAnnouncement(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	// send service announcement
	auto msg = new FTbRefIfacesParentIfServiceAnnouncementReplyMessage();

	if (TbRefIfacesParentIfMsgBusEndpoint.IsValid())
	{
		TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfServiceAnnouncementReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefIfacesParentIfMsgBusAdapter::OnServiceAnnouncementMessage(const FTbRefIfacesParentIfServiceAnnouncementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (TbRefIfacesParentIfMsgBusEndpoint->GetAddress() == Context->GetSender())
	{
		return;
	}
	UE_LOG(LogTbRefIfacesParentIfMsgBusAdapter, Error, TEXT("Service announcement from existing endpoint(%s) received, we should stop listening."), *Context->GetSender().ToString());
}

void UTbRefIfacesParentIfMsgBusAdapter::OnPing(const FTbRefIfacesParentIfPingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbRefIfacesParentIfPongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (TbRefIfacesParentIfMsgBusEndpoint.IsValid())
	{
		TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfPongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefIfacesParentIfMsgBusAdapter::OnClientDisconnected(const FTbRefIfacesParentIfClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

bool UTbRefIfacesParentIfMsgBusAdapter::_CheckClientTimeoutsTick(float /*DeltaTime*/)
{
	_CheckClientTimeouts();
	return true;
}

void UTbRefIfacesParentIfMsgBusAdapter::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTbRefIfacesParentIfMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}

void UTbRefIfacesParentIfMsgBusAdapter::OnLocalIfMethodRequest(const FTbRefIfacesParentIfLocalIfMethodRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbRefIfacesParentIfLocalIfMethodReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->LocalIfMethod(InMessage.Param);

	if (TbRefIfacesParentIfMsgBusEndpoint.IsValid())
	{
		TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfLocalIfMethodReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefIfacesParentIfMsgBusAdapter::OnImportedIfMethodRequest(const FTbRefIfacesParentIfImportedIfMethodRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbRefIfacesParentIfImportedIfMethodReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->ImportedIfMethod(InMessage.Param);

	if (TbRefIfacesParentIfMsgBusEndpoint.IsValid())
	{
		TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfImportedIfMethodReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefIfacesParentIfMsgBusAdapter::OnLocalIfSignal(const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& InParam)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbRefIfacesParentIfLocalIfSignalSignalMessage();
	msg->Param = InParam;
	if (TbRefIfacesParentIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfLocalIfSignalSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefIfacesParentIfMsgBusAdapter::OnImportedIfSignal(const TScriptInterface<ITbIfaceimportEmptyIfInterface>& InParam)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbRefIfacesParentIfImportedIfSignalSignalMessage();
	msg->Param = InParam;
	if (TbRefIfacesParentIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfImportedIfSignalSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefIfacesParentIfMsgBusAdapter::OnSetLocalIfRequest(const FTbRefIfacesParentIfSetLocalIfRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetLocalIf(InMessage.LocalIf);
}

void UTbRefIfacesParentIfMsgBusAdapter::OnLocalIfChanged(const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& InLocalIf)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbRefIfacesParentIfLocalIfChangedMessage();
	msg->LocalIf = InLocalIf;

	if (TbRefIfacesParentIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfLocalIfChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbRefIfacesParentIfMsgBusAdapter::OnSetImportedIfRequest(const FTbRefIfacesParentIfSetImportedIfRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetImportedIf(InMessage.ImportedIf);
}

void UTbRefIfacesParentIfMsgBusAdapter::OnImportedIfChanged(const TScriptInterface<ITbIfaceimportEmptyIfInterface>& InImportedIf)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbRefIfacesParentIfImportedIfChangedMessage();
	msg->ImportedIf = InImportedIf;

	if (TbRefIfacesParentIfMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbRefIfacesParentIfMsgBusEndpoint->Send<FTbRefIfacesParentIfImportedIfChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
