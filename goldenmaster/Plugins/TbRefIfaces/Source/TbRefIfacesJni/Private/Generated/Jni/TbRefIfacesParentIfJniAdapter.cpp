/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbRefIfaces/Generated/Jni/TbRefIfacesParentIfJniAdapter.h"
#include "TbRefIfaces/Generated/Jni/TbRefIfacesDataJavaConverter.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
#include "HAL/Platform.h"

#include "TbIfaceimport/Generated/Jni/TbIfaceimportDataJavaConverter.h"

#if PLATFORM_ANDROID

#include "Engine/Engine.h"
#include "Android/AndroidJNI.h"
#include "Android/AndroidApplication.h"

#if USE_ANDROID_JNI
#include <jni.h>
#endif
#endif

DEFINE_LOG_CATEGORY(LogTbRefIfacesParentIf_JNI);


namespace 
{
	UTbRefIfacesParentIfJniAdapter* gUTbRefIfacesParentIfJniAdapterHandle = nullptr;
}
UTbRefIfacesParentIfJniAdapter::UTbRefIfacesParentIfJniAdapter()
{
}

void UTbRefIfacesParentIfJniAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
	gUTbRefIfacesParentIfJniAdapterHandle = this;
#if PLATFORM_ANDROID
#if USE_ANDROID_JNI
    m_javaJniServiceClass =  FAndroidApplication::FindJavaClassGlobalRef("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService");
    auto Env = FAndroidApplication::GetJavaEnv();
    jclass BridgeClass = FAndroidApplication::FindJavaClassGlobalRef("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniServiceStarter");
    if (BridgeClass == nullptr)
    {
		UE_LOG(LogTemp, Warning, TEXT("TbRefIfacesJavaServiceStarter:start; CLASS not found"));
        return;
    }
	auto functionSignature = "(Landroid/content/Context;)LtbRefIfaces/tbRefIfaces_api/IParentIf;";
	jmethodID StartMethod = Env->GetStaticMethodID(BridgeClass, "start", functionSignature);
    if (StartMethod == nullptr)
    {
		UE_LOG(LogTemp, Warning, TEXT( "TbRefIfacesJavaServiceStarter:start; method not found"));
		return;
    }
    jobject Activity = FJavaWrapper::GameActivityThis;
	jobject localRef = FJavaWrapper::CallStaticObjectMethod(Env, BridgeClass, StartMethod, Activity);

    m_javaJniServiceInstance = Env->NewGlobalRef(localRef);
    Env->DeleteLocalRef(localRef);
#endif
#endif
}

void UTbRefIfacesParentIfJniAdapter::Deinitialize()
{
	callJniServiceReady(false);
	gUTbRefIfacesParentIfJniAdapterHandle = nullptr;
#if PLATFORM_ANDROID
#if USE_ANDROID_JNI
    m_javaJniServiceClass = nullptr;
    if (m_javaJniServiceInstance)
    {
        FAndroidApplication::GetJavaEnv()->DeleteGlobalRef(m_javaJniServiceInstance);
        m_javaJniServiceInstance = nullptr;
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();

    jclass BridgeClass = FAndroidApplication::FindJavaClassGlobalRef("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniServiceStarter");
    if (BridgeClass != nullptr)
    {
        jmethodID StopMethod = Env->GetStaticMethodID(BridgeClass, "stop", "(Landroid/content/Context;)V");
        if (StopMethod != nullptr)
        {
            jobject Activity = FJavaWrapper::GameActivityThis; // Unreal’s activity
            FJavaWrapper::CallStaticVoidMethod(Env, BridgeClass, StopMethod, Activity);
        }
        else
        {
            UE_LOG(LogTemp, Warning, TEXT("TbRefIfacesJavaServiceStarter:stop; method not found, failed to stop service"));
            return;
        }
    }
    else
    {
        UE_LOG(LogTemp, Warning, TEXT( "TbRefIfacesJavaServiceStarter:stop; CLASS not found, failed to stop service"));
    }
#endif
#endif
	Super::Deinitialize();
}

void UTbRefIfacesParentIfJniAdapter::setBackendService(TScriptInterface<ITbRefIfacesParentIfInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbRefIfacesParentIfPublisher* BackendPublisher = BackendService->_GetPublisher();
		checkf(BackendPublisher, TEXT("Cannot unsubscribe from delegates from backend service TbRefIfacesParentIf"));
		BackendPublisher->Unsubscribe(TWeakInterfacePtr<ITbRefIfacesParentIfSubscriberInterface>(this));
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbRefIfacesParentIf is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbRefIfacesParentIfPublisher* BackendPublisher = BackendService->_GetPublisher();
	checkf(BackendPublisher, TEXT("Cannot subscribe to delegates from backend service TbRefIfacesParentIf"));
	// connect property changed signals or simple events
	BackendPublisher->Subscribe(TWeakInterfacePtr<ITbRefIfacesParentIfSubscriberInterface>(this));

	callJniServiceReady(true);
}

TScriptInterface<ITbRefIfacesParentIfInterface> UTbRefIfacesParentIfJniAdapter::getBackendService()
{
	return BackendService;
}

void UTbRefIfacesParentIfJniAdapter::callJniServiceReady(bool isServiceReady)
{
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("UTbRefIfacesParentIfJniAdapter call nativeServiceReady the service function "));
    
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (!m_javaJniServiceClass || !m_javaJniServiceInstance )
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService:nativeServiceReady(Z)V CLASS not found"));
            return;
        }

        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "nativeServiceReady", "(Z)V");

        if (MethodID != nullptr)
        {
            FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, isServiceReady);
        }
        else
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService:nativeServiceReady(Z)V not found "));
        }
    }
#endif 
}

void UTbRefIfacesParentIfJniAdapter::OnLocalIfSignalSignal(const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& Param)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Notify java jni UTbRefIfacesParentIfJniAdapter::onLocalIfSignal "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr || m_javaJniServiceInstance == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService:onLocalIfSignal (LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V CLASS not found"));
            return;
        }
        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onLocalIfSignal", "(LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService:onLocalIfSignal (LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V not found"));
            return;
        }
        // interfaces are currently not supported. TbRefIfacesDataJavaConverter returns nullptr.
        jobject jlocal_Param = TbRefIfacesDataJavaConverter::makeJavaSimpleLocalIf(Env, Param);

        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_Param);
        Env->DeleteLocalRef(jlocal_Param);
    }
#endif
}

void UTbRefIfacesParentIfJniAdapter::OnLocalIfSignalListSignal(const TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>& Param)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Notify java jni UTbRefIfacesParentIfJniAdapter::onLocalIfSignalList "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr || m_javaJniServiceInstance == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService:onLocalIfSignalList ([LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V CLASS not found"));
            return;
        }
        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onLocalIfSignalList", "([LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService:onLocalIfSignalList ([LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V not found"));
            return;
        }
        // interfaces are currently not supported. TbRefIfacesDataJavaConverter returns an array with no elements.
        jobjectArray jlocal_Param = TbRefIfacesDataJavaConverter::makeJavaSimpleLocalIfArray(Env, Param);

        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_Param);
        Env->DeleteLocalRef(jlocal_Param);
    }
#endif
}

void UTbRefIfacesParentIfJniAdapter::OnImportedIfSignalSignal(const TScriptInterface<ITbIfaceimportEmptyIfInterface>& Param)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Notify java jni UTbRefIfacesParentIfJniAdapter::onImportedIfSignal "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr || m_javaJniServiceInstance == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService:onImportedIfSignal (LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V CLASS not found"));
            return;
        }
        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onImportedIfSignal", "(LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService:onImportedIfSignal (LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V not found"));
            return;
        }
        // interfaces are currently not supported. TbIfaceimportDataJavaConverter returns nullptr.
        jobject jlocal_Param = TbIfaceimportDataJavaConverter::makeJavaEmptyIf(Env, Param);

        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_Param);
        Env->DeleteLocalRef(jlocal_Param);
    }
#endif
}

void UTbRefIfacesParentIfJniAdapter::OnImportedIfSignalListSignal(const TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>& Param)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Notify java jni UTbRefIfacesParentIfJniAdapter::onImportedIfSignalList "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr || m_javaJniServiceInstance == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService:onImportedIfSignalList ([LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V CLASS not found"));
            return;
        }
        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onImportedIfSignalList", "([LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService:onImportedIfSignalList ([LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V not found"));
            return;
        }
        // interfaces are currently not supported. TbIfaceimportDataJavaConverter returns an array with no elements.
        jobjectArray jlocal_Param = TbIfaceimportDataJavaConverter::makeJavaEmptyIfArray(Env, Param);

        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_Param);
        Env->DeleteLocalRef(jlocal_Param);
    }
#endif
}
// Interfaces as properties are currently not supported for jni. Generated for compatibility.
void UTbRefIfacesParentIfJniAdapter::OnLocalIfChanged(const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& LocalIf)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Notify java jni UTbRefIfacesParentIfJniAdapter::OnLocalIf "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService::onLocalIfChanged(LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V CLASS not found"));
            return;
        }

        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onLocalIfChanged","(LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService:onLocalIfChanged(LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V not found"));
            return;
        }
        
        // interfaces are currently not supported. TbRefIfacesDataJavaConverter returns nullptr.
        jobject jlocal_LocalIf = TbRefIfacesDataJavaConverter::makeJavaSimpleLocalIf(Env, LocalIf);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_LocalIf);
        Env->DeleteLocalRef(jlocal_LocalIf);

    }
#endif
}
// Interfaces as properties are currently not supported for jni. Generated for compatibility.
void UTbRefIfacesParentIfJniAdapter::OnLocalIfListChanged(const TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>& LocalIfList)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Notify java jni UTbRefIfacesParentIfJniAdapter::OnLocalIfList "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService::onLocalIfListChanged([LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V CLASS not found"));
            return;
        }

        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onLocalIfListChanged","([LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService:onLocalIfListChanged([LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V not found"));
            return;
        }
        
        // interfaces are currently not supported. TbRefIfacesDataJavaConverter returns an array with no elements.
        jobjectArray jlocal_LocalIfList = TbRefIfacesDataJavaConverter::makeJavaSimpleLocalIfArray(Env, LocalIfList);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_LocalIfList);
        Env->DeleteLocalRef(jlocal_LocalIfList);

    }
#endif
}
// Interfaces as properties are currently not supported for jni. Generated for compatibility.
void UTbRefIfacesParentIfJniAdapter::OnImportedIfChanged(const TScriptInterface<ITbIfaceimportEmptyIfInterface>& ImportedIf)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Notify java jni UTbRefIfacesParentIfJniAdapter::OnImportedIf "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService::onImportedIfChanged(LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V CLASS not found"));
            return;
        }

        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onImportedIfChanged","(LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService:onImportedIfChanged(LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V not found"));
            return;
        }
        
        // interfaces are currently not supported. TbIfaceimportDataJavaConverter returns nullptr.
        jobject jlocal_ImportedIf = TbIfaceimportDataJavaConverter::makeJavaEmptyIf(Env, ImportedIf);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_ImportedIf);
        Env->DeleteLocalRef(jlocal_ImportedIf);

    }
#endif
}
// Interfaces as properties are currently not supported for jni. Generated for compatibility.
void UTbRefIfacesParentIfJniAdapter::OnImportedIfListChanged(const TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>& ImportedIfList)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Notify java jni UTbRefIfacesParentIfJniAdapter::OnImportedIfList "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService::onImportedIfListChanged([LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V CLASS not found"));
            return;
        }

        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onImportedIfListChanged","([LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniservice/ParentIfJniService:onImportedIfListChanged([LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V not found"));
            return;
        }
        
        // interfaces are currently not supported. TbIfaceimportDataJavaConverter returns an array with no elements.
        jobjectArray jlocal_ImportedIfList = TbIfaceimportDataJavaConverter::makeJavaEmptyIfArray(Env, ImportedIfList);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_ImportedIfList);
        Env->DeleteLocalRef(jlocal_ImportedIfList);

    }
#endif
}


#if PLATFORM_ANDROID && USE_ANDROID_JNI
JNI_METHOD jobject Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeLocalIfMethod(JNIEnv* Env, jclass Clazz, jobject param)
{
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeLocalIfMethod"));
    if (gUTbRefIfacesParentIfJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeLocalIfMethod: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    // interfaces are currently not supported. TbRefIfacesDataJavaConverter does not fill element.
    TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> local_param = TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>();
    TbRefIfacesDataJavaConverter::fillSimpleLocalIf(Env, param, local_param);

    auto service = gUTbRefIfacesParentIfJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto result = service->LocalIfMethod( local_param);
        // interfaces are currently not supported. TbRefIfacesDataJavaConverter returns nullptr.
        jobject jresult = TbRefIfacesDataJavaConverter::makeJavaSimpleLocalIf(Env, result);
        return jresult;
    }
    else
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("service not valid"));
        return nullptr;
    }
}
JNI_METHOD jobjectArray Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeLocalIfMethodList(JNIEnv* Env, jclass Clazz, jobjectArray param)
{
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeLocalIfMethodList"));
    if (gUTbRefIfacesParentIfJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeLocalIfMethodList: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>> local_param = TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>();
    // interfaces are currently not supported. TbRefIfacesDataJavaConverter does not fill the array.
    TbRefIfacesDataJavaConverter::fillSimpleLocalIfArray(Env, param, local_param);

    auto service = gUTbRefIfacesParentIfJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto result = service->LocalIfMethodList( local_param);
        // interfaces are currently not supported. TbRefIfacesDataJavaConverter returns empty array.
        jobjectArray jresult = TbRefIfacesDataJavaConverter::makeJavaSimpleLocalIfArray(Env, result);
        return jresult;
    }
    else
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("service not valid"));
        return nullptr;
    }
}
JNI_METHOD jobject Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeImportedIfMethod(JNIEnv* Env, jclass Clazz, jobject param)
{
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeImportedIfMethod"));
    if (gUTbRefIfacesParentIfJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeImportedIfMethod: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    // interfaces are currently not supported. TbIfaceimportDataJavaConverter does not fill element.
    TScriptInterface<ITbIfaceimportEmptyIfInterface> local_param = TScriptInterface<ITbIfaceimportEmptyIfInterface>();
    TbIfaceimportDataJavaConverter::fillEmptyIf(Env, param, local_param);

    auto service = gUTbRefIfacesParentIfJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto result = service->ImportedIfMethod( local_param);
        // interfaces are currently not supported. TbIfaceimportDataJavaConverter returns nullptr.
        jobject jresult = TbIfaceimportDataJavaConverter::makeJavaEmptyIf(Env, result);
        return jresult;
    }
    else
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("service not valid"));
        return nullptr;
    }
}
JNI_METHOD jobjectArray Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeImportedIfMethodList(JNIEnv* Env, jclass Clazz, jobjectArray param)
{
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeImportedIfMethodList"));
    if (gUTbRefIfacesParentIfJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeImportedIfMethodList: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>> local_param = TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>();
    // interfaces are currently not supported. TbIfaceimportDataJavaConverter does not fill the array.
    TbIfaceimportDataJavaConverter::fillEmptyIfArray(Env, param, local_param);

    auto service = gUTbRefIfacesParentIfJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto result = service->ImportedIfMethodList( local_param);
        // interfaces are currently not supported. TbIfaceimportDataJavaConverter returns empty array.
        jobjectArray jresult = TbIfaceimportDataJavaConverter::makeJavaEmptyIfArray(Env, result);
        return jresult;
    }
    else
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("service not valid"));
        return nullptr;
    }
}
JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeSetLocalIf(JNIEnv* Env, jclass Clazz, jobject localIf)
{
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeSetLocalIf"));
    if (gUTbRefIfacesParentIfJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeSetLocalIf: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    
    // interfaces are currently not supported. TbRefIfacesDataJavaConverter does not fill element.
    TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> local_local_if = TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>();
    TbRefIfacesDataJavaConverter::fillSimpleLocalIf(Env, localIf, local_local_if);

    AsyncTask(ENamedThreads::GameThread, [plocal_local_if= MoveTemp(local_local_if)]()
    {
        auto service = gUTbRefIfacesParentIfJniAdapterHandle->getBackendService();
        if (service != nullptr)
        {
            service->SetLocalIf(plocal_local_if);
        }
        else
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("service not valid, cannot set value for localIf"));
        }
    });
}

JNI_METHOD jobject Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeGetLocalIf(JNIEnv* Env, jclass Clazz)
{
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeGetLocalIf"));
    if (gUTbRefIfacesParentIfJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeGetLocalIf: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    auto service = gUTbRefIfacesParentIfJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto LocalIf = service->GetLocalIf();
        
        // interfaces are currently not supported. TbRefIfacesDataJavaConverter returns nullptr.
        jobject jlocal_LocalIf = TbRefIfacesDataJavaConverter::makeJavaSimpleLocalIf(Env, LocalIf);
        return jlocal_LocalIf;
    }
    else
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("service not available, try setting a backend service "));
        return nullptr;
    }
}
JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeSetLocalIfList(JNIEnv* Env, jclass Clazz, jobjectArray localIfList)
{
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeSetLocalIfList"));
    if (gUTbRefIfacesParentIfJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeSetLocalIfList: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    
    TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>> local_local_if_list = TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>();
    // interfaces are currently not supported. TbRefIfacesDataJavaConverter does not fill the array.
    TbRefIfacesDataJavaConverter::fillSimpleLocalIfArray(Env, localIfList, local_local_if_list);

    AsyncTask(ENamedThreads::GameThread, [plocal_local_if_list= MoveTemp(local_local_if_list)]()
    {
        auto service = gUTbRefIfacesParentIfJniAdapterHandle->getBackendService();
        if (service != nullptr)
        {
            service->SetLocalIfList(plocal_local_if_list);
        }
        else
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("service not valid, cannot set value for localIfList"));
        }
    });
}

JNI_METHOD jobjectArray Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeGetLocalIfList(JNIEnv* Env, jclass Clazz)
{
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeGetLocalIfList"));
    if (gUTbRefIfacesParentIfJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeGetLocalIfList: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    auto service = gUTbRefIfacesParentIfJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto LocalIfList = service->GetLocalIfList();
        
        // interfaces are currently not supported. TbRefIfacesDataJavaConverter returns an array with no elements.
        jobjectArray jlocal_LocalIfList = TbRefIfacesDataJavaConverter::makeJavaSimpleLocalIfArray(Env, LocalIfList);
        return jlocal_LocalIfList;
    }
    else
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("service not available, try setting a backend service "));
        return nullptr;
    }
}
JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeSetImportedIf(JNIEnv* Env, jclass Clazz, jobject importedIf)
{
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeSetImportedIf"));
    if (gUTbRefIfacesParentIfJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeSetImportedIf: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    
    // interfaces are currently not supported. TbIfaceimportDataJavaConverter does not fill element.
    TScriptInterface<ITbIfaceimportEmptyIfInterface> local_imported_if = TScriptInterface<ITbIfaceimportEmptyIfInterface>();
    TbIfaceimportDataJavaConverter::fillEmptyIf(Env, importedIf, local_imported_if);

    AsyncTask(ENamedThreads::GameThread, [plocal_imported_if= MoveTemp(local_imported_if)]()
    {
        auto service = gUTbRefIfacesParentIfJniAdapterHandle->getBackendService();
        if (service != nullptr)
        {
            service->SetImportedIf(plocal_imported_if);
        }
        else
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("service not valid, cannot set value for importedIf"));
        }
    });
}

JNI_METHOD jobject Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeGetImportedIf(JNIEnv* Env, jclass Clazz)
{
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeGetImportedIf"));
    if (gUTbRefIfacesParentIfJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeGetImportedIf: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    auto service = gUTbRefIfacesParentIfJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto ImportedIf = service->GetImportedIf();
        
        // interfaces are currently not supported. TbIfaceimportDataJavaConverter returns nullptr.
        jobject jlocal_ImportedIf = TbIfaceimportDataJavaConverter::makeJavaEmptyIf(Env, ImportedIf);
        return jlocal_ImportedIf;
    }
    else
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("service not available, try setting a backend service "));
        return nullptr;
    }
}
JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeSetImportedIfList(JNIEnv* Env, jclass Clazz, jobjectArray importedIfList)
{
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeSetImportedIfList"));
    if (gUTbRefIfacesParentIfJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeSetImportedIfList: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    
    TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>> local_imported_if_list = TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>();
    // interfaces are currently not supported. TbIfaceimportDataJavaConverter does not fill the array.
    TbIfaceimportDataJavaConverter::fillEmptyIfArray(Env, importedIfList, local_imported_if_list);

    AsyncTask(ENamedThreads::GameThread, [plocal_imported_if_list= MoveTemp(local_imported_if_list)]()
    {
        auto service = gUTbRefIfacesParentIfJniAdapterHandle->getBackendService();
        if (service != nullptr)
        {
            service->SetImportedIfList(plocal_imported_if_list);
        }
        else
        {
            UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("service not valid, cannot set value for importedIfList"));
        }
    });
}

JNI_METHOD jobjectArray Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeGetImportedIfList(JNIEnv* Env, jclass Clazz)
{
    UE_LOG(LogTbRefIfacesParentIf_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeGetImportedIfList"));
    if (gUTbRefIfacesParentIfJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniservice_ParentIfJniService_nativeGetImportedIfList: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    auto service = gUTbRefIfacesParentIfJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto ImportedIfList = service->GetImportedIfList();
        
        // interfaces are currently not supported. TbIfaceimportDataJavaConverter returns an array with no elements.
        jobjectArray jlocal_ImportedIfList = TbIfaceimportDataJavaConverter::makeJavaEmptyIfArray(Env, ImportedIfList);
        return jlocal_ImportedIfList;
    }
    else
    {
        UE_LOG(LogTbRefIfacesParentIf_JNI, Warning, TEXT("service not available, try setting a backend service "));
        return nullptr;
    }
}
#endif
