/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */




#include "TbRefIfaces/Generated/Jni/TbRefIfacesParentIfJniClient.h"
#include "TbRefIfaces/Generated/Jni/TbRefIfacesDataJavaConverter.h"

#include "Async/Async.h"
#include "Engine/Engine.h"

#if PLATFORM_ANDROID

#include "Engine/Engine.h"
 #include "Android/AndroidJNI.h"
 #include "Android/AndroidApplication.h"

 #if USE_ANDROID_JNI
 #include <jni.h>
 #endif
#endif

#include <atomic>
#include "HAL/CriticalSection.h"
#include "GenericPlatform/GenericPlatformMisc.h"

/**
   \brief data structure to hold the last sent property values
*/


class UTbRefIfacesParentIfJniClientMethodHelper
{
public:
    template <typename ResultType>
    FGuid StorePromise(TPromise<ResultType>& Promise);

    template <typename ResultType>
    bool FulfillPromise(const FGuid& Id, const ResultType& Value);
private:
    TMap<FGuid, void*> ReplyPromisesMap;
    FCriticalSection ReplyPromisesMapCS;

};

namespace {

    UTbRefIfacesParentIfJniClient* gUTbRefIfacesParentIfJniClientHandle = nullptr;
    TFunction<void(bool)> gUTbRefIfacesParentIfJniClientnotifyIsReady = [](bool value) { (void)value; UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("notifyIsReady used but not set ")); };
    TFunction<void(TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>)> gUTbRefIfacesParentIfJniClientOnLocalIfChangedEmpty = [](TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> value) { (void)value; UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("onLocalIfChanged used but not set ")); };
    TFunction<void(TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>)> gUTbRefIfacesParentIfJniClientOnLocalIfChanged = gUTbRefIfacesParentIfJniClientOnLocalIfChangedEmpty;
    TFunction<void(TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>)> gUTbRefIfacesParentIfJniClientOnLocalIfListChangedEmpty = [](TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>> value) { (void)value; UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("onLocalIfListChanged used but not set ")); };
    TFunction<void(TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>)> gUTbRefIfacesParentIfJniClientOnLocalIfListChanged = gUTbRefIfacesParentIfJniClientOnLocalIfListChangedEmpty;
    TFunction<void(TScriptInterface<ITbIfaceimportEmptyIfInterface>)> gUTbRefIfacesParentIfJniClientOnImportedIfChangedEmpty = [](TScriptInterface<ITbIfaceimportEmptyIfInterface> value) { (void)value; UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("onImportedIfChanged used but not set ")); };
    TFunction<void(TScriptInterface<ITbIfaceimportEmptyIfInterface>)> gUTbRefIfacesParentIfJniClientOnImportedIfChanged = gUTbRefIfacesParentIfJniClientOnImportedIfChangedEmpty;
    TFunction<void(TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>)> gUTbRefIfacesParentIfJniClientOnImportedIfListChangedEmpty = [](TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>> value) { (void)value; UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("onImportedIfListChanged used but not set ")); };
    TFunction<void(TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>)> gUTbRefIfacesParentIfJniClientOnImportedIfListChanged = gUTbRefIfacesParentIfJniClientOnImportedIfListChangedEmpty;

    UTbRefIfacesParentIfJniClientMethodHelper  gUTbRefIfacesParentIfJniClientmethodHelper;

}


DEFINE_LOG_CATEGORY(LogTbRefIfacesParentIfClient_JNI);

UTbRefIfacesParentIfJniClient::UTbRefIfacesParentIfJniClient()
{
#if !(PLATFORM_ANDROID && USE_ANDROID_JNI)
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("This is class that adapts the usage with android and jni, but seems to be used on different target. Make sure  you are using it with Android"));
#endif
}

UTbRefIfacesParentIfJniClient::UTbRefIfacesParentIfJniClient(FVTableHelper& Helper)
    : Super(Helper)
{
}
UTbRefIfacesParentIfJniClient::~UTbRefIfacesParentIfJniClient() = default;

void UTbRefIfacesParentIfJniClient::Initialize(FSubsystemCollectionBase& Collection)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Init"));
    Super::Initialize(Collection);

    gUTbRefIfacesParentIfJniClientHandle = this;
    gUTbRefIfacesParentIfJniClientnotifyIsReady = [this](bool value) {
         b_isReady = value;
         AsyncTask(ENamedThreads::GameThread, [this]()
             {
                 _ConnectionStatusChangedBP.Broadcast(b_isReady);
                 _ConnectionStatusChanged.Broadcast(b_isReady);
             });
        };
	gUTbRefIfacesParentIfJniClientOnLocalIfChanged = [this](const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& InLocalIf)
    {
         LocalIf = InLocalIf;
         _GetPublisher()->BroadcastLocalIfChanged(LocalIf);
    };
	gUTbRefIfacesParentIfJniClientOnLocalIfListChanged = [this](const TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>& InLocalIfList)
    {
         LocalIfList = InLocalIfList;
         _GetPublisher()->BroadcastLocalIfListChanged(LocalIfList);
    };
	gUTbRefIfacesParentIfJniClientOnImportedIfChanged = [this](const TScriptInterface<ITbIfaceimportEmptyIfInterface>& InImportedIf)
    {
         ImportedIf = InImportedIf;
         _GetPublisher()->BroadcastImportedIfChanged(ImportedIf);
    };
	gUTbRefIfacesParentIfJniClientOnImportedIfListChanged = [this](const TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>& InImportedIfList)
    {
         ImportedIfList = InImportedIfList;
         _GetPublisher()->BroadcastImportedIfListChanged(ImportedIfList);
    };

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    m_javaJniClientClass = FAndroidApplication::FindJavaClassGlobalRef("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient");
    jmethodID constructor = Env->GetMethodID(m_javaJniClientClass, "<init>", "()V");
    jobject localRef = Env->NewObject(m_javaJniClientClass, constructor);
    m_javaJniClientInstance = Env->NewGlobalRef(localRef);
    FAndroidApplication::GetJavaEnv()->DeleteLocalRef(localRef);
#endif
}

void UTbRefIfacesParentIfJniClient::Deinitialize()
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("deinit"));
    _unbind();
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    Env->DeleteGlobalRef(m_javaJniClientInstance);
    m_javaJniClientClass = nullptr;
    m_javaJniClientInstance = nullptr;
#endif

    gUTbRefIfacesParentIfJniClientnotifyIsReady = [](bool value){(void)value; UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("notifyIsReady used but not set "));};
    gUTbRefIfacesParentIfJniClientOnLocalIfChanged = gUTbRefIfacesParentIfJniClientOnLocalIfChangedEmpty;
    gUTbRefIfacesParentIfJniClientOnLocalIfListChanged = gUTbRefIfacesParentIfJniClientOnLocalIfListChangedEmpty;
    gUTbRefIfacesParentIfJniClientOnImportedIfChanged = gUTbRefIfacesParentIfJniClientOnImportedIfChangedEmpty;
    gUTbRefIfacesParentIfJniClientOnImportedIfListChanged = gUTbRefIfacesParentIfJniClientOnImportedIfListChangedEmpty;

    gUTbRefIfacesParentIfJniClientHandle = nullptr;
    Super::Deinitialize();
}
TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> UTbRefIfacesParentIfJniClient::GetLocalIf() const
{
    return LocalIf;
}
void UTbRefIfacesParentIfJniClient::SetLocalIf(const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& InLocalIf)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:setLocalIf"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetLocalIf() == InLocalIf )
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Property localIf to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:setLocalIf (LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setLocalIf", "(LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:setLocalIf (LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V not found"));
            return;
        }
        
        // interfaces are currently not supported. TbRefIfacesDataJavaConverter returns nullptr.
        jobject jlocal_LocalIf = TbRefIfacesDataJavaConverter::makeJavaSimpleLocalIf(Env, InLocalIf);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_LocalIf);
        Env->DeleteLocalRef(jlocal_LocalIf);
    }
#endif

}
TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>> UTbRefIfacesParentIfJniClient::GetLocalIfList() const
{
    return LocalIfList;
}
void UTbRefIfacesParentIfJniClient::SetLocalIfList(const TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>& InLocalIfList)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:setLocalIfList"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetLocalIfList() == InLocalIfList )
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Property localIfList to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:setLocalIfList ([LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setLocalIfList", "([LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:setLocalIfList ([LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V not found"));
            return;
        }
        
        // interfaces are currently not supported. TbRefIfacesDataJavaConverter returns empty array.
        jobjectArray jlocal_LocalIfList = TbRefIfacesDataJavaConverter::makeJavaSimpleLocalIfArray(Env, InLocalIfList);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_LocalIfList);
        Env->DeleteLocalRef(jlocal_LocalIfList);
    }
#endif

}
TScriptInterface<ITbIfaceimportEmptyIfInterface> UTbRefIfacesParentIfJniClient::GetImportedIf() const
{
    return ImportedIf;
}
void UTbRefIfacesParentIfJniClient::SetImportedIf(const TScriptInterface<ITbIfaceimportEmptyIfInterface>& InImportedIf)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:setImportedIf"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetImportedIf() == InImportedIf )
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Property importedIf to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:setImportedIf (LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setImportedIf", "(LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:setImportedIf (LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V not found"));
            return;
        }
        
        // interfaces are currently not supported. TbIfaceimportDataJavaConverter returns nullptr.
        jobject jlocal_ImportedIf = TbIfaceimportDataJavaConverter::makeJavaEmptyIf(Env, InImportedIf);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_ImportedIf);
        Env->DeleteLocalRef(jlocal_ImportedIf);
    }
#endif

}
TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>> UTbRefIfacesParentIfJniClient::GetImportedIfList() const
{
    return ImportedIfList;
}
void UTbRefIfacesParentIfJniClient::SetImportedIfList(const TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>& InImportedIfList)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:setImportedIfList"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetImportedIfList() == InImportedIfList )
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Property importedIfList to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:setImportedIfList ([LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setImportedIfList", "([LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:setImportedIfList ([LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V not found"));
            return;
        }
        
        // interfaces are currently not supported. TbIfaceimportDataJavaConverter returns empty array.
        jobjectArray jlocal_ImportedIfList = TbIfaceimportDataJavaConverter::makeJavaEmptyIfArray(Env, InImportedIfList);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_ImportedIfList);
        Env->DeleteLocalRef(jlocal_ImportedIfList);
    }
#endif

}
TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> UTbRefIfacesParentIfJniClient::LocalIfMethod(const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& InParam)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:localIfMethod "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>();
    }
    TPromise<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:localIfMethodAsync:(Ljava/lang/String;LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V CLASS not found"));
        return TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "localIfMethodAsync", "(Ljava/lang/String;LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbRefIfacesParentIfJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        // interfaces are currently not supported. TbRefIfacesDataJavaConverter returns nullptr.
        jobject jlocal_Param = TbRefIfacesDataJavaConverter::makeJavaSimpleLocalIf(Env, InParam);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_Param);
        Env->DeleteLocalRef(jlocal_Param);
    }
    else
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:localIfMethodAsync (Ljava/lang/String;LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>> UTbRefIfacesParentIfJniClient::LocalIfMethodList(const TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>& InParam)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:localIfMethodList "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>();
    }
    TPromise<TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:localIfMethodListAsync:(Ljava/lang/String;[LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V CLASS not found"));
        return TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "localIfMethodListAsync", "(Ljava/lang/String;[LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbRefIfacesParentIfJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        // interfaces are currently not supported. TbRefIfacesDataJavaConverter returns empty array.
        jobjectArray jlocal_Param = TbRefIfacesDataJavaConverter::makeJavaSimpleLocalIfArray(Env, InParam);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_Param);
        Env->DeleteLocalRef(jlocal_Param);
    }
    else
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:localIfMethodListAsync (Ljava/lang/String;[LtbRefIfaces/tbRefIfaces_api/ISimpleLocalIf;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TScriptInterface<ITbIfaceimportEmptyIfInterface> UTbRefIfacesParentIfJniClient::ImportedIfMethod(const TScriptInterface<ITbIfaceimportEmptyIfInterface>& InParam)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:importedIfMethod "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TScriptInterface<ITbIfaceimportEmptyIfInterface>();
    }
    TPromise<TScriptInterface<ITbIfaceimportEmptyIfInterface>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:importedIfMethodAsync:(Ljava/lang/String;LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V CLASS not found"));
        return TScriptInterface<ITbIfaceimportEmptyIfInterface>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "importedIfMethodAsync", "(Ljava/lang/String;LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbRefIfacesParentIfJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        // interfaces are currently not supported. TbIfaceimportDataJavaConverter returns nullptr.
        jobject jlocal_Param = TbIfaceimportDataJavaConverter::makeJavaEmptyIf(Env, InParam);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_Param);
        Env->DeleteLocalRef(jlocal_Param);
    }
    else
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:importedIfMethodAsync (Ljava/lang/String;LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>> UTbRefIfacesParentIfJniClient::ImportedIfMethodList(const TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>& InParam)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:importedIfMethodList "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>();
    }
    TPromise<TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:importedIfMethodListAsync:(Ljava/lang/String;[LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V CLASS not found"));
        return TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "importedIfMethodListAsync", "(Ljava/lang/String;[LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbRefIfacesParentIfJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        // interfaces are currently not supported. TbIfaceimportDataJavaConverter returns empty array.
        jobjectArray jlocal_Param = TbIfaceimportDataJavaConverter::makeJavaEmptyIfArray(Env, InParam);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_Param);
        Env->DeleteLocalRef(jlocal_Param);
    }
    else
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:importedIfMethodListAsync (Ljava/lang/String;[LtbIfaceimport/tbIfaceimport_api/IEmptyIf;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}

bool UTbRefIfacesParentIfJniClient::_bindToService(FString servicePackage, FString connectionId)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Request JNI connection to %s"), *servicePackage);
    if (b_isReady)
    {
        if (servicePackage == m_lastBoundServicePackage && connectionId == m_lastConnectionId)
        {
            UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("Already bound"));
            return true;
        }
        else
        {
            _unbind();
        }
    }
    m_lastBoundServicePackage = servicePackage;
    m_lastConnectionId = connectionId;
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:bind:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z CLASS not found"));
        return false;
    }
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "bind", "(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z");
    if (MethodID != nullptr)
    {
        jobject Activity = FJavaWrapper::GameActivityThis;
        auto jPackage = FJavaHelper::ToJavaString(Env, servicePackage);
        auto jConnId = FJavaHelper::ToJavaString(Env, connectionId);
        auto res = FJavaWrapper::CallBooleanMethod(Env, m_javaJniClientInstance, MethodID, Activity, *jPackage, *jConnId);
        return res;
    }
    else
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:bind (Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z not found"));
    }
#endif
    return false;
}

void UTbRefIfacesParentIfJniClient::_unbind()
{

    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Request JNI unbind"));

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:unbind:()V CLASS not found"));
        return;
    }
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "unbind", "()V");
    if (MethodID != nullptr)
    {
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID);
    }
    else
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("tbRefIfaces/tbRefIfacesjniclient/ParentIfJniClient:unbind ()V not found"));
    }
#endif
}

bool UTbRefIfacesParentIfJniClient::_IsReady() const
{
    return b_isReady;
}

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    // interfaces as properties are currently not supported for jni. Generated for compatibility.
JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfChanged(JNIEnv* Env, jclass Clazz,jobject localIf)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfChanged"));
    if (gUTbRefIfacesParentIfJniClientHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    // interfaces are currently not supported. TbRefIfacesDataJavaConverter does not fill element.
    TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> local_local_if = TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>();
    TbRefIfacesDataJavaConverter::fillSimpleLocalIf(Env, localIf, local_local_if);

    AsyncTask(ENamedThreads::GameThread, [plocal_local_if= MoveTemp(local_local_if)]()
    {
        gUTbRefIfacesParentIfJniClientOnLocalIfChanged(plocal_local_if);
    });
}
    // interfaces as properties are currently not supported for jni. Generated for compatibility.
JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfListChanged(JNIEnv* Env, jclass Clazz,jobjectArray localIfList)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfListChanged"));
    if (gUTbRefIfacesParentIfJniClientHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfListChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>> local_local_if_list = TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>();
    // interfaces are currently not supported. TbRefIfacesDataJavaConverter does not fill the array.
    TbRefIfacesDataJavaConverter::fillSimpleLocalIfArray(Env, localIfList, local_local_if_list);

    AsyncTask(ENamedThreads::GameThread, [plocal_local_if_list= MoveTemp(local_local_if_list)]()
    {
        gUTbRefIfacesParentIfJniClientOnLocalIfListChanged(plocal_local_if_list);
    });
}
    // interfaces as properties are currently not supported for jni. Generated for compatibility.
JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfChanged(JNIEnv* Env, jclass Clazz,jobject importedIf)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfChanged"));
    if (gUTbRefIfacesParentIfJniClientHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    // interfaces are currently not supported. TbIfaceimportDataJavaConverter does not fill element.
    TScriptInterface<ITbIfaceimportEmptyIfInterface> local_imported_if = TScriptInterface<ITbIfaceimportEmptyIfInterface>();
    TbIfaceimportDataJavaConverter::fillEmptyIf(Env, importedIf, local_imported_if);

    AsyncTask(ENamedThreads::GameThread, [plocal_imported_if= MoveTemp(local_imported_if)]()
    {
        gUTbRefIfacesParentIfJniClientOnImportedIfChanged(plocal_imported_if);
    });
}
    // interfaces as properties are currently not supported for jni. Generated for compatibility.
JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfListChanged(JNIEnv* Env, jclass Clazz,jobjectArray importedIfList)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfListChanged"));
    if (gUTbRefIfacesParentIfJniClientHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfListChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>> local_imported_if_list = TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>();
    // interfaces are currently not supported. TbIfaceimportDataJavaConverter does not fill the array.
    TbIfaceimportDataJavaConverter::fillEmptyIfArray(Env, importedIfList, local_imported_if_list);

    AsyncTask(ENamedThreads::GameThread, [plocal_imported_if_list= MoveTemp(local_imported_if_list)]()
    {
        gUTbRefIfacesParentIfJniClientOnImportedIfListChanged(plocal_imported_if_list);
    });
}

JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfSignal(JNIEnv* Env, jclass Clazz, jobject param)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfSignal"));
    if (gUTbRefIfacesParentIfJniClientHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfSignal: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    // interfaces are currently not supported. TbRefIfacesDataJavaConverter does not fill element.
    TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> local_param = TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>();
    TbRefIfacesDataJavaConverter::fillSimpleLocalIf(Env, param, local_param);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param= MoveTemp(local_param)]()
        {
            if (gUTbRefIfacesParentIfJniClientHandle == nullptr)
            {
                UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfSignal: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbRefIfacesParentIfJniClientHandle->_GetPublisher()->BroadcastLocalIfSignalSignal( plocal_param);
        });
}

JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfSignalList(JNIEnv* Env, jclass Clazz, jobjectArray param)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfSignalList"));
    if (gUTbRefIfacesParentIfJniClientHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfSignalList: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>> local_param = TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>();
    // interfaces are currently not supported. TbRefIfacesDataJavaConverter does not fill the array.
    TbRefIfacesDataJavaConverter::fillSimpleLocalIfArray(Env, param, local_param);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param= MoveTemp(local_param)]()
        {
            if (gUTbRefIfacesParentIfJniClientHandle == nullptr)
            {
                UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfSignalList: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbRefIfacesParentIfJniClientHandle->_GetPublisher()->BroadcastLocalIfSignalListSignal( plocal_param);
        });
}

JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfSignal(JNIEnv* Env, jclass Clazz, jobject param)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfSignal"));
    if (gUTbRefIfacesParentIfJniClientHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfSignal: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    // interfaces are currently not supported. TbIfaceimportDataJavaConverter does not fill element.
    TScriptInterface<ITbIfaceimportEmptyIfInterface> local_param = TScriptInterface<ITbIfaceimportEmptyIfInterface>();
    TbIfaceimportDataJavaConverter::fillEmptyIf(Env, param, local_param);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param= MoveTemp(local_param)]()
        {
            if (gUTbRefIfacesParentIfJniClientHandle == nullptr)
            {
                UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfSignal: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbRefIfacesParentIfJniClientHandle->_GetPublisher()->BroadcastImportedIfSignalSignal( plocal_param);
        });
}

JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfSignalList(JNIEnv* Env, jclass Clazz, jobjectArray param)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfSignalList"));
    if (gUTbRefIfacesParentIfJniClientHandle == nullptr)
    {
        UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfSignalList: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>> local_param = TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>();
    // interfaces are currently not supported. TbIfaceimportDataJavaConverter does not fill the array.
    TbIfaceimportDataJavaConverter::fillEmptyIfArray(Env, param, local_param);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param= MoveTemp(local_param)]()
        {
            if (gUTbRefIfacesParentIfJniClientHandle == nullptr)
            {
                UE_LOG(LogTbRefIfacesParentIfClient_JNI, Warning, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfSignalList: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbRefIfacesParentIfJniClientHandle->_GetPublisher()->BroadcastImportedIfSignalListSignal( plocal_param);
        });
}

JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfMethodResult(JNIEnv* Env, jclass Clazz, jobject result, jstring callId)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfMethodResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TScriptInterface<ITbRefIfacesSimpleLocalIfInterface> cpp_result = TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>();
    // interfaces are currently not supported. TbRefIfacesDataJavaConverter does not fill element.
    TbRefIfacesDataJavaConverter::fillSimpleLocalIf(Env, result,cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbRefIfacesParentIfJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfMethodListResult(JNIEnv* Env, jclass Clazz, jobjectArray result, jstring callId)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnLocalIfMethodListResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>> cpp_result = TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>();
    // interfaces are currently not supported. TbRefIfacesDataJavaConverter does not fill the array.
    TbRefIfacesDataJavaConverter::fillSimpleLocalIfArray(Env, result, cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbRefIfacesParentIfJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfMethodResult(JNIEnv* Env, jclass Clazz, jobject result, jstring callId)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfMethodResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TScriptInterface<ITbIfaceimportEmptyIfInterface> cpp_result = TScriptInterface<ITbIfaceimportEmptyIfInterface>();
    // interfaces are currently not supported. TbIfaceimportDataJavaConverter does not fill element.
    TbIfaceimportDataJavaConverter::fillEmptyIf(Env, result,cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbRefIfacesParentIfJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfMethodListResult(JNIEnv* Env, jclass Clazz, jobjectArray result, jstring callId)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT("Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeOnImportedIfMethodListResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>> cpp_result = TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>();
    // interfaces are currently not supported. TbIfaceimportDataJavaConverter does not fill the array.
    TbIfaceimportDataJavaConverter::fillEmptyIfArray(Env, result, cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbRefIfacesParentIfJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbRefIfaces_tbRefIfacesjniclient_ParentIfJniClient_nativeIsReady(JNIEnv* Env, jclass Clazz, jboolean value)
{
    AsyncTask(ENamedThreads::GameThread, [value]()
        {
            gUTbRefIfacesParentIfJniClientnotifyIsReady(value);
        });
}
#endif


template <typename ResultType>
FGuid UTbRefIfacesParentIfJniClientMethodHelper::StorePromise(TPromise<ResultType>& Promise)
{
    FGuid Id = FGuid::NewGuid();
    FScopeLock Lock(&ReplyPromisesMapCS);
    ReplyPromisesMap.Add(Id, &Promise);
    //TODO invalid id if sth goes wrong + log + checking
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT(" method store id %s"), *(Id.ToString(EGuidFormats::Digits)));
    return Id;
}

template <typename ResultType>
bool UTbRefIfacesParentIfJniClientMethodHelper::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
    UE_LOG(LogTbRefIfacesParentIfClient_JNI, Verbose, TEXT(" method resolving id %s"), *(Id.ToString(EGuidFormats::Digits)));
    TPromise<ResultType>* PromisePtr = nullptr;

    {
        FScopeLock Lock(&ReplyPromisesMapCS);
        if (auto** Found = ReplyPromisesMap.Find(Id))
        {
            PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
            ReplyPromisesMap.Remove(Id);
        }
    }

    if (PromisePtr)
    {
        AsyncTask(ENamedThreads::GameThread, [Value, PromisePtr]()
            {
                PromisePtr->SetValue(Value);
            });
        return true;

    }
    return false;
}
template FGuid UTbRefIfacesParentIfJniClientMethodHelper::StorePromise<TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>>(TPromise<TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>>& Promise);
template bool UTbRefIfacesParentIfJniClientMethodHelper::FulfillPromise<TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>>(const FGuid& Id, const TArray<TScriptInterface<ITbIfaceimportEmptyIfInterface>>& Value);
template FGuid UTbRefIfacesParentIfJniClientMethodHelper::StorePromise<TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>>(TPromise<TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>>& Promise);
template bool UTbRefIfacesParentIfJniClientMethodHelper::FulfillPromise<TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>>(const FGuid& Id, const TArray<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>& Value);
template FGuid UTbRefIfacesParentIfJniClientMethodHelper::StorePromise<TScriptInterface<ITbIfaceimportEmptyIfInterface>>(TPromise<TScriptInterface<ITbIfaceimportEmptyIfInterface>>& Promise);
template bool UTbRefIfacesParentIfJniClientMethodHelper::FulfillPromise<TScriptInterface<ITbIfaceimportEmptyIfInterface>>(const FGuid& Id, const TScriptInterface<ITbIfaceimportEmptyIfInterface>& Value);
template FGuid UTbRefIfacesParentIfJniClientMethodHelper::StorePromise<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>(TPromise<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>& Promise);
template bool UTbRefIfacesParentIfJniClientMethodHelper::FulfillPromise<TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>>(const FGuid& Id, const TScriptInterface<ITbRefIfacesSimpleLocalIfInterface>& Value);

