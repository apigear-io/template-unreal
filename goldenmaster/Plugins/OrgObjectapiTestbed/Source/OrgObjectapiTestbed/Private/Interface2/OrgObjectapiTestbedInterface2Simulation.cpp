/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "OrgObjectapiTestbedInterface2Simulation.h"
#include "apig/OrgObjectapiTestbed.json.adapter.h"
#include "unrealsimulation.h"

using namespace ApiGear::JSONRPC;

namespace OrgObjectapiTestbed {
namespace Interface2 {
namespace Private {
SimulationService::SimulationService()
    : IOrgObjectapiTestbedInterface2Interface()
    , Prop200(0)
    , Prop201(0)
    , Prop202(0)
    , Prop203(0.0f)
    , Prop204(0.0f)
    , Prop205(FString())
{
    UApiGearConnectionManager* AGCM = nullptr;
    if (GEngine != nullptr)
    {
        AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
    }
    NotifyRequestFunc Interface2StateChangedFunc = [this](NotifyRequestArg arg)
    {
        const json fields = arg.params;
        if(fields.contains("prop200")) {
            if(Prop200 != fields["prop200"].get<int32>())
            {
                Prop200 = fields["prop200"].get<int32>();
                Prop200Changed.Broadcast(Prop200);
            }
        }
        if(fields.contains("prop201")) {
            if(Prop201 != fields["prop201"].get<int32>())
            {
                Prop201 = fields["prop201"].get<int32>();
                Prop201Changed.Broadcast(Prop201);
            }
        }
        if(fields.contains("prop202")) {
            if(Prop202 != fields["prop202"].get<int32>())
            {
                Prop202 = fields["prop202"].get<int32>();
                Prop202Changed.Broadcast(Prop202);
            }
        }
        if(fields.contains("prop203")) {
            if(Prop203 != fields["prop203"].get<float>())
            {
                Prop203 = fields["prop203"].get<float>();
                Prop203Changed.Broadcast(Prop203);
            }
        }
        if(fields.contains("prop204")) {
            if(Prop204 != fields["prop204"].get<float>())
            {
                Prop204 = fields["prop204"].get<float>();
                Prop204Changed.Broadcast(Prop204);
            }
        }
        if(fields.contains("prop205")) {
            if(Prop205 != fields["prop205"].get<FString>())
            {
                Prop205 = fields["prop205"].get<FString>();
                Prop205Changed.Broadcast(Prop205);
            }
        }
    };
    if(AGCM != nullptr)
    {   
        AGCM->GetSimulationConnection()->Connect();
        AGCM->GetSimulationConnection()->onNotifyState("org.objectapi.testbed/Interface2", Interface2StateChangedFunc);
    }

    CallResponseFunc GetInterface2StateFunc = [this](CallResponseArg arg)
    {
        if(arg.result.size() != 1) {
          return;
        }
        const json fields = arg.result;
        if(fields.contains("prop200")) {
            if(Prop200 != fields["prop200"].get<int32>())
            {
                Prop200 = fields["prop200"].get<int32>();
                Prop200Changed.Broadcast(Prop200);
            }
        }
        if(fields.contains("prop201")) {
            if(Prop201 != fields["prop201"].get<int32>())
            {
                Prop201 = fields["prop201"].get<int32>();
                Prop201Changed.Broadcast(Prop201);
            }
        }
        if(fields.contains("prop202")) {
            if(Prop202 != fields["prop202"].get<int32>())
            {
                Prop202 = fields["prop202"].get<int32>();
                Prop202Changed.Broadcast(Prop202);
            }
        }
        if(fields.contains("prop203")) {
            if(Prop203 != fields["prop203"].get<float>())
            {
                Prop203 = fields["prop203"].get<float>();
                Prop203Changed.Broadcast(Prop203);
            }
        }
        if(fields.contains("prop204")) {
            if(Prop204 != fields["prop204"].get<float>())
            {
                Prop204 = fields["prop204"].get<float>();
                Prop204Changed.Broadcast(Prop204);
            }
        }
        if(fields.contains("prop205")) {
            if(Prop205 != fields["prop205"].get<FString>())
            {
                Prop205 = fields["prop205"].get<FString>();
                Prop205Changed.Broadcast(Prop205);
            }
        }
    };
    if(AGCM != nullptr)
    {
        AGCM->GetSimulationConnection()->doFetchState("org.objectapi.testbed/Interface2", GetInterface2StateFunc);
    }

    // register notification callback functions, signal/event -> fcn
}

SimulationService::~SimulationService()
{
    if (GEngine != nullptr)
    {
        UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
        AGCM->GetSimulationConnection()->RemoveOnNotifyState("org.objectapi.testbed/Interface2");
        // unregister notification callback functions
    }
}

int32 SimulationService::GetProp200() const
{
    return Prop200;
}

void SimulationService::SetProp200(int32 InProp200)
{
    Params params;
    params["prop200"] = InProp200;
    if (GEngine != nullptr)
    {
        UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
        AGCM->GetSimulationConnection()->doCall("org.objectapi.testbed/Interface2", "_set", params);
    }
}

FOrgObjectapiTestbedInterface2Prop200ChangedDelegate& SimulationService::GetProp200ChangedDelegate()
{
    return Prop200Changed;
}

int32 SimulationService::GetProp201() const
{
    return Prop201;
}

void SimulationService::SetProp201(int32 InProp201)
{
    Params params;
    params["prop201"] = InProp201;
    if (GEngine != nullptr)
    {
        UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
        AGCM->GetSimulationConnection()->doCall("org.objectapi.testbed/Interface2", "_set", params);
    }
}

FOrgObjectapiTestbedInterface2Prop201ChangedDelegate& SimulationService::GetProp201ChangedDelegate()
{
    return Prop201Changed;
}

int32 SimulationService::GetProp202() const
{
    return Prop202;
}

void SimulationService::SetProp202(int32 InProp202)
{
    Params params;
    params["prop202"] = InProp202;
    if (GEngine != nullptr)
    {
        UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
        AGCM->GetSimulationConnection()->doCall("org.objectapi.testbed/Interface2", "_set", params);
    }
}

FOrgObjectapiTestbedInterface2Prop202ChangedDelegate& SimulationService::GetProp202ChangedDelegate()
{
    return Prop202Changed;
}

float SimulationService::GetProp203() const
{
    return Prop203;
}

void SimulationService::SetProp203(float InProp203)
{
    Params params;
    params["prop203"] = InProp203;
    if (GEngine != nullptr)
    {
        UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
        AGCM->GetSimulationConnection()->doCall("org.objectapi.testbed/Interface2", "_set", params);
    }
}

FOrgObjectapiTestbedInterface2Prop203ChangedDelegate& SimulationService::GetProp203ChangedDelegate()
{
    return Prop203Changed;
}

float SimulationService::GetProp204() const
{
    return Prop204;
}

void SimulationService::SetProp204(float InProp204)
{
    Params params;
    params["prop204"] = InProp204;
    if (GEngine != nullptr)
    {
        UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
        AGCM->GetSimulationConnection()->doCall("org.objectapi.testbed/Interface2", "_set", params);
    }
}

FOrgObjectapiTestbedInterface2Prop204ChangedDelegate& SimulationService::GetProp204ChangedDelegate()
{
    return Prop204Changed;
}

FString SimulationService::GetProp205() const
{
    return Prop205;
}

void SimulationService::SetProp205(const FString& InProp205)
{
    Params params;
    params["prop205"] = InProp205;
    if (GEngine != nullptr)
    {
        UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
        AGCM->GetSimulationConnection()->doCall("org.objectapi.testbed/Interface2", "_set", params);
    }
}

FOrgObjectapiTestbedInterface2Prop205ChangedDelegate& SimulationService::GetProp205ChangedDelegate()
{
    return Prop205Changed;
}


} // namespace Private
} // namespace Interface2
} // namespace OrgObjectapiTestbed
