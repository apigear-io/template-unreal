/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "OrgObjectapiTestbedInterface2OLink.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "apig/OrgObjectapiTestbed.json.adapter.h"
#include "unrealolink.h"
#include "ApiGear/Public/ApiGearConnectionManager.h"
#include "Misc/DateTime.h"


using namespace ApiGear::ObjectLink;

namespace OrgObjectapiTestbed {
namespace Interface2 {
namespace Private {
OLinkService::OLinkService()
    : IOrgObjectapiTestbedInterface2Interface()
    , m_node(nullptr)
    , m_isReady(false)
    , Prop200(0)
    , Prop201(0)
    , Prop202(0)
    , Prop203(0.0f)
    , Prop204(0.0f)
    , Prop205(FString())
{
    if (GEngine != nullptr)
    {
        UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
        AGCM->GetOLinkConnection()->Connect();
        AGCM->GetOLinkConnection()->linkObjectSource(olinkObjectName());
    }
    m_node = ClientRegistry::get().addObjectSink(this);
}

OLinkService::~OLinkService()
{
    ClientRegistry::get().removeObjectSink(this);
    if (GEngine != nullptr)
    {
        UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
        AGCM->GetOLinkConnection()->unlinkObjectSource(olinkObjectName());
    }
    m_isReady = false;
    m_node = nullptr;
}

int32 OLinkService::GetProp200() const
{
    return Prop200;
}

void OLinkService::SetProp200(int32 InProp200)
{
    if(!m_node) {
        return;
    }
    m_node->setRemoteProperty("org.objectapi.testbed.Interface2/prop200", InProp200);
}

FOrgObjectapiTestbedInterface2Prop200ChangedDelegate& OLinkService::GetProp200ChangedDelegate()
{
    return Prop200Changed;
}
int32 OLinkService::GetProp201() const
{
    return Prop201;
}

void OLinkService::SetProp201(int32 InProp201)
{
    if(!m_node) {
        return;
    }
    m_node->setRemoteProperty("org.objectapi.testbed.Interface2/prop201", InProp201);
}

FOrgObjectapiTestbedInterface2Prop201ChangedDelegate& OLinkService::GetProp201ChangedDelegate()
{
    return Prop201Changed;
}
int32 OLinkService::GetProp202() const
{
    return Prop202;
}

void OLinkService::SetProp202(int32 InProp202)
{
    if(!m_node) {
        return;
    }
    m_node->setRemoteProperty("org.objectapi.testbed.Interface2/prop202", InProp202);
}

FOrgObjectapiTestbedInterface2Prop202ChangedDelegate& OLinkService::GetProp202ChangedDelegate()
{
    return Prop202Changed;
}
float OLinkService::GetProp203() const
{
    return Prop203;
}

void OLinkService::SetProp203(float InProp203)
{
    if(!m_node) {
        return;
    }
    m_node->setRemoteProperty("org.objectapi.testbed.Interface2/prop203", InProp203);
}

FOrgObjectapiTestbedInterface2Prop203ChangedDelegate& OLinkService::GetProp203ChangedDelegate()
{
    return Prop203Changed;
}
float OLinkService::GetProp204() const
{
    return Prop204;
}

void OLinkService::SetProp204(float InProp204)
{
    if(!m_node) {
        return;
    }
    m_node->setRemoteProperty("org.objectapi.testbed.Interface2/prop204", InProp204);
}

FOrgObjectapiTestbedInterface2Prop204ChangedDelegate& OLinkService::GetProp204ChangedDelegate()
{
    return Prop204Changed;
}
FString OLinkService::GetProp205() const
{
    return Prop205;
}

void OLinkService::SetProp205(const FString& InProp205)
{
    if(!m_node) {
        return;
    }
    m_node->setRemoteProperty("org.objectapi.testbed.Interface2/prop205", InProp205);
}

FOrgObjectapiTestbedInterface2Prop205ChangedDelegate& OLinkService::GetProp205ChangedDelegate()
{
    return Prop205Changed;
}


void OLinkService::applyState(const nlohmann::json& fields) 
{
    if(fields.contains("prop200")) {
        if(Prop200 != fields["prop200"].get<int32>())
        {
            Prop200 = fields["prop200"].get<int32>();
            Prop200Changed.Broadcast(Prop200);
        }
    }
    if(fields.contains("prop201")) {
        if(Prop201 != fields["prop201"].get<int32>())
        {
            Prop201 = fields["prop201"].get<int32>();
            Prop201Changed.Broadcast(Prop201);
        }
    }
    if(fields.contains("prop202")) {
        if(Prop202 != fields["prop202"].get<int32>())
        {
            Prop202 = fields["prop202"].get<int32>();
            Prop202Changed.Broadcast(Prop202);
        }
    }
    if(fields.contains("prop203")) {
        if(Prop203 != fields["prop203"].get<float>())
        {
            Prop203 = fields["prop203"].get<float>();
            Prop203Changed.Broadcast(Prop203);
        }
    }
    if(fields.contains("prop204")) {
        if(Prop204 != fields["prop204"].get<float>())
        {
            Prop204 = fields["prop204"].get<float>();
            Prop204Changed.Broadcast(Prop204);
        }
    }
    if(fields.contains("prop205")) {
        if(Prop205 != fields["prop205"].get<FString>())
        {
            Prop205 = fields["prop205"].get<FString>();
            Prop205Changed.Broadcast(Prop205);
        }
    }
}

std::string OLinkService::olinkObjectName()
{
    return "org.objectapi.testbed.Interface2";
}

void OLinkService::olinkOnSignal(std::string name, nlohmann::json args)
{
    std::string path = Name::pathFromName(name);
}

void OLinkService::olinkOnPropertyChanged(std::string name, nlohmann::json value)
{
    std::string path = Name::pathFromName(name);
    applyState({ {path, value} });
}

void OLinkService::olinkOnInit(std::string name, nlohmann::json props, IClientNode *node)
{
    m_isReady = true;
    m_node = node;
    applyState(props);
    //call isReady();
}

void OLinkService::olinkOnRelease()
{
    m_isReady = false;
    m_node = nullptr;
}

} // namespace Private
} // namespace Interface2
} // namespace OrgObjectapiTestbed
