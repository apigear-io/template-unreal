/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "OrgObjectapiTestbedInterface2OLink.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "apig/OrgObjectapiTestbed.json.adapter.h"
#include "unrealolink.h"
#include "Misc/DateTime.h"


using namespace ApiGear::ObjectLink;
OrgObjectapiTestbedInterface2OLinkService::OrgObjectapiTestbedInterface2OLinkService()
    : IOrgObjectapiTestbedInterface2Interface()
    , m_node(nullptr)
    , m_isReady(false)
    , Prop200(0)
    , Prop201(0)
    , Prop202(0)
    , Prop203(0.0f)
    , Prop204(0.0f)
    , Prop205(FString())
{
    UnrealOLink::instance()->linkObjectSource(olinkObjectName());
    m_node = ClientRegistry::get().addObjectSink(this);
}

OrgObjectapiTestbedInterface2OLinkService::~OrgObjectapiTestbedInterface2OLinkService()
{
    m_isReady = false;
    m_node = nullptr;
}

int32 OrgObjectapiTestbedInterface2OLinkService::GetProp200() const
{
    return Prop200;
}

void OrgObjectapiTestbedInterface2OLinkService::SetProp200(int32 Value)
{
    if(!m_node) {
        return;
    }
    m_node->setRemoteProperty("org.objectapi.testbed.Interface2/prop200", Value);
}

FProp200ChangedDelegate& OrgObjectapiTestbedInterface2OLinkService::GetProp200ChangedDelegate()
{
    return Prop200Changed;
}
int32 OrgObjectapiTestbedInterface2OLinkService::GetProp201() const
{
    return Prop201;
}

void OrgObjectapiTestbedInterface2OLinkService::SetProp201(int32 Value)
{
    if(!m_node) {
        return;
    }
    m_node->setRemoteProperty("org.objectapi.testbed.Interface2/prop201", Value);
}

FProp201ChangedDelegate& OrgObjectapiTestbedInterface2OLinkService::GetProp201ChangedDelegate()
{
    return Prop201Changed;
}
int32 OrgObjectapiTestbedInterface2OLinkService::GetProp202() const
{
    return Prop202;
}

void OrgObjectapiTestbedInterface2OLinkService::SetProp202(int32 Value)
{
    if(!m_node) {
        return;
    }
    m_node->setRemoteProperty("org.objectapi.testbed.Interface2/prop202", Value);
}

FProp202ChangedDelegate& OrgObjectapiTestbedInterface2OLinkService::GetProp202ChangedDelegate()
{
    return Prop202Changed;
}
float OrgObjectapiTestbedInterface2OLinkService::GetProp203() const
{
    return Prop203;
}

void OrgObjectapiTestbedInterface2OLinkService::SetProp203(float Value)
{
    if(!m_node) {
        return;
    }
    m_node->setRemoteProperty("org.objectapi.testbed.Interface2/prop203", Value);
}

FProp203ChangedDelegate& OrgObjectapiTestbedInterface2OLinkService::GetProp203ChangedDelegate()
{
    return Prop203Changed;
}
float OrgObjectapiTestbedInterface2OLinkService::GetProp204() const
{
    return Prop204;
}

void OrgObjectapiTestbedInterface2OLinkService::SetProp204(float Value)
{
    if(!m_node) {
        return;
    }
    m_node->setRemoteProperty("org.objectapi.testbed.Interface2/prop204", Value);
}

FProp204ChangedDelegate& OrgObjectapiTestbedInterface2OLinkService::GetProp204ChangedDelegate()
{
    return Prop204Changed;
}
FString OrgObjectapiTestbedInterface2OLinkService::GetProp205() const
{
    return Prop205;
}

void OrgObjectapiTestbedInterface2OLinkService::SetProp205(FString Value)
{
    if(!m_node) {
        return;
    }
    m_node->setRemoteProperty("org.objectapi.testbed.Interface2/prop205", Value);
}

FProp205ChangedDelegate& OrgObjectapiTestbedInterface2OLinkService::GetProp205ChangedDelegate()
{
    return Prop205Changed;
}


void OrgObjectapiTestbedInterface2OLinkService::applyState(const nlohmann::json& fields) 
{
    if(fields.contains("prop200")) {
        if(Prop200 != fields["prop200"].get<int32>())
        {
            Prop200 = fields["prop200"].get<int32>();
            Prop200Changed.Broadcast(Prop200);
        }
    }
    if(fields.contains("prop201")) {
        if(Prop201 != fields["prop201"].get<int32>())
        {
            Prop201 = fields["prop201"].get<int32>();
            Prop201Changed.Broadcast(Prop201);
        }
    }
    if(fields.contains("prop202")) {
        if(Prop202 != fields["prop202"].get<int32>())
        {
            Prop202 = fields["prop202"].get<int32>();
            Prop202Changed.Broadcast(Prop202);
        }
    }
    if(fields.contains("prop203")) {
        if(Prop203 != fields["prop203"].get<float>())
        {
            Prop203 = fields["prop203"].get<float>();
            Prop203Changed.Broadcast(Prop203);
        }
    }
    if(fields.contains("prop204")) {
        if(Prop204 != fields["prop204"].get<float>())
        {
            Prop204 = fields["prop204"].get<float>();
            Prop204Changed.Broadcast(Prop204);
        }
    }
    if(fields.contains("prop205")) {
        if(Prop205 != fields["prop205"].get<FString>())
        {
            Prop205 = fields["prop205"].get<FString>();
            Prop205Changed.Broadcast(Prop205);
        }
    }
}

std::string OrgObjectapiTestbedInterface2OLinkService::olinkObjectName()
{
    return "org.objectapi.testbed.Interface2";
}

void OrgObjectapiTestbedInterface2OLinkService::olinkOnSignal(std::string name, nlohmann::json args)
{
    std::string path = Name::pathFromName(name);
}

void OrgObjectapiTestbedInterface2OLinkService::olinkOnPropertyChanged(std::string name, nlohmann::json value)
{
    std::string path = Name::pathFromName(name);
    applyState({ {path, value} });
}

void OrgObjectapiTestbedInterface2OLinkService::olinkOnInit(std::string name, nlohmann::json props, IClientNode *node)
{
    m_isReady = true;
    m_node = node;
    applyState(props);
    //call isReady();
}

void OrgObjectapiTestbedInterface2OLinkService::olinkOnRelease()
{
    m_isReady = false;
    m_node = nullptr;
}
