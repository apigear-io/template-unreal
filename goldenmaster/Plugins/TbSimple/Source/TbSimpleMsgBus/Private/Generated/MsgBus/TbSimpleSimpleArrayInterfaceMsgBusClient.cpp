/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbSimple/Generated/MsgBus/TbSimpleSimpleArrayInterfaceMsgBusClient.h"
#include "TbSimple/Generated/MsgBus/TbSimpleSimpleArrayInterfaceMsgBusMessages.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "TimerManager.h"
#include "Misc/DateTime.h"
#include "GenericPlatform/GenericPlatformMath.h"
#include "GenericPlatform/GenericPlatformTime.h"
#include "MessageEndpointBuilder.h"
#include "MessageEndpoint.h"
#include "HAL/CriticalSection.h"

/**
   \brief data structure to hold the last sent property values
*/
struct TbSimpleSimpleArrayInterfacePropertiesMsgBusData
{
	FCriticalSection PropBoolMutex;
	TArray<bool> PropBool{TArray<bool>()};
	FCriticalSection PropIntMutex;
	TArray<int32> PropInt{TArray<int32>()};
	FCriticalSection PropInt32Mutex;
	TArray<int32> PropInt32{TArray<int32>()};
	FCriticalSection PropInt64Mutex;
	TArray<int64> PropInt64{TArray<int64>()};
	FCriticalSection PropFloatMutex;
	TArray<float> PropFloat{TArray<float>()};
	FCriticalSection PropFloat32Mutex;
	TArray<float> PropFloat32{TArray<float>()};
	FCriticalSection PropFloat64Mutex;
	TArray<double> PropFloat64{TArray<double>()};
	FCriticalSection PropStringMutex;
	TArray<FString> PropString{TArray<FString>()};
	FCriticalSection PropReadOnlyStringMutex;
	FString PropReadOnlyString{FString()};
};
DEFINE_LOG_CATEGORY(LogTbSimpleSimpleArrayInterfaceMsgBusClient);

UTbSimpleSimpleArrayInterfaceMsgBusClient::UTbSimpleSimpleArrayInterfaceMsgBusClient()
	: UAbstractTbSimpleSimpleArrayInterface()
	, _SentData(MakePimpl<TbSimpleSimpleArrayInterfacePropertiesMsgBusData>())
{
	PingRTTBuffer.SetNumZeroed(PING_RTT_BUFFER_SIZE);
}

UTbSimpleSimpleArrayInterfaceMsgBusClient::~UTbSimpleSimpleArrayInterfaceMsgBusClient() = default;

void UTbSimpleSimpleArrayInterfaceMsgBusClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::Deinitialize()
{
	_Disconnect();

	Super::Deinitialize();
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::_Connect()
{
	if (!_HeartbeatTimerHandle.IsValid() && GetWorld())
	{
		GetWorld()->GetTimerManager().SetTimer(_HeartbeatTimerHandle, this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::_OnHeartbeat, _HeartbeatIntervalMS / 1000.0f, true);
	}

	if (_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Log, TEXT("Already connected, cannot connect again."));
		return;
	}

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && !ServiceAddress.IsValid())
	{
		_DiscoverService();
		return;
	}

	// clang-format off
	TbSimpleSimpleArrayInterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSimple/SimpleArrayInterface/Client")
		.Handling<FTbSimpleSimpleArrayInterfaceInitMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnConnectionInit)
		.Handling<FTbSimpleSimpleArrayInterfacePongMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPong)
		.Handling<FTbSimpleSimpleArrayInterfaceServiceDisconnectMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnServiceClosedConnection)
		.Handling<FTbSimpleSimpleArrayInterfaceSigBoolSignalMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigBool)
		.Handling<FTbSimpleSimpleArrayInterfaceSigIntSignalMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigInt)
		.Handling<FTbSimpleSimpleArrayInterfaceSigInt32SignalMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigInt32)
		.Handling<FTbSimpleSimpleArrayInterfaceSigInt64SignalMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigInt64)
		.Handling<FTbSimpleSimpleArrayInterfaceSigFloatSignalMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigFloat)
		.Handling<FTbSimpleSimpleArrayInterfaceSigFloat32SignalMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigFloat32)
		.Handling<FTbSimpleSimpleArrayInterfaceSigFloat64SignalMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigFloat64)
		.Handling<FTbSimpleSimpleArrayInterfaceSigStringSignalMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigString)
		.Handling<FTbSimpleSimpleArrayInterfacePropBoolChangedMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropBoolChanged)
		.Handling<FTbSimpleSimpleArrayInterfacePropIntChangedMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropIntChanged)
		.Handling<FTbSimpleSimpleArrayInterfacePropInt32ChangedMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropInt32Changed)
		.Handling<FTbSimpleSimpleArrayInterfacePropInt64ChangedMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropInt64Changed)
		.Handling<FTbSimpleSimpleArrayInterfacePropFloatChangedMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropFloatChanged)
		.Handling<FTbSimpleSimpleArrayInterfacePropFloat32ChangedMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropFloat32Changed)
		.Handling<FTbSimpleSimpleArrayInterfacePropFloat64ChangedMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropFloat64Changed)
		.Handling<FTbSimpleSimpleArrayInterfacePropStringChangedMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropStringChanged)
		.Handling<FTbSimpleSimpleArrayInterfacePropReadOnlyStringChangedMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropReadOnlyStringChanged)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncBoolReplyMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncBoolReply)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncIntReplyMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncIntReply)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncInt32ReplyMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncInt32Reply)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncInt64ReplyMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncInt64Reply)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncFloatReplyMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncFloatReply)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncFloat32ReplyMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncFloat32Reply)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncFloat64ReplyMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncFloat64Reply)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncStringReplyMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncStringReply)
		.Build();
	// clang-format on

	_DiscoverService();
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::_Disconnect()
{
	_LastHbTimestamp = 0.0f;
	if (_HeartbeatTimerHandle.IsValid() && GetWorld())
	{
		GetWorld()->GetTimerManager().ClearTimer(_HeartbeatTimerHandle);
	}

	if (!_IsConnected())
	{
		return;
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceClientDisconnectMessage();

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceClientDisconnectMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint.Reset();
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
	_ConnectionStatusChangedBP.Broadcast(false);
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::_DiscoverService()
{
	if (!TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceDiscoveryMessage();
	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Publish<FTbSimpleSimpleArrayInterfaceDiscoveryMessage>(msg);
}

bool UTbSimpleSimpleArrayInterfaceMsgBusClient::_IsConnected() const
{
	return TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && ServiceAddress.IsValid();
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnConnectionInit(const FTbSimpleSimpleArrayInterfaceInitMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress.IsValid())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Warning, TEXT("Got a second init message - should not happen"));
		return;
	}

	ServiceAddress = Context->GetSender();
	// reset ping stats for a new connection
	PingRTTBuffer.Empty();
	PingRTTBuffer.SetNumZeroed(PING_RTT_BUFFER_SIZE);
	CurrentPingCounter = 0;
	Stats.CurrentRTT_MS = 0.0f;
	Stats.AverageRTT_MS = 0.0f;
	Stats.MaxRTT_MS = 0.0f;
	Stats.MinRTT_MS = 10000.0f;

	const bool b_ClientPingIntervalMSChanged = InMessage._ClientPingIntervalMS != _HeartbeatIntervalMS;
	if (b_ClientPingIntervalMSChanged)
	{
		_HeartbeatIntervalMS = InMessage._ClientPingIntervalMS;

		if (_HeartbeatTimerHandle.IsValid() && GetWorld())
		{
			GetWorld()->GetTimerManager().ClearTimer(_HeartbeatTimerHandle);
		}

		if (!_HeartbeatTimerHandle.IsValid() && GetWorld())
		{
			GetWorld()->GetTimerManager().SetTimer(_HeartbeatTimerHandle, this, &UTbSimpleSimpleArrayInterfaceMsgBusClient::_OnHeartbeat, _HeartbeatIntervalMS / 1000.0f, true);
		}
	}
	const bool bPropBoolChanged = InMessage.PropBool != PropBool;
	if (bPropBoolChanged)
	{
		PropBool = InMessage.PropBool;
		_GetSignals()->BroadcastPropBoolChanged(PropBool);
	}

	const bool bPropIntChanged = InMessage.PropInt != PropInt;
	if (bPropIntChanged)
	{
		PropInt = InMessage.PropInt;
		_GetSignals()->BroadcastPropIntChanged(PropInt);
	}

	const bool bPropInt32Changed = InMessage.PropInt32 != PropInt32;
	if (bPropInt32Changed)
	{
		PropInt32 = InMessage.PropInt32;
		_GetSignals()->BroadcastPropInt32Changed(PropInt32);
	}

	const bool bPropInt64Changed = InMessage.PropInt64 != PropInt64;
	if (bPropInt64Changed)
	{
		PropInt64 = InMessage.PropInt64;
		_GetSignals()->BroadcastPropInt64Changed(PropInt64);
	}

	const bool bPropFloatChanged = InMessage.PropFloat != PropFloat;
	if (bPropFloatChanged)
	{
		PropFloat = InMessage.PropFloat;
		_GetSignals()->BroadcastPropFloatChanged(PropFloat);
	}

	const bool bPropFloat32Changed = InMessage.PropFloat32 != PropFloat32;
	if (bPropFloat32Changed)
	{
		PropFloat32 = InMessage.PropFloat32;
		_GetSignals()->BroadcastPropFloat32Changed(PropFloat32);
	}

	const bool bPropFloat64Changed = InMessage.PropFloat64 != PropFloat64;
	if (bPropFloat64Changed)
	{
		PropFloat64 = InMessage.PropFloat64;
		_GetSignals()->BroadcastPropFloat64Changed(PropFloat64);
	}

	const bool bPropStringChanged = InMessage.PropString != PropString;
	if (bPropStringChanged)
	{
		PropString = InMessage.PropString;
		_GetSignals()->BroadcastPropStringChanged(PropString);
	}

	const bool bPropReadOnlyStringChanged = InMessage.PropReadOnlyString != PropReadOnlyString;
	if (bPropReadOnlyStringChanged)
	{
		PropReadOnlyString = InMessage.PropReadOnlyString;
		_GetSignals()->BroadcastPropReadOnlyStringChanged(PropReadOnlyString);
	}

	_ConnectionStatusChanged.Broadcast(true);
	_ConnectionStatusChangedBP.Broadcast(true);
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::_OnHeartbeat()
{
	if (_LastHbTimestamp > 0.1f)
	{
		double Delta = (FPlatformTime::Seconds() - _LastHbTimestamp) * 1000;

		if (Delta > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			ServiceAddress.Invalidate();
			_LastHbTimestamp = 0.0f;
		}
	}

	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Warning, TEXT("Heartbeat failed. Client has no connection to service. Reconnecting ..."));

		_Connect();
		return;
	}

	auto msg = new FTbSimpleSimpleArrayInterfacePingMessage();
	msg->Timestamp = FPlatformTime::Seconds();

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfacePingMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
}

float UTbSimpleSimpleArrayInterfaceMsgBusClient::_CalculateAverageRTT() const
{
	if (CurrentPingCounter == 0)
	{
		return 0.0f;
	}

	float TotalRTT = 0.0f;

	for (const float& RTT : PingRTTBuffer)
	{
		TotalRTT += RTT;
	}

	return CurrentPingCounter > 0 ? TotalRTT / CurrentPingCounter : 0.0f;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPong(const FTbSimpleSimpleArrayInterfacePongMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	_LastHbTimestamp = InMessage.Timestamp;

	const double Current = FPlatformTime::Seconds();
	const double DeltaMS = (Current - InMessage.Timestamp) * 1000.0f;

	Stats.CurrentRTT_MS = DeltaMS;
	if (CurrentPingCounter < PING_RTT_BUFFER_SIZE)
	{
		CurrentPingCounter++;
	}
	PingRTTBuffer.RemoveAt(0);
	PingRTTBuffer.Add(Stats.CurrentRTT_MS);
	Stats.AverageRTT_MS = _CalculateAverageRTT();
	Stats.MaxRTT_MS = FGenericPlatformMath::Max(Stats.MaxRTT_MS, Stats.CurrentRTT_MS);
	Stats.MinRTT_MS = FGenericPlatformMath::Min(Stats.MinRTT_MS, Stats.CurrentRTT_MS);

	_StatsUpdated.Broadcast(Stats);
}

const FTbSimpleSimpleArrayInterfaceStats& UTbSimpleSimpleArrayInterfaceMsgBusClient::_GetStats() const
{
	return Stats;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnServiceClosedConnection(const FTbSimpleSimpleArrayInterfaceServiceDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		return;
	}

	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
	_ConnectionStatusChangedBP.Broadcast(false);
}

TArray<bool> UTbSimpleSimpleArrayInterfaceMsgBusClient::GetPropBool() const
{
	return PropBool;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::SetPropBool(const TArray<bool>& InPropBool)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropBool() == InPropBool)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->PropBoolMutex));
		if (_SentData->PropBool == InPropBool)
		{
			return;
		}
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceSetPropBoolRequestMessage();
	msg->PropBool = InPropBool;

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSetPropBoolRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	FScopeLock Lock(&(_SentData->PropBoolMutex));
	_SentData->PropBool = InPropBool;
}

TArray<int32> UTbSimpleSimpleArrayInterfaceMsgBusClient::GetPropInt() const
{
	return PropInt;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::SetPropInt(const TArray<int32>& InPropInt)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropInt() == InPropInt)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->PropIntMutex));
		if (_SentData->PropInt == InPropInt)
		{
			return;
		}
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceSetPropIntRequestMessage();
	msg->PropInt = InPropInt;

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSetPropIntRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	FScopeLock Lock(&(_SentData->PropIntMutex));
	_SentData->PropInt = InPropInt;
}

TArray<int32> UTbSimpleSimpleArrayInterfaceMsgBusClient::GetPropInt32() const
{
	return PropInt32;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::SetPropInt32(const TArray<int32>& InPropInt32)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropInt32() == InPropInt32)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->PropInt32Mutex));
		if (_SentData->PropInt32 == InPropInt32)
		{
			return;
		}
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceSetPropInt32RequestMessage();
	msg->PropInt32 = InPropInt32;

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSetPropInt32RequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	FScopeLock Lock(&(_SentData->PropInt32Mutex));
	_SentData->PropInt32 = InPropInt32;
}

TArray<int64> UTbSimpleSimpleArrayInterfaceMsgBusClient::GetPropInt64() const
{
	return PropInt64;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::SetPropInt64(const TArray<int64>& InPropInt64)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropInt64() == InPropInt64)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->PropInt64Mutex));
		if (_SentData->PropInt64 == InPropInt64)
		{
			return;
		}
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceSetPropInt64RequestMessage();
	msg->PropInt64 = InPropInt64;

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSetPropInt64RequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	FScopeLock Lock(&(_SentData->PropInt64Mutex));
	_SentData->PropInt64 = InPropInt64;
}

TArray<float> UTbSimpleSimpleArrayInterfaceMsgBusClient::GetPropFloat() const
{
	return PropFloat;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::SetPropFloat(const TArray<float>& InPropFloat)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropFloat() == InPropFloat)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->PropFloatMutex));
		if (_SentData->PropFloat == InPropFloat)
		{
			return;
		}
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceSetPropFloatRequestMessage();
	msg->PropFloat = InPropFloat;

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSetPropFloatRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	FScopeLock Lock(&(_SentData->PropFloatMutex));
	_SentData->PropFloat = InPropFloat;
}

TArray<float> UTbSimpleSimpleArrayInterfaceMsgBusClient::GetPropFloat32() const
{
	return PropFloat32;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::SetPropFloat32(const TArray<float>& InPropFloat32)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropFloat32() == InPropFloat32)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->PropFloat32Mutex));
		if (_SentData->PropFloat32 == InPropFloat32)
		{
			return;
		}
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceSetPropFloat32RequestMessage();
	msg->PropFloat32 = InPropFloat32;

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSetPropFloat32RequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	FScopeLock Lock(&(_SentData->PropFloat32Mutex));
	_SentData->PropFloat32 = InPropFloat32;
}

TArray<double> UTbSimpleSimpleArrayInterfaceMsgBusClient::GetPropFloat64() const
{
	return PropFloat64;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::SetPropFloat64(const TArray<double>& InPropFloat64)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropFloat64() == InPropFloat64)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->PropFloat64Mutex));
		if (_SentData->PropFloat64 == InPropFloat64)
		{
			return;
		}
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceSetPropFloat64RequestMessage();
	msg->PropFloat64 = InPropFloat64;

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSetPropFloat64RequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	FScopeLock Lock(&(_SentData->PropFloat64Mutex));
	_SentData->PropFloat64 = InPropFloat64;
}

TArray<FString> UTbSimpleSimpleArrayInterfaceMsgBusClient::GetPropString() const
{
	return PropString;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::SetPropString(const TArray<FString>& InPropString)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropString() == InPropString)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->PropStringMutex));
		if (_SentData->PropString == InPropString)
		{
			return;
		}
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceSetPropStringRequestMessage();
	msg->PropString = InPropString;

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSetPropStringRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	FScopeLock Lock(&(_SentData->PropStringMutex));
	_SentData->PropString = InPropString;
}

FString UTbSimpleSimpleArrayInterfaceMsgBusClient::GetPropReadOnlyString() const
{
	return PropReadOnlyString;
}

TArray<bool> UTbSimpleSimpleArrayInterfaceMsgBusClient::FuncBool(const TArray<bool>& InParamBool)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return TArray<bool>();
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceFuncBoolRequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->ParamBool = InParamBool;
	TPromise<TArray<bool>> Promise;
	StorePromise(msg->ResponseId, Promise);

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncBoolRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncBoolReply(const FTbSimpleSimpleArrayInterfaceFuncBoolReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

TArray<int32> UTbSimpleSimpleArrayInterfaceMsgBusClient::FuncInt(const TArray<int32>& InParamInt)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return TArray<int32>();
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceFuncIntRequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->ParamInt = InParamInt;
	TPromise<TArray<int32>> Promise;
	StorePromise(msg->ResponseId, Promise);

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncIntRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncIntReply(const FTbSimpleSimpleArrayInterfaceFuncIntReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

TArray<int32> UTbSimpleSimpleArrayInterfaceMsgBusClient::FuncInt32(const TArray<int32>& InParamInt32)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return TArray<int32>();
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceFuncInt32RequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->ParamInt32 = InParamInt32;
	TPromise<TArray<int32>> Promise;
	StorePromise(msg->ResponseId, Promise);

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncInt32RequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncInt32Reply(const FTbSimpleSimpleArrayInterfaceFuncInt32ReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

TArray<int64> UTbSimpleSimpleArrayInterfaceMsgBusClient::FuncInt64(const TArray<int64>& InParamInt64)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return TArray<int64>();
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceFuncInt64RequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->ParamInt64 = InParamInt64;
	TPromise<TArray<int64>> Promise;
	StorePromise(msg->ResponseId, Promise);

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncInt64RequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncInt64Reply(const FTbSimpleSimpleArrayInterfaceFuncInt64ReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

TArray<float> UTbSimpleSimpleArrayInterfaceMsgBusClient::FuncFloat(const TArray<float>& InParamFloat)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return TArray<float>();
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceFuncFloatRequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->ParamFloat = InParamFloat;
	TPromise<TArray<float>> Promise;
	StorePromise(msg->ResponseId, Promise);

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncFloatRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncFloatReply(const FTbSimpleSimpleArrayInterfaceFuncFloatReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

TArray<float> UTbSimpleSimpleArrayInterfaceMsgBusClient::FuncFloat32(const TArray<float>& InParamFloat32)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return TArray<float>();
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceFuncFloat32RequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->ParamFloat32 = InParamFloat32;
	TPromise<TArray<float>> Promise;
	StorePromise(msg->ResponseId, Promise);

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncFloat32RequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncFloat32Reply(const FTbSimpleSimpleArrayInterfaceFuncFloat32ReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

TArray<double> UTbSimpleSimpleArrayInterfaceMsgBusClient::FuncFloat64(const TArray<double>& InParamFloat)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return TArray<double>();
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceFuncFloat64RequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->ParamFloat = InParamFloat;
	TPromise<TArray<double>> Promise;
	StorePromise(msg->ResponseId, Promise);

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncFloat64RequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncFloat64Reply(const FTbSimpleSimpleArrayInterfaceFuncFloat64ReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

TArray<FString> UTbSimpleSimpleArrayInterfaceMsgBusClient::FuncString(const TArray<FString>& InParamString)
{
	if (!_IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return TArray<FString>();
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceFuncStringRequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->ParamString = InParamString;
	TPromise<TArray<FString>> Promise;
	StorePromise(msg->ResponseId, Promise);

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncStringRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnFuncStringReply(const FTbSimpleSimpleArrayInterfaceFuncStringReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigBool(const FTbSimpleSimpleArrayInterfaceSigBoolSignalMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	_GetSignals()->BroadcastSigBoolSignal(InMessage.ParamBool);
	return;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigInt(const FTbSimpleSimpleArrayInterfaceSigIntSignalMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	_GetSignals()->BroadcastSigIntSignal(InMessage.ParamInt);
	return;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigInt32(const FTbSimpleSimpleArrayInterfaceSigInt32SignalMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	_GetSignals()->BroadcastSigInt32Signal(InMessage.ParamInt32);
	return;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigInt64(const FTbSimpleSimpleArrayInterfaceSigInt64SignalMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	_GetSignals()->BroadcastSigInt64Signal(InMessage.ParamInt64);
	return;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigFloat(const FTbSimpleSimpleArrayInterfaceSigFloatSignalMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	_GetSignals()->BroadcastSigFloatSignal(InMessage.ParamFloat);
	return;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigFloat32(const FTbSimpleSimpleArrayInterfaceSigFloat32SignalMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	_GetSignals()->BroadcastSigFloat32Signal(InMessage.ParamFloa32);
	return;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigFloat64(const FTbSimpleSimpleArrayInterfaceSigFloat64SignalMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	_GetSignals()->BroadcastSigFloat64Signal(InMessage.ParamFloat64);
	return;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnSigString(const FTbSimpleSimpleArrayInterfaceSigStringSignalMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	_GetSignals()->BroadcastSigStringSignal(InMessage.ParamString);
	return;
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropBoolChanged(const FTbSimpleSimpleArrayInterfacePropBoolChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropBoolChanged = InMessage.PropBool != PropBool;
	if (bPropBoolChanged)
	{
		PropBool = InMessage.PropBool;
		_GetSignals()->BroadcastPropBoolChanged(PropBool);
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropIntChanged(const FTbSimpleSimpleArrayInterfacePropIntChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropIntChanged = InMessage.PropInt != PropInt;
	if (bPropIntChanged)
	{
		PropInt = InMessage.PropInt;
		_GetSignals()->BroadcastPropIntChanged(PropInt);
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropInt32Changed(const FTbSimpleSimpleArrayInterfacePropInt32ChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropInt32Changed = InMessage.PropInt32 != PropInt32;
	if (bPropInt32Changed)
	{
		PropInt32 = InMessage.PropInt32;
		_GetSignals()->BroadcastPropInt32Changed(PropInt32);
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropInt64Changed(const FTbSimpleSimpleArrayInterfacePropInt64ChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropInt64Changed = InMessage.PropInt64 != PropInt64;
	if (bPropInt64Changed)
	{
		PropInt64 = InMessage.PropInt64;
		_GetSignals()->BroadcastPropInt64Changed(PropInt64);
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropFloatChanged(const FTbSimpleSimpleArrayInterfacePropFloatChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropFloatChanged = InMessage.PropFloat != PropFloat;
	if (bPropFloatChanged)
	{
		PropFloat = InMessage.PropFloat;
		_GetSignals()->BroadcastPropFloatChanged(PropFloat);
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropFloat32Changed(const FTbSimpleSimpleArrayInterfacePropFloat32ChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropFloat32Changed = InMessage.PropFloat32 != PropFloat32;
	if (bPropFloat32Changed)
	{
		PropFloat32 = InMessage.PropFloat32;
		_GetSignals()->BroadcastPropFloat32Changed(PropFloat32);
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropFloat64Changed(const FTbSimpleSimpleArrayInterfacePropFloat64ChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropFloat64Changed = InMessage.PropFloat64 != PropFloat64;
	if (bPropFloat64Changed)
	{
		PropFloat64 = InMessage.PropFloat64;
		_GetSignals()->BroadcastPropFloat64Changed(PropFloat64);
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropStringChanged(const FTbSimpleSimpleArrayInterfacePropStringChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropStringChanged = InMessage.PropString != PropString;
	if (bPropStringChanged)
	{
		PropString = InMessage.PropString;
		_GetSignals()->BroadcastPropStringChanged(PropString);
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusClient::OnPropReadOnlyStringChanged(const FTbSimpleSimpleArrayInterfacePropReadOnlyStringChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleArrayInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropReadOnlyStringChanged = InMessage.PropReadOnlyString != PropReadOnlyString;
	if (bPropReadOnlyStringChanged)
	{
		PropReadOnlyString = InMessage.PropReadOnlyString;
		_GetSignals()->BroadcastPropReadOnlyStringChanged(PropReadOnlyString);
	}
}

template <typename ResultType>
bool UTbSimpleSimpleArrayInterfaceMsgBusClient::StorePromise(const FGuid& Id, TPromise<ResultType>& Promise)
{
	FScopeLock Lock(&ReplyPromisesMapCS);
	return ReplyPromisesMap.Add(Id, &Promise) != nullptr;
}

template <typename ResultType>
bool UTbSimpleSimpleArrayInterfaceMsgBusClient::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
	TPromise<ResultType>* PromisePtr = nullptr;

	{
		FScopeLock Lock(&ReplyPromisesMapCS);
		if (auto** Found = ReplyPromisesMap.Find(Id))
		{
			PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
			ReplyPromisesMap.Remove(Id);
		}
	}

	if (PromisePtr)
	{
		PromisePtr->SetValue(Value);
		return true;
	}
	return false;
}

template bool UTbSimpleSimpleArrayInterfaceMsgBusClient::StorePromise<TArray<FString>>(const FGuid& Id, TPromise<TArray<FString>>& Promise);
template bool UTbSimpleSimpleArrayInterfaceMsgBusClient::FulfillPromise<TArray<FString>>(const FGuid& Id, const TArray<FString>& Value);
template bool UTbSimpleSimpleArrayInterfaceMsgBusClient::StorePromise<TArray<bool>>(const FGuid& Id, TPromise<TArray<bool>>& Promise);
template bool UTbSimpleSimpleArrayInterfaceMsgBusClient::FulfillPromise<TArray<bool>>(const FGuid& Id, const TArray<bool>& Value);
template bool UTbSimpleSimpleArrayInterfaceMsgBusClient::StorePromise<TArray<double>>(const FGuid& Id, TPromise<TArray<double>>& Promise);
template bool UTbSimpleSimpleArrayInterfaceMsgBusClient::FulfillPromise<TArray<double>>(const FGuid& Id, const TArray<double>& Value);
template bool UTbSimpleSimpleArrayInterfaceMsgBusClient::StorePromise<TArray<float>>(const FGuid& Id, TPromise<TArray<float>>& Promise);
template bool UTbSimpleSimpleArrayInterfaceMsgBusClient::FulfillPromise<TArray<float>>(const FGuid& Id, const TArray<float>& Value);
template bool UTbSimpleSimpleArrayInterfaceMsgBusClient::StorePromise<TArray<int32>>(const FGuid& Id, TPromise<TArray<int32>>& Promise);
template bool UTbSimpleSimpleArrayInterfaceMsgBusClient::FulfillPromise<TArray<int32>>(const FGuid& Id, const TArray<int32>& Value);
template bool UTbSimpleSimpleArrayInterfaceMsgBusClient::StorePromise<TArray<int64>>(const FGuid& Id, TPromise<TArray<int64>>& Promise);
template bool UTbSimpleSimpleArrayInterfaceMsgBusClient::FulfillPromise<TArray<int64>>(const FGuid& Id, const TArray<int64>& Value);
