/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbSimple/Generated/MsgBus/TbSimpleSimpleArrayInterfaceMsgBusAdapter.h"
#include "TbSimple/Generated/MsgBus/TbSimpleSimpleArrayInterfaceMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "TimerManager.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
UTbSimpleSimpleArrayInterfaceMsgBusAdapter::UTbSimpleSimpleArrayInterfaceMsgBusAdapter()
{
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTimerHandle.IsValid() && GetWorld())
	{
		GetWorld()->GetTimerManager().SetTimer(_HeartbeatTimerHandle, this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::_CheckClientTimeouts, _HeartbeatIntervalMS / 1000.0f, true);
	}

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	TbSimpleSimpleArrayInterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSimple/SimpleArrayInterface/Service")
		.Handling<FTbSimpleSimpleArrayInterfaceDiscoveryMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnNewClientDiscovered)
		.Handling<FTbSimpleSimpleArrayInterfacePingMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPing)
		.Handling<FTbSimpleSimpleArrayInterfaceClientDisconnectMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnClientDisconnected)
		.Handling<FTbSimpleSimpleArrayInterfaceSetPropBoolRequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropBoolRequest)
		.Handling<FTbSimpleSimpleArrayInterfaceSetPropIntRequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropIntRequest)
		.Handling<FTbSimpleSimpleArrayInterfaceSetPropInt32RequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropInt32Request)
		.Handling<FTbSimpleSimpleArrayInterfaceSetPropInt64RequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropInt64Request)
		.Handling<FTbSimpleSimpleArrayInterfaceSetPropFloatRequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropFloatRequest)
		.Handling<FTbSimpleSimpleArrayInterfaceSetPropFloat32RequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropFloat32Request)
		.Handling<FTbSimpleSimpleArrayInterfaceSetPropFloat64RequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropFloat64Request)
		.Handling<FTbSimpleSimpleArrayInterfaceSetPropStringRequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropStringRequest)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncBoolRequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncBoolRequest)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncIntRequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncIntRequest)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncInt32RequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncInt32Request)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncInt64RequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncInt64Request)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncFloatRequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncFloatRequest)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncFloat32RequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncFloat32Request)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncFloat64RequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncFloat64Request)
		.Handling<FTbSimpleSimpleArrayInterfaceFuncStringRequestMessage>(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncStringRequest)
		.Build();
	// clang-format on

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Subscribe<FTbSimpleSimpleArrayInterfaceDiscoveryMessage>();
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTimerHandle.IsValid() && GetWorld())
	{
		GetWorld()->GetTimerManager().ClearTimer(_HeartbeatTimerHandle);
	}

	auto msg = new FTbSimpleSimpleArrayInterfaceServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbSimpleSimpleArrayInterfaceMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTbSimpleSimpleArrayInterfaceMsgBusAdapter::_IsListening() const
{
	return TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid();
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::_setBackendService(TScriptInterface<ITbSimpleSimpleArrayInterfaceInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbSimpleSimpleArrayInterfaceSignals* BackendSignals = BackendService->_GetSignals();
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service TbSimpleSimpleArrayInterface"));
		BackendSignals->OnPropBoolChangedBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropBoolChanged);
		BackendSignals->OnPropIntChangedBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropIntChanged);
		BackendSignals->OnPropInt32ChangedBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropInt32Changed);
		BackendSignals->OnPropInt64ChangedBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropInt64Changed);
		BackendSignals->OnPropFloatChangedBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropFloatChanged);
		BackendSignals->OnPropFloat32ChangedBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropFloat32Changed);
		BackendSignals->OnPropFloat64ChangedBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropFloat64Changed);
		BackendSignals->OnPropStringChangedBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropStringChanged);
		BackendSignals->OnPropReadOnlyStringChangedBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropReadOnlyStringChanged);
		BackendSignals->OnSigBoolSignalBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigBool);
		BackendSignals->OnSigIntSignalBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigInt);
		BackendSignals->OnSigInt32SignalBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigInt32);
		BackendSignals->OnSigInt64SignalBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigInt64);
		BackendSignals->OnSigFloatSignalBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigFloat);
		BackendSignals->OnSigFloat32SignalBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigFloat32);
		BackendSignals->OnSigFloat64SignalBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigFloat64);
		BackendSignals->OnSigStringSignalBP.RemoveDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigString);
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbSimpleSimpleArrayInterface is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbSimpleSimpleArrayInterfaceSignals* BackendSignals = BackendService->_GetSignals();
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service TbSimpleSimpleArrayInterface"));
	// connect property changed signals or simple events
	BackendSignals->OnPropBoolChangedBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropBoolChanged);
	BackendSignals->OnPropIntChangedBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropIntChanged);
	BackendSignals->OnPropInt32ChangedBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropInt32Changed);
	BackendSignals->OnPropInt64ChangedBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropInt64Changed);
	BackendSignals->OnPropFloatChangedBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropFloatChanged);
	BackendSignals->OnPropFloat32ChangedBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropFloat32Changed);
	BackendSignals->OnPropFloat64ChangedBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropFloat64Changed);
	BackendSignals->OnPropStringChangedBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropStringChanged);
	BackendSignals->OnPropReadOnlyStringChangedBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropReadOnlyStringChanged);
	BackendSignals->OnSigBoolSignalBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigBool);
	BackendSignals->OnSigIntSignalBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigInt);
	BackendSignals->OnSigInt32SignalBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigInt32);
	BackendSignals->OnSigInt64SignalBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigInt64);
	BackendSignals->OnSigFloatSignalBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigFloat);
	BackendSignals->OnSigFloat32SignalBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigFloat32);
	BackendSignals->OnSigFloat64SignalBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigFloat64);
	BackendSignals->OnSigStringSignalBP.AddDynamic(this, &UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigString);
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnNewClientDiscovered(const FTbSimpleSimpleArrayInterfaceDiscoveryMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTbSimpleSimpleArrayInterfaceInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;
	msg->PropBool = BackendService->GetPropBool();
	msg->PropInt = BackendService->GetPropInt();
	msg->PropInt32 = BackendService->GetPropInt32();
	msg->PropInt64 = BackendService->GetPropInt64();
	msg->PropFloat = BackendService->GetPropFloat();
	msg->PropFloat32 = BackendService->GetPropFloat32();
	msg->PropFloat64 = BackendService->GetPropFloat64();
	msg->PropString = BackendService->GetPropString();
	msg->PropReadOnlyString = BackendService->GetPropReadOnlyString();

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPing(const FTbSimpleSimpleArrayInterfacePingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleArrayInterfacePongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfacePongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnClientDisconnected(const FTbSimpleSimpleArrayInterfaceClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::_CheckClientTimeouts()
{
	float CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double Delta = (CurrentTime - ClientPair.Value) * 1000;

		if (Delta > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncBoolRequest(const FTbSimpleSimpleArrayInterfaceFuncBoolRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleArrayInterfaceFuncBoolReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->FuncBool(InMessage.ParamBool);

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncBoolReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncIntRequest(const FTbSimpleSimpleArrayInterfaceFuncIntRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleArrayInterfaceFuncIntReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->FuncInt(InMessage.ParamInt);

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncIntReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncInt32Request(const FTbSimpleSimpleArrayInterfaceFuncInt32RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleArrayInterfaceFuncInt32ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->FuncInt32(InMessage.ParamInt32);

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncInt32ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncInt64Request(const FTbSimpleSimpleArrayInterfaceFuncInt64RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleArrayInterfaceFuncInt64ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->FuncInt64(InMessage.ParamInt64);

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncInt64ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncFloatRequest(const FTbSimpleSimpleArrayInterfaceFuncFloatRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleArrayInterfaceFuncFloatReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->FuncFloat(InMessage.ParamFloat);

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncFloatReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncFloat32Request(const FTbSimpleSimpleArrayInterfaceFuncFloat32RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleArrayInterfaceFuncFloat32ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->FuncFloat32(InMessage.ParamFloat32);

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncFloat32ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncFloat64Request(const FTbSimpleSimpleArrayInterfaceFuncFloat64RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleArrayInterfaceFuncFloat64ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->FuncFloat64(InMessage.ParamFloat);

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncFloat64ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnFuncStringRequest(const FTbSimpleSimpleArrayInterfaceFuncStringRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleArrayInterfaceFuncStringReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->FuncString(InMessage.ParamString);

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceFuncStringReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigBool(const TArray<bool>& InParamBool)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfaceSigBoolSignalMessage();
	msg->ParamBool = InParamBool;
	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSigBoolSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigInt(const TArray<int32>& InParamInt)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfaceSigIntSignalMessage();
	msg->ParamInt = InParamInt;
	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSigIntSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigInt32(const TArray<int32>& InParamInt32)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfaceSigInt32SignalMessage();
	msg->ParamInt32 = InParamInt32;
	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSigInt32SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigInt64(const TArray<int64>& InParamInt64)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfaceSigInt64SignalMessage();
	msg->ParamInt64 = InParamInt64;
	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSigInt64SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigFloat(const TArray<float>& InParamFloat)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfaceSigFloatSignalMessage();
	msg->ParamFloat = InParamFloat;
	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSigFloatSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigFloat32(const TArray<float>& InParamFloa32)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfaceSigFloat32SignalMessage();
	msg->ParamFloa32 = InParamFloa32;
	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSigFloat32SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigFloat64(const TArray<double>& InParamFloat64)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfaceSigFloat64SignalMessage();
	msg->ParamFloat64 = InParamFloat64;
	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSigFloat64SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSigString(const TArray<FString>& InParamString)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfaceSigStringSignalMessage();
	msg->ParamString = InParamString;
	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfaceSigStringSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropBoolRequest(const FTbSimpleSimpleArrayInterfaceSetPropBoolRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetPropBool(InMessage.PropBool);
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropBoolChanged(const TArray<bool>& InPropBool)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfacePropBoolChangedMessage();
	msg->PropBool = InPropBool;

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfacePropBoolChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropIntRequest(const FTbSimpleSimpleArrayInterfaceSetPropIntRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetPropInt(InMessage.PropInt);
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropIntChanged(const TArray<int32>& InPropInt)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfacePropIntChangedMessage();
	msg->PropInt = InPropInt;

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfacePropIntChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropInt32Request(const FTbSimpleSimpleArrayInterfaceSetPropInt32RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetPropInt32(InMessage.PropInt32);
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropInt32Changed(const TArray<int32>& InPropInt32)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfacePropInt32ChangedMessage();
	msg->PropInt32 = InPropInt32;

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfacePropInt32ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropInt64Request(const FTbSimpleSimpleArrayInterfaceSetPropInt64RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetPropInt64(InMessage.PropInt64);
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropInt64Changed(const TArray<int64>& InPropInt64)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfacePropInt64ChangedMessage();
	msg->PropInt64 = InPropInt64;

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfacePropInt64ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropFloatRequest(const FTbSimpleSimpleArrayInterfaceSetPropFloatRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetPropFloat(InMessage.PropFloat);
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropFloatChanged(const TArray<float>& InPropFloat)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfacePropFloatChangedMessage();
	msg->PropFloat = InPropFloat;

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfacePropFloatChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropFloat32Request(const FTbSimpleSimpleArrayInterfaceSetPropFloat32RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetPropFloat32(InMessage.PropFloat32);
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropFloat32Changed(const TArray<float>& InPropFloat32)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfacePropFloat32ChangedMessage();
	msg->PropFloat32 = InPropFloat32;

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfacePropFloat32ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropFloat64Request(const FTbSimpleSimpleArrayInterfaceSetPropFloat64RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetPropFloat64(InMessage.PropFloat64);
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropFloat64Changed(const TArray<double>& InPropFloat64)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfacePropFloat64ChangedMessage();
	msg->PropFloat64 = InPropFloat64;

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfacePropFloat64ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnSetPropStringRequest(const FTbSimpleSimpleArrayInterfaceSetPropStringRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetPropString(InMessage.PropString);
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropStringChanged(const TArray<FString>& InPropString)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfacePropStringChangedMessage();
	msg->PropString = InPropString;

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfacePropStringChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleArrayInterfaceMsgBusAdapter::OnPropReadOnlyStringChanged(const FString& InPropReadOnlyString)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleArrayInterfacePropReadOnlyStringChangedMessage();
	msg->PropReadOnlyString = InPropReadOnlyString;

	if (TbSimpleSimpleArrayInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleArrayInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleArrayInterfacePropReadOnlyStringChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
