/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */




#include "TbSimple/Generated/Jni/TbSimpleSimpleArrayInterfaceJniClient.h"
#include "TbSimple/Generated/Jni/TbSimpleDataJavaConverter.h"

#include "Async/Async.h"
#include "Engine/Engine.h"

#if PLATFORM_ANDROID

#include "Engine/Engine.h"
 #include "Android/AndroidJNI.h"
 #include "Android/AndroidApplication.h"

 #if USE_ANDROID_JNI
 #include <jni.h>
 #endif
#endif

#include <atomic>
#include "HAL/CriticalSection.h"
#include "GenericPlatform/GenericPlatformMisc.h"

/**
   \brief data structure to hold the last sent property values
*/


class UTbSimpleSimpleArrayInterfaceJniClientMethodHelper
{
public:
    template <typename ResultType>
    FGuid StorePromise(TPromise<ResultType>& Promise);

    template <typename ResultType>
    bool FulfillPromise(const FGuid& Id, const ResultType& Value);
private:
    TMap<FGuid, void*> ReplyPromisesMap;
    FCriticalSection ReplyPromisesMapCS;

};

namespace {

    UTbSimpleSimpleArrayInterfaceJniClient* gUTbSimpleSimpleArrayInterfaceJniClientHandle = nullptr;
    TFunction<void(bool)> gUTbSimpleSimpleArrayInterfaceJniClientnotifyIsReady = [](bool value) { (void)value; UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("notifyIsReady used but not set ")); };
    TFunction<void(TArray<bool>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropBoolChangedEmpty = [](TArray<bool> value) { (void)value; UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("onPropBoolChanged used but not set ")); };
    TFunction<void(TArray<bool>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropBoolChanged = gUTbSimpleSimpleArrayInterfaceJniClientOnPropBoolChangedEmpty;
    TFunction<void(TArray<int32>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropIntChangedEmpty = [](TArray<int32> value) { (void)value; UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("onPropIntChanged used but not set ")); };
    TFunction<void(TArray<int32>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropIntChanged = gUTbSimpleSimpleArrayInterfaceJniClientOnPropIntChangedEmpty;
    TFunction<void(TArray<int32>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropInt32ChangedEmpty = [](TArray<int32> value) { (void)value; UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("onPropInt32Changed used but not set ")); };
    TFunction<void(TArray<int32>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropInt32Changed = gUTbSimpleSimpleArrayInterfaceJniClientOnPropInt32ChangedEmpty;
    TFunction<void(TArray<int64>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropInt64ChangedEmpty = [](TArray<int64> value) { (void)value; UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("onPropInt64Changed used but not set ")); };
    TFunction<void(TArray<int64>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropInt64Changed = gUTbSimpleSimpleArrayInterfaceJniClientOnPropInt64ChangedEmpty;
    TFunction<void(TArray<float>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloatChangedEmpty = [](TArray<float> value) { (void)value; UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("onPropFloatChanged used but not set ")); };
    TFunction<void(TArray<float>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloatChanged = gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloatChangedEmpty;
    TFunction<void(TArray<float>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloat32ChangedEmpty = [](TArray<float> value) { (void)value; UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("onPropFloat32Changed used but not set ")); };
    TFunction<void(TArray<float>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloat32Changed = gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloat32ChangedEmpty;
    TFunction<void(TArray<double>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloat64ChangedEmpty = [](TArray<double> value) { (void)value; UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("onPropFloat64Changed used but not set ")); };
    TFunction<void(TArray<double>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloat64Changed = gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloat64ChangedEmpty;
    TFunction<void(TArray<FString>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropStringChangedEmpty = [](TArray<FString> value) { (void)value; UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("onPropStringChanged used but not set ")); };
    TFunction<void(TArray<FString>)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropStringChanged = gUTbSimpleSimpleArrayInterfaceJniClientOnPropStringChangedEmpty;
    TFunction<void(FString)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropReadOnlyStringChangedEmpty = [](FString value) { (void)value; UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("onPropReadOnlyStringChanged used but not set ")); };
    TFunction<void(FString)> gUTbSimpleSimpleArrayInterfaceJniClientOnPropReadOnlyStringChanged = gUTbSimpleSimpleArrayInterfaceJniClientOnPropReadOnlyStringChangedEmpty;

    UTbSimpleSimpleArrayInterfaceJniClientMethodHelper  gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper;

}


DEFINE_LOG_CATEGORY(LogTbSimpleSimpleArrayInterfaceClient_JNI);

UTbSimpleSimpleArrayInterfaceJniClient::UTbSimpleSimpleArrayInterfaceJniClient()
{
#if !(PLATFORM_ANDROID && USE_ANDROID_JNI)
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("This is class that adapts the usage with android and jni, but seems to be used on different target. Make sure  you are using it with Android"));
#endif
}

UTbSimpleSimpleArrayInterfaceJniClient::UTbSimpleSimpleArrayInterfaceJniClient(FVTableHelper& Helper)
    : Super(Helper)
{
}
UTbSimpleSimpleArrayInterfaceJniClient::~UTbSimpleSimpleArrayInterfaceJniClient() = default;

void UTbSimpleSimpleArrayInterfaceJniClient::Initialize(FSubsystemCollectionBase& Collection)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Init"));
    Super::Initialize(Collection);

    gUTbSimpleSimpleArrayInterfaceJniClientHandle = this;
    gUTbSimpleSimpleArrayInterfaceJniClientnotifyIsReady = [this](bool value) {
         b_isReady = value;
         AsyncTask(ENamedThreads::GameThread, [this]()
             {
                 _ConnectionStatusChangedBP.Broadcast(b_isReady);
                 _ConnectionStatusChanged.Broadcast(b_isReady);
             });
        };
	gUTbSimpleSimpleArrayInterfaceJniClientOnPropBoolChanged = [this](const TArray<bool>& InPropBool)
    {
         PropBool = InPropBool;
         _GetPublisher()->BroadcastPropBoolChanged(PropBool);
    };
	gUTbSimpleSimpleArrayInterfaceJniClientOnPropIntChanged = [this](const TArray<int32>& InPropInt)
    {
         PropInt = InPropInt;
         _GetPublisher()->BroadcastPropIntChanged(PropInt);
    };
	gUTbSimpleSimpleArrayInterfaceJniClientOnPropInt32Changed = [this](const TArray<int32>& InPropInt32)
    {
         PropInt32 = InPropInt32;
         _GetPublisher()->BroadcastPropInt32Changed(PropInt32);
    };
	gUTbSimpleSimpleArrayInterfaceJniClientOnPropInt64Changed = [this](const TArray<int64>& InPropInt64)
    {
         PropInt64 = InPropInt64;
         _GetPublisher()->BroadcastPropInt64Changed(PropInt64);
    };
	gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloatChanged = [this](const TArray<float>& InPropFloat)
    {
         PropFloat = InPropFloat;
         _GetPublisher()->BroadcastPropFloatChanged(PropFloat);
    };
	gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloat32Changed = [this](const TArray<float>& InPropFloat32)
    {
         PropFloat32 = InPropFloat32;
         _GetPublisher()->BroadcastPropFloat32Changed(PropFloat32);
    };
	gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloat64Changed = [this](const TArray<double>& InPropFloat64)
    {
         PropFloat64 = InPropFloat64;
         _GetPublisher()->BroadcastPropFloat64Changed(PropFloat64);
    };
	gUTbSimpleSimpleArrayInterfaceJniClientOnPropStringChanged = [this](const TArray<FString>& InPropString)
    {
         PropString = InPropString;
         _GetPublisher()->BroadcastPropStringChanged(PropString);
    };
	gUTbSimpleSimpleArrayInterfaceJniClientOnPropReadOnlyStringChanged = [this](const FString& InPropReadOnlyString)
    {
         PropReadOnlyString = InPropReadOnlyString;
         _GetPublisher()->BroadcastPropReadOnlyStringChanged(PropReadOnlyString);
    };

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    m_javaJniClientClass = FAndroidApplication::FindJavaClassGlobalRef("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient");
    jmethodID constructor = Env->GetMethodID(m_javaJniClientClass, "<init>", "()V");
    jobject localRef = Env->NewObject(m_javaJniClientClass, constructor);
    m_javaJniClientInstance = Env->NewGlobalRef(localRef);
    FAndroidApplication::GetJavaEnv()->DeleteLocalRef(localRef);
#endif
}

void UTbSimpleSimpleArrayInterfaceJniClient::Deinitialize()
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("deinit"));
    _unbind();
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    Env->DeleteGlobalRef(m_javaJniClientInstance);
    m_javaJniClientClass = nullptr;
    m_javaJniClientInstance = nullptr;
#endif

    gUTbSimpleSimpleArrayInterfaceJniClientnotifyIsReady = [](bool value){(void)value; UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("notifyIsReady used but not set "));};
    gUTbSimpleSimpleArrayInterfaceJniClientOnPropBoolChanged = gUTbSimpleSimpleArrayInterfaceJniClientOnPropBoolChangedEmpty;
    gUTbSimpleSimpleArrayInterfaceJniClientOnPropIntChanged = gUTbSimpleSimpleArrayInterfaceJniClientOnPropIntChangedEmpty;
    gUTbSimpleSimpleArrayInterfaceJniClientOnPropInt32Changed = gUTbSimpleSimpleArrayInterfaceJniClientOnPropInt32ChangedEmpty;
    gUTbSimpleSimpleArrayInterfaceJniClientOnPropInt64Changed = gUTbSimpleSimpleArrayInterfaceJniClientOnPropInt64ChangedEmpty;
    gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloatChanged = gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloatChangedEmpty;
    gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloat32Changed = gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloat32ChangedEmpty;
    gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloat64Changed = gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloat64ChangedEmpty;
    gUTbSimpleSimpleArrayInterfaceJniClientOnPropStringChanged = gUTbSimpleSimpleArrayInterfaceJniClientOnPropStringChangedEmpty;
    gUTbSimpleSimpleArrayInterfaceJniClientOnPropReadOnlyStringChanged = gUTbSimpleSimpleArrayInterfaceJniClientOnPropReadOnlyStringChangedEmpty;

    gUTbSimpleSimpleArrayInterfaceJniClientHandle = nullptr;
    Super::Deinitialize();
}
TArray<bool> UTbSimpleSimpleArrayInterfaceJniClient::GetPropBool() const
{
    return PropBool;
}
void UTbSimpleSimpleArrayInterfaceJniClient::SetPropBool(const TArray<bool>& InPropBool)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropBool"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropBool() == InPropBool )
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Property propBool to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropBool ([Z)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropBool", "([Z)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropBool ([Z)V not found"));
            return;
        }
        
        auto lenprop_bool = InPropBool.Num();
        jbooleanArray jlocal_PropBool = Env->NewBooleanArray(lenprop_bool);
        TArray<jboolean> Temp;
        Temp.SetNumUninitialized(lenprop_bool);
        for (int i = 0; i < lenprop_bool; i++)
        {
            Temp[i] = InPropBool[i] ? JNI_TRUE : JNI_FALSE;
        }
        Env->SetBooleanArrayRegion(jlocal_PropBool, 0, lenprop_bool, Temp.GetData());
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropBool);
        Env->DeleteLocalRef(jlocal_PropBool);
    }
#endif

}
TArray<int32> UTbSimpleSimpleArrayInterfaceJniClient::GetPropInt() const
{
    return PropInt;
}
void UTbSimpleSimpleArrayInterfaceJniClient::SetPropInt(const TArray<int32>& InPropInt)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropInt"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropInt() == InPropInt )
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Property propInt to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropInt ([I)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropInt", "([I)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropInt ([I)V not found"));
            return;
        }
        
        auto lenprop_int = InPropInt.Num();
        jintArray jlocal_PropInt = Env->NewIntArray(lenprop_int);
        if (jlocal_PropInt  == NULL){/*Log error, skip?*/};
        Env->SetIntArrayRegion(jlocal_PropInt, 0, lenprop_int,InPropInt.GetData());
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropInt);
        Env->DeleteLocalRef(jlocal_PropInt);
    }
#endif

}
TArray<int32> UTbSimpleSimpleArrayInterfaceJniClient::GetPropInt32() const
{
    return PropInt32;
}
void UTbSimpleSimpleArrayInterfaceJniClient::SetPropInt32(const TArray<int32>& InPropInt32)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropInt32"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropInt32() == InPropInt32 )
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Property propInt32 to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropInt32 ([I)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropInt32", "([I)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropInt32 ([I)V not found"));
            return;
        }
        
        auto lenprop_int32 = InPropInt32.Num();
        jintArray jlocal_PropInt32 = Env->NewIntArray(lenprop_int32);
        if (jlocal_PropInt32  == NULL){/*Log error, skip?*/};
        Env->SetIntArrayRegion(jlocal_PropInt32, 0, lenprop_int32,InPropInt32.GetData());
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropInt32);
        Env->DeleteLocalRef(jlocal_PropInt32);
    }
#endif

}
TArray<int64> UTbSimpleSimpleArrayInterfaceJniClient::GetPropInt64() const
{
    return PropInt64;
}
void UTbSimpleSimpleArrayInterfaceJniClient::SetPropInt64(const TArray<int64>& InPropInt64)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropInt64"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropInt64() == InPropInt64 )
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Property propInt64 to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropInt64 ([J)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropInt64", "([J)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropInt64 ([J)V not found"));
            return;
        }
        
        auto lenprop_int64 = InPropInt64.Num();
        jlongArray jlocal_PropInt64 = Env->NewLongArray(lenprop_int64);
        if (jlocal_PropInt64  == NULL){/*Log error, skip?*/};
        Env->SetLongArrayRegion(jlocal_PropInt64, 0, lenprop_int64,reinterpret_cast<const jlong*>(InPropInt64.GetData()));
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropInt64);
        Env->DeleteLocalRef(jlocal_PropInt64);
    }
#endif

}
TArray<float> UTbSimpleSimpleArrayInterfaceJniClient::GetPropFloat() const
{
    return PropFloat;
}
void UTbSimpleSimpleArrayInterfaceJniClient::SetPropFloat(const TArray<float>& InPropFloat)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropFloat"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropFloat() == InPropFloat )
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Property propFloat to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropFloat ([F)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropFloat", "([F)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropFloat ([F)V not found"));
            return;
        }
        
        auto lenprop_float = InPropFloat.Num();
        jfloatArray jlocal_PropFloat = Env->NewFloatArray(lenprop_float);
        if (jlocal_PropFloat  == NULL){/*Log error, skip?*/};
        Env->SetFloatArrayRegion(jlocal_PropFloat, 0, lenprop_float,InPropFloat.GetData());
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropFloat);
        Env->DeleteLocalRef(jlocal_PropFloat);
    }
#endif

}
TArray<float> UTbSimpleSimpleArrayInterfaceJniClient::GetPropFloat32() const
{
    return PropFloat32;
}
void UTbSimpleSimpleArrayInterfaceJniClient::SetPropFloat32(const TArray<float>& InPropFloat32)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropFloat32"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropFloat32() == InPropFloat32 )
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Property propFloat32 to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropFloat32 ([F)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropFloat32", "([F)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropFloat32 ([F)V not found"));
            return;
        }
        
        auto lenprop_float32 = InPropFloat32.Num();
        jfloatArray jlocal_PropFloat32 = Env->NewFloatArray(lenprop_float32);
        if (jlocal_PropFloat32  == NULL){/*Log error, skip?*/};
        Env->SetFloatArrayRegion(jlocal_PropFloat32, 0, lenprop_float32,InPropFloat32.GetData());
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropFloat32);
        Env->DeleteLocalRef(jlocal_PropFloat32);
    }
#endif

}
TArray<double> UTbSimpleSimpleArrayInterfaceJniClient::GetPropFloat64() const
{
    return PropFloat64;
}
void UTbSimpleSimpleArrayInterfaceJniClient::SetPropFloat64(const TArray<double>& InPropFloat64)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropFloat64"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropFloat64() == InPropFloat64 )
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Property propFloat64 to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropFloat64 ([D)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropFloat64", "([D)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropFloat64 ([D)V not found"));
            return;
        }
        
        auto lenprop_float64 = InPropFloat64.Num();
        jdoubleArray jlocal_PropFloat64 = Env->NewDoubleArray(lenprop_float64);
        if (jlocal_PropFloat64  == NULL){/*Log error, skip?*/};
        Env->SetDoubleArrayRegion(jlocal_PropFloat64, 0, lenprop_float64,InPropFloat64.GetData());
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropFloat64);
        Env->DeleteLocalRef(jlocal_PropFloat64);
    }
#endif

}
TArray<FString> UTbSimpleSimpleArrayInterfaceJniClient::GetPropString() const
{
    return PropString;
}
void UTbSimpleSimpleArrayInterfaceJniClient::SetPropString(const TArray<FString>& InPropString)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropString"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropString() == InPropString )
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Property propString to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropString ([Ljava/lang/String;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropString", "([Ljava/lang/String;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:setPropString ([Ljava/lang/String;)V not found"));
            return;
        }
        
        TArray<FStringView> InPropStringStringViews;
        InPropStringStringViews.Reserve(InPropString.Num());
        for (const FString& Str : InPropString)
        {
            InPropStringStringViews.Add(FStringView(Str));
        }
        auto jlocal_PropStringWrapped = FJavaHelper::ToJavaStringArray(Env,InPropStringStringViews);
        jobjectArray jlocal_PropString = static_cast<jobjectArray>(Env->NewLocalRef(*jlocal_PropStringWrapped));
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropString);
        Env->DeleteLocalRef(jlocal_PropString);
    }
#endif

}
FString UTbSimpleSimpleArrayInterfaceJniClient::GetPropReadOnlyString() const
{
    return PropReadOnlyString;
}
TArray<bool> UTbSimpleSimpleArrayInterfaceJniClient::FuncBool(const TArray<bool>& InParamBool)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcBool "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<bool>();
    }
    TPromise<TArray<bool>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcBoolAsync:(Ljava/lang/String;[Z)V CLASS not found"));
        return TArray<bool>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcBoolAsync", "(Ljava/lang/String;[Z)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        auto lenparam_bool = InParamBool.Num();
        jbooleanArray jlocal_ParamBool = Env->NewBooleanArray(lenparam_bool);
        TArray<jboolean> Temp;
        Temp.SetNumUninitialized(lenparam_bool);
        for (int i = 0; i < lenparam_bool; i++)
        {
            Temp[i] = InParamBool[i] ? JNI_TRUE : JNI_FALSE;
        }
        Env->SetBooleanArrayRegion(jlocal_ParamBool, 0, lenparam_bool, Temp.GetData());;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamBool);
        Env->DeleteLocalRef(jlocal_ParamBool);
    }
    else
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcBoolAsync (Ljava/lang/String;[Z)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<int32> UTbSimpleSimpleArrayInterfaceJniClient::FuncInt(const TArray<int32>& InParamInt)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcInt "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<int32>();
    }
    TPromise<TArray<int32>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcIntAsync:(Ljava/lang/String;[I)V CLASS not found"));
        return TArray<int32>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcIntAsync", "(Ljava/lang/String;[I)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        auto lenparam_int = InParamInt.Num();
        jintArray jlocal_ParamInt = Env->NewIntArray(lenparam_int);
        if (jlocal_ParamInt  == NULL){/*Log error, skip?*/};
        Env->SetIntArrayRegion(jlocal_ParamInt, 0, lenparam_int,InParamInt.GetData());;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamInt);
        Env->DeleteLocalRef(jlocal_ParamInt);
    }
    else
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcIntAsync (Ljava/lang/String;[I)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<int32> UTbSimpleSimpleArrayInterfaceJniClient::FuncInt32(const TArray<int32>& InParamInt32)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcInt32 "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<int32>();
    }
    TPromise<TArray<int32>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcInt32Async:(Ljava/lang/String;[I)V CLASS not found"));
        return TArray<int32>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcInt32Async", "(Ljava/lang/String;[I)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        auto lenparam_int32 = InParamInt32.Num();
        jintArray jlocal_ParamInt32 = Env->NewIntArray(lenparam_int32);
        if (jlocal_ParamInt32  == NULL){/*Log error, skip?*/};
        Env->SetIntArrayRegion(jlocal_ParamInt32, 0, lenparam_int32,InParamInt32.GetData());;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamInt32);
        Env->DeleteLocalRef(jlocal_ParamInt32);
    }
    else
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcInt32Async (Ljava/lang/String;[I)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<int64> UTbSimpleSimpleArrayInterfaceJniClient::FuncInt64(const TArray<int64>& InParamInt64)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcInt64 "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<int64>();
    }
    TPromise<TArray<int64>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcInt64Async:(Ljava/lang/String;[J)V CLASS not found"));
        return TArray<int64>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcInt64Async", "(Ljava/lang/String;[J)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        auto lenparam_int64 = InParamInt64.Num();
        jlongArray jlocal_ParamInt64 = Env->NewLongArray(lenparam_int64);
        if (jlocal_ParamInt64  == NULL){/*Log error, skip?*/};
        Env->SetLongArrayRegion(jlocal_ParamInt64, 0, lenparam_int64,reinterpret_cast<const jlong*>(InParamInt64.GetData()));;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamInt64);
        Env->DeleteLocalRef(jlocal_ParamInt64);
    }
    else
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcInt64Async (Ljava/lang/String;[J)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<float> UTbSimpleSimpleArrayInterfaceJniClient::FuncFloat(const TArray<float>& InParamFloat)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcFloat "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<float>();
    }
    TPromise<TArray<float>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcFloatAsync:(Ljava/lang/String;[F)V CLASS not found"));
        return TArray<float>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcFloatAsync", "(Ljava/lang/String;[F)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        auto lenparam_float = InParamFloat.Num();
        jfloatArray jlocal_ParamFloat = Env->NewFloatArray(lenparam_float);
        if (jlocal_ParamFloat  == NULL){/*Log error, skip?*/};
        Env->SetFloatArrayRegion(jlocal_ParamFloat, 0, lenparam_float,InParamFloat.GetData());;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamFloat);
        Env->DeleteLocalRef(jlocal_ParamFloat);
    }
    else
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcFloatAsync (Ljava/lang/String;[F)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<float> UTbSimpleSimpleArrayInterfaceJniClient::FuncFloat32(const TArray<float>& InParamFloat32)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcFloat32 "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<float>();
    }
    TPromise<TArray<float>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcFloat32Async:(Ljava/lang/String;[F)V CLASS not found"));
        return TArray<float>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcFloat32Async", "(Ljava/lang/String;[F)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        auto lenparam_float32 = InParamFloat32.Num();
        jfloatArray jlocal_ParamFloat32 = Env->NewFloatArray(lenparam_float32);
        if (jlocal_ParamFloat32  == NULL){/*Log error, skip?*/};
        Env->SetFloatArrayRegion(jlocal_ParamFloat32, 0, lenparam_float32,InParamFloat32.GetData());;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamFloat32);
        Env->DeleteLocalRef(jlocal_ParamFloat32);
    }
    else
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcFloat32Async (Ljava/lang/String;[F)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<double> UTbSimpleSimpleArrayInterfaceJniClient::FuncFloat64(const TArray<double>& InParamFloat)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcFloat64 "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<double>();
    }
    TPromise<TArray<double>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcFloat64Async:(Ljava/lang/String;[D)V CLASS not found"));
        return TArray<double>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcFloat64Async", "(Ljava/lang/String;[D)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        auto lenparam_float = InParamFloat.Num();
        jdoubleArray jlocal_ParamFloat = Env->NewDoubleArray(lenparam_float);
        if (jlocal_ParamFloat  == NULL){/*Log error, skip?*/};
        Env->SetDoubleArrayRegion(jlocal_ParamFloat, 0, lenparam_float,InParamFloat.GetData());;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamFloat);
        Env->DeleteLocalRef(jlocal_ParamFloat);
    }
    else
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcFloat64Async (Ljava/lang/String;[D)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<FString> UTbSimpleSimpleArrayInterfaceJniClient::FuncString(const TArray<FString>& InParamString)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcString "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<FString>();
    }
    TPromise<TArray<FString>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcStringAsync:(Ljava/lang/String;[Ljava/lang/String;)V CLASS not found"));
        return TArray<FString>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcStringAsync", "(Ljava/lang/String;[Ljava/lang/String;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        TArray<FStringView> InParamStringStringViews;
        InParamStringStringViews.Reserve(InParamString.Num());
        for (const FString& Str : InParamString)
        {
            InParamStringStringViews.Add(FStringView(Str));
        }
        auto jlocal_ParamStringWrapped = FJavaHelper::ToJavaStringArray(Env,InParamStringStringViews);
        jobjectArray jlocal_ParamString = static_cast<jobjectArray>(Env->NewLocalRef(*jlocal_ParamStringWrapped));;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamString);
        Env->DeleteLocalRef(jlocal_ParamString);
    }
    else
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:funcStringAsync (Ljava/lang/String;[Ljava/lang/String;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}

bool UTbSimpleSimpleArrayInterfaceJniClient::_bindToService(FString servicePackage, FString connectionId)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Request JNI connection to %s"), *servicePackage);
    if (b_isReady)
    {
        if (servicePackage == m_lastBoundServicePackage && connectionId == m_lastConnectionId)
        {
            UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Already bound"));
            return true;
        }
        else
        {
            _unbind();
        }
    }
    m_lastBoundServicePackage = servicePackage;
    m_lastConnectionId = connectionId;
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:bind:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z CLASS not found"));
        return false;
    }
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "bind", "(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z");
    if (MethodID != nullptr)
    {
        jobject Activity = FJavaWrapper::GameActivityThis;
        auto jPackage = FJavaHelper::ToJavaString(Env, servicePackage);
        auto jConnId = FJavaHelper::ToJavaString(Env, connectionId);
        auto res = FJavaWrapper::CallBooleanMethod(Env, m_javaJniClientInstance, MethodID, Activity, *jPackage, *jConnId);
        return res;
    }
    else
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:bind (Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z not found"));
    }
#endif
    return false;
}

void UTbSimpleSimpleArrayInterfaceJniClient::_unbind()
{

    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Request JNI unbind"));

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:unbind:()V CLASS not found"));
        return;
    }
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "unbind", "()V");
    if (MethodID != nullptr)
    {
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID);
    }
    else
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("tbSimple/tbSimplejniclient/SimpleArrayInterfaceJniClient:unbind ()V not found"));
    }
#endif
}

bool UTbSimpleSimpleArrayInterfaceJniClient::_IsReady() const
{
    return b_isReady;
}

#if PLATFORM_ANDROID && USE_ANDROID_JNI
JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropBoolChanged(JNIEnv* Env, jclass Clazz,jbooleanArray propBool)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropBoolChanged"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropBoolChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<bool> local_prop_bool = TArray<bool>();
    jbooleanArray l_javaPropBoolArray = (jbooleanArray)propBool;
    jsize lenprop_bool = Env->GetArrayLength(l_javaPropBoolArray);
    local_prop_bool.Reserve(lenprop_bool);
    TArray<jboolean> TempPropBool;
    TempPropBool.SetNumUninitialized(lenprop_bool);
    Env->GetBooleanArrayRegion(l_javaPropBoolArray, 0, lenprop_bool, TempPropBool.GetData());
    for (int i = 0; i < lenprop_bool; i++)
    {
        local_prop_bool.Add(TempPropBool[i] == JNI_TRUE);
    }
    Env->DeleteLocalRef(l_javaPropBoolArray);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_bool= MoveTemp(local_prop_bool)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientOnPropBoolChanged(plocal_prop_bool);
    });
}
JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropIntChanged(JNIEnv* Env, jclass Clazz,jintArray propInt)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropIntChanged"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropIntChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<int32> local_prop_int = TArray<int32>();
    jintArray l_javaPropIntArray = (jintArray)propInt;
    jsize lenprop_int = Env->GetArrayLength(l_javaPropIntArray);
    local_prop_int.AddUninitialized(lenprop_int);
    Env->GetIntArrayRegion(propInt, 0,  lenprop_int,local_prop_int.GetData());
    Env->DeleteLocalRef(l_javaPropIntArray);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_int= MoveTemp(local_prop_int)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientOnPropIntChanged(plocal_prop_int);
    });
}
JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropInt32Changed(JNIEnv* Env, jclass Clazz,jintArray propInt32)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropInt32Changed"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropInt32Changed: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<int32> local_prop_int32 = TArray<int32>();
    jintArray l_javaPropInt32Array = (jintArray)propInt32;
    jsize lenprop_int32 = Env->GetArrayLength(l_javaPropInt32Array);
    local_prop_int32.AddUninitialized(lenprop_int32);
    Env->GetIntArrayRegion(propInt32, 0,  lenprop_int32,local_prop_int32.GetData());
    Env->DeleteLocalRef(l_javaPropInt32Array);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_int32= MoveTemp(local_prop_int32)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientOnPropInt32Changed(plocal_prop_int32);
    });
}
JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropInt64Changed(JNIEnv* Env, jclass Clazz,jlongArray propInt64)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropInt64Changed"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropInt64Changed: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<int64> local_prop_int64 = TArray<int64>();
    jlongArray l_javaPropInt64Array = (jlongArray)propInt64;
    jsize lenprop_int64 = Env->GetArrayLength(l_javaPropInt64Array);
    local_prop_int64.AddUninitialized(lenprop_int64);
    Env->GetLongArrayRegion(propInt64, 0,  lenprop_int64,reinterpret_cast<jlong*>(local_prop_int64.GetData()));
    Env->DeleteLocalRef(l_javaPropInt64Array);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_int64= MoveTemp(local_prop_int64)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientOnPropInt64Changed(plocal_prop_int64);
    });
}
JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropFloatChanged(JNIEnv* Env, jclass Clazz,jfloatArray propFloat)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropFloatChanged"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropFloatChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<float> local_prop_float = TArray<float>();
    jfloatArray l_javaPropFloatArray = (jfloatArray)propFloat;
    jsize lenprop_float = Env->GetArrayLength(l_javaPropFloatArray);
    local_prop_float.AddUninitialized(lenprop_float);
    Env->GetFloatArrayRegion(propFloat, 0,  lenprop_float,local_prop_float.GetData());
    Env->DeleteLocalRef(l_javaPropFloatArray);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_float= MoveTemp(local_prop_float)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloatChanged(plocal_prop_float);
    });
}
JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropFloat32Changed(JNIEnv* Env, jclass Clazz,jfloatArray propFloat32)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropFloat32Changed"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropFloat32Changed: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<float> local_prop_float32 = TArray<float>();
    jfloatArray l_javaPropFloat32Array = (jfloatArray)propFloat32;
    jsize lenprop_float32 = Env->GetArrayLength(l_javaPropFloat32Array);
    local_prop_float32.AddUninitialized(lenprop_float32);
    Env->GetFloatArrayRegion(propFloat32, 0,  lenprop_float32,local_prop_float32.GetData());
    Env->DeleteLocalRef(l_javaPropFloat32Array);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_float32= MoveTemp(local_prop_float32)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloat32Changed(plocal_prop_float32);
    });
}
JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropFloat64Changed(JNIEnv* Env, jclass Clazz,jdoubleArray propFloat64)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropFloat64Changed"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropFloat64Changed: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<double> local_prop_float64 = TArray<double>();
    jdoubleArray l_javaPropFloat64Array = (jdoubleArray)propFloat64;
    jsize lenprop_float64 = Env->GetArrayLength(l_javaPropFloat64Array);
    local_prop_float64.AddUninitialized(lenprop_float64);
    Env->GetDoubleArrayRegion(propFloat64, 0,  lenprop_float64,local_prop_float64.GetData());
    Env->DeleteLocalRef(l_javaPropFloat64Array);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_float64= MoveTemp(local_prop_float64)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientOnPropFloat64Changed(plocal_prop_float64);
    });
}
JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropStringChanged(JNIEnv* Env, jclass Clazz,jobjectArray propString)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropStringChanged"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropStringChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<FString> local_prop_string = TArray<FString>();
    local_prop_string = FJavaHelper::ObjectArrayToFStringTArray(Env, propString);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_string= MoveTemp(local_prop_string)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientOnPropStringChanged(plocal_prop_string);
    });
}
JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropReadOnlyStringChanged(JNIEnv* Env, jclass Clazz,jstring propReadOnlyString)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropReadOnlyStringChanged"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnPropReadOnlyStringChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FString local_prop_read_only_string = FJavaHelper::FStringFromParam(Env, propReadOnlyString);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_read_only_string= MoveTemp(local_prop_read_only_string)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientOnPropReadOnlyStringChanged(plocal_prop_read_only_string);
    });
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigBool(JNIEnv* Env, jclass Clazz, jbooleanArray paramBool)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigBool"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigBool: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<bool> local_param_bool = TArray<bool>();
    jbooleanArray l_javaParamBoolArray = (jbooleanArray)paramBool;
    jsize lenparam_bool = Env->GetArrayLength(l_javaParamBoolArray);
    local_param_bool.Reserve(lenparam_bool);
    TArray<jboolean> TempParamBool;
    TempParamBool.SetNumUninitialized(lenparam_bool);
    Env->GetBooleanArrayRegion(l_javaParamBoolArray, 0, lenparam_bool, TempParamBool.GetData());
    for (int i = 0; i < lenparam_bool; i++)
    {
        local_param_bool.Add(TempParamBool[i] == JNI_TRUE);
    }
    Env->DeleteLocalRef(l_javaParamBoolArray);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_bool= MoveTemp(local_param_bool)]()
        {
            if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigBool: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbSimpleSimpleArrayInterfaceJniClientHandle->_GetPublisher()->BroadcastSigBoolSignal( plocal_param_bool);
        });
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigInt(JNIEnv* Env, jclass Clazz, jintArray paramInt)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigInt"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigInt: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<int32> local_param_int = TArray<int32>();
    jintArray l_javaParamIntArray = (jintArray)paramInt;
    jsize lenparam_int = Env->GetArrayLength(l_javaParamIntArray);
    local_param_int.AddUninitialized(lenparam_int);
    Env->GetIntArrayRegion(paramInt, 0,  lenparam_int,local_param_int.GetData());
    Env->DeleteLocalRef(l_javaParamIntArray);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_int= MoveTemp(local_param_int)]()
        {
            if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigInt: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbSimpleSimpleArrayInterfaceJniClientHandle->_GetPublisher()->BroadcastSigIntSignal( plocal_param_int);
        });
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigInt32(JNIEnv* Env, jclass Clazz, jintArray paramInt32)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigInt32"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigInt32: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<int32> local_param_int32 = TArray<int32>();
    jintArray l_javaParamInt32Array = (jintArray)paramInt32;
    jsize lenparam_int32 = Env->GetArrayLength(l_javaParamInt32Array);
    local_param_int32.AddUninitialized(lenparam_int32);
    Env->GetIntArrayRegion(paramInt32, 0,  lenparam_int32,local_param_int32.GetData());
    Env->DeleteLocalRef(l_javaParamInt32Array);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_int32= MoveTemp(local_param_int32)]()
        {
            if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigInt32: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbSimpleSimpleArrayInterfaceJniClientHandle->_GetPublisher()->BroadcastSigInt32Signal( plocal_param_int32);
        });
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigInt64(JNIEnv* Env, jclass Clazz, jlongArray paramInt64)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigInt64"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigInt64: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<int64> local_param_int64 = TArray<int64>();
    jlongArray l_javaParamInt64Array = (jlongArray)paramInt64;
    jsize lenparam_int64 = Env->GetArrayLength(l_javaParamInt64Array);
    local_param_int64.AddUninitialized(lenparam_int64);
    Env->GetLongArrayRegion(paramInt64, 0,  lenparam_int64,reinterpret_cast<jlong*>(local_param_int64.GetData()));
    Env->DeleteLocalRef(l_javaParamInt64Array);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_int64= MoveTemp(local_param_int64)]()
        {
            if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigInt64: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbSimpleSimpleArrayInterfaceJniClientHandle->_GetPublisher()->BroadcastSigInt64Signal( plocal_param_int64);
        });
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigFloat(JNIEnv* Env, jclass Clazz, jfloatArray paramFloat)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigFloat"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigFloat: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<float> local_param_float = TArray<float>();
    jfloatArray l_javaParamFloatArray = (jfloatArray)paramFloat;
    jsize lenparam_float = Env->GetArrayLength(l_javaParamFloatArray);
    local_param_float.AddUninitialized(lenparam_float);
    Env->GetFloatArrayRegion(paramFloat, 0,  lenparam_float,local_param_float.GetData());
    Env->DeleteLocalRef(l_javaParamFloatArray);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_float= MoveTemp(local_param_float)]()
        {
            if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigFloat: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbSimpleSimpleArrayInterfaceJniClientHandle->_GetPublisher()->BroadcastSigFloatSignal( plocal_param_float);
        });
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigFloat32(JNIEnv* Env, jclass Clazz, jfloatArray paramFloa32)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigFloat32"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigFloat32: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<float> local_param_floa32 = TArray<float>();
    jfloatArray l_javaParamFloa32Array = (jfloatArray)paramFloa32;
    jsize lenparam_floa32 = Env->GetArrayLength(l_javaParamFloa32Array);
    local_param_floa32.AddUninitialized(lenparam_floa32);
    Env->GetFloatArrayRegion(paramFloa32, 0,  lenparam_floa32,local_param_floa32.GetData());
    Env->DeleteLocalRef(l_javaParamFloa32Array);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_floa32= MoveTemp(local_param_floa32)]()
        {
            if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigFloat32: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbSimpleSimpleArrayInterfaceJniClientHandle->_GetPublisher()->BroadcastSigFloat32Signal( plocal_param_floa32);
        });
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigFloat64(JNIEnv* Env, jclass Clazz, jdoubleArray paramFloat64)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigFloat64"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigFloat64: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<double> local_param_float64 = TArray<double>();
    jdoubleArray l_javaParamFloat64Array = (jdoubleArray)paramFloat64;
    jsize lenparam_float64 = Env->GetArrayLength(l_javaParamFloat64Array);
    local_param_float64.AddUninitialized(lenparam_float64);
    Env->GetDoubleArrayRegion(paramFloat64, 0,  lenparam_float64,local_param_float64.GetData());
    Env->DeleteLocalRef(l_javaParamFloat64Array);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_float64= MoveTemp(local_param_float64)]()
        {
            if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigFloat64: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbSimpleSimpleArrayInterfaceJniClientHandle->_GetPublisher()->BroadcastSigFloat64Signal( plocal_param_float64);
        });
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigString(JNIEnv* Env, jclass Clazz, jobjectArray paramString)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigString"));
    if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigString: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<FString> local_param_string = TArray<FString>();
    local_param_string = FJavaHelper::ObjectArrayToFStringTArray(Env, paramString);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_string= MoveTemp(local_param_string)]()
        {
            if (gUTbSimpleSimpleArrayInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Warning, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnSigString: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbSimpleSimpleArrayInterfaceJniClientHandle->_GetPublisher()->BroadcastSigStringSignal( plocal_param_string);
        });
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncBoolResult(JNIEnv* Env, jclass Clazz, jbooleanArray result, jstring callId)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncBoolResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<bool> cpp_result = TArray<bool>();
    jbooleanArray localArray = (jbooleanArray)result;
    jsize len = Env->GetArrayLength(localArray);
    cpp_result.AddUninitialized(len);
    TArray<jboolean> Temp;
    Temp.SetNumUninitialized(len);
    Env->GetBooleanArrayRegion(localArray, 0, len, Temp.GetData());
    for (int i = 0; i < len; i++)
    {
        cpp_result[i] = (Temp[i] == JNI_TRUE);
    }
    Env->DeleteLocalRef(localArray);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncIntResult(JNIEnv* Env, jclass Clazz, jintArray result, jstring callId)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncIntResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<int32> cpp_result = TArray<int32>();
    jintArray localArray = (jintArray)result;
    jsize len = Env->GetArrayLength(localArray);
    cpp_result.AddUninitialized(len);
    Env->GetIntArrayRegion(result, 0,  len,cpp_result.GetData());
    Env->DeleteLocalRef(localArray);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncInt32Result(JNIEnv* Env, jclass Clazz, jintArray result, jstring callId)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncInt32Result"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<int32> cpp_result = TArray<int32>();
    jintArray localArray = (jintArray)result;
    jsize len = Env->GetArrayLength(localArray);
    cpp_result.AddUninitialized(len);
    Env->GetIntArrayRegion(result, 0,  len,cpp_result.GetData());
    Env->DeleteLocalRef(localArray);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncInt64Result(JNIEnv* Env, jclass Clazz, jlongArray result, jstring callId)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncInt64Result"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<int64> cpp_result = TArray<int64>();
    jlongArray localArray = (jlongArray)result;
    jsize len = Env->GetArrayLength(localArray);
    cpp_result.AddUninitialized(len);
    Env->GetLongArrayRegion(result, 0,  len,reinterpret_cast<jlong*>(cpp_result.GetData()));
    Env->DeleteLocalRef(localArray);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncFloatResult(JNIEnv* Env, jclass Clazz, jfloatArray result, jstring callId)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncFloatResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<float> cpp_result = TArray<float>();
    jfloatArray localArray = (jfloatArray)result;
    jsize len = Env->GetArrayLength(localArray);
    cpp_result.AddUninitialized(len);
    Env->GetFloatArrayRegion(result, 0,  len,cpp_result.GetData());
    Env->DeleteLocalRef(localArray);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncFloat32Result(JNIEnv* Env, jclass Clazz, jfloatArray result, jstring callId)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncFloat32Result"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<float> cpp_result = TArray<float>();
    jfloatArray localArray = (jfloatArray)result;
    jsize len = Env->GetArrayLength(localArray);
    cpp_result.AddUninitialized(len);
    Env->GetFloatArrayRegion(result, 0,  len,cpp_result.GetData());
    Env->DeleteLocalRef(localArray);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncFloat64Result(JNIEnv* Env, jclass Clazz, jdoubleArray result, jstring callId)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncFloat64Result"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<double> cpp_result = TArray<double>();
    jdoubleArray localArray = (jdoubleArray)result;
    jsize len = Env->GetArrayLength(localArray);
    cpp_result.AddUninitialized(len);
    Env->GetDoubleArrayRegion(result, 0,  len,cpp_result.GetData());
    Env->DeleteLocalRef(localArray);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncStringResult(JNIEnv* Env, jclass Clazz, jobjectArray result, jstring callId)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT("Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeOnFuncStringResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<FString> cpp_result = TArray<FString>();
    cpp_result = FJavaHelper::ObjectArrayToFStringTArray(Env, result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbSimpleSimpleArrayInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbSimple_tbSimplejniclient_SimpleArrayInterfaceJniClient_nativeIsReady(JNIEnv* Env, jclass Clazz, jboolean value)
{
    AsyncTask(ENamedThreads::GameThread, [value]()
        {
            gUTbSimpleSimpleArrayInterfaceJniClientnotifyIsReady(value);
        });
}
#endif


template <typename ResultType>
FGuid UTbSimpleSimpleArrayInterfaceJniClientMethodHelper::StorePromise(TPromise<ResultType>& Promise)
{
    FGuid Id = FGuid::NewGuid();
    FScopeLock Lock(&ReplyPromisesMapCS);
    ReplyPromisesMap.Add(Id, &Promise);
    //TODO invalid id if sth goes wrong + log + checking
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT(" method store id %s"), *(Id.ToString(EGuidFormats::Digits)));
    return Id;
}

template <typename ResultType>
bool UTbSimpleSimpleArrayInterfaceJniClientMethodHelper::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
    UE_LOG(LogTbSimpleSimpleArrayInterfaceClient_JNI, Verbose, TEXT(" method resolving id %s"), *(Id.ToString(EGuidFormats::Digits)));
    TPromise<ResultType>* PromisePtr = nullptr;

    {
        FScopeLock Lock(&ReplyPromisesMapCS);
        if (auto** Found = ReplyPromisesMap.Find(Id))
        {
            PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
            ReplyPromisesMap.Remove(Id);
        }
    }

    if (PromisePtr)
    {
        AsyncTask(ENamedThreads::GameThread, [Value, PromisePtr]()
            {
                PromisePtr->SetValue(Value);
            });
        return true;

    }
    return false;
}
template FGuid UTbSimpleSimpleArrayInterfaceJniClientMethodHelper::StorePromise<TArray<FString>>(TPromise<TArray<FString>>& Promise);
template bool UTbSimpleSimpleArrayInterfaceJniClientMethodHelper::FulfillPromise<TArray<FString>>(const FGuid& Id, const TArray<FString>& Value);
template FGuid UTbSimpleSimpleArrayInterfaceJniClientMethodHelper::StorePromise<TArray<bool>>(TPromise<TArray<bool>>& Promise);
template bool UTbSimpleSimpleArrayInterfaceJniClientMethodHelper::FulfillPromise<TArray<bool>>(const FGuid& Id, const TArray<bool>& Value);
template FGuid UTbSimpleSimpleArrayInterfaceJniClientMethodHelper::StorePromise<TArray<double>>(TPromise<TArray<double>>& Promise);
template bool UTbSimpleSimpleArrayInterfaceJniClientMethodHelper::FulfillPromise<TArray<double>>(const FGuid& Id, const TArray<double>& Value);
template FGuid UTbSimpleSimpleArrayInterfaceJniClientMethodHelper::StorePromise<TArray<float>>(TPromise<TArray<float>>& Promise);
template bool UTbSimpleSimpleArrayInterfaceJniClientMethodHelper::FulfillPromise<TArray<float>>(const FGuid& Id, const TArray<float>& Value);
template FGuid UTbSimpleSimpleArrayInterfaceJniClientMethodHelper::StorePromise<TArray<int32>>(TPromise<TArray<int32>>& Promise);
template bool UTbSimpleSimpleArrayInterfaceJniClientMethodHelper::FulfillPromise<TArray<int32>>(const FGuid& Id, const TArray<int32>& Value);
template FGuid UTbSimpleSimpleArrayInterfaceJniClientMethodHelper::StorePromise<TArray<int64>>(TPromise<TArray<int64>>& Promise);
template bool UTbSimpleSimpleArrayInterfaceJniClientMethodHelper::FulfillPromise<TArray<int64>>(const FGuid& Id, const TArray<int64>& Value);

