/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbSimpleSimpleInterfaceSimulation.h"
#include "apig/TbSimple.json.adapter.h"
#include "ApiGear/Public/ApiGearConnectionManager.h"
#include "unrealsimulation.h"

using namespace ApiGear::JSONRPC;

namespace TbSimple {
namespace SimpleInterface {
namespace Private {
SimulationService::SimulationService()
    : ITbSimpleSimpleInterfaceInterface()
    , bPropBool(false)
    , PropInt(0)
    , PropFloat(0.0f)
    , PropString(FString())
{
    UApiGearConnectionManager* AGCM = nullptr;
    if (GEngine != nullptr)
    {
        AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
    }
    NotifyRequestFunc SimpleInterfaceStateChangedFunc = [this](NotifyRequestArg arg)
    {
        const json fields = arg.params;
        if(fields.contains("propBool")) {
            if(bPropBool != fields["propBool"].get<bool>())
            {
                bPropBool = fields["propBool"].get<bool>();
                PropBoolChanged.Broadcast(bPropBool);
            }
        }
        if(fields.contains("propInt")) {
            if(PropInt != fields["propInt"].get<int32>())
            {
                PropInt = fields["propInt"].get<int32>();
                PropIntChanged.Broadcast(PropInt);
            }
        }
        if(fields.contains("propFloat")) {
            if(PropFloat != fields["propFloat"].get<float>())
            {
                PropFloat = fields["propFloat"].get<float>();
                PropFloatChanged.Broadcast(PropFloat);
            }
        }
        if(fields.contains("propString")) {
            if(PropString != fields["propString"].get<FString>())
            {
                PropString = fields["propString"].get<FString>();
                PropStringChanged.Broadcast(PropString);
            }
        }
    };
    if(AGCM != nullptr)
    {   
        AGCM->GetSimulationConnection()->Connect();
        AGCM->GetSimulationConnection()->onNotifyState("tb.simple/SimpleInterface", SimpleInterfaceStateChangedFunc);
    }

    CallResponseFunc GetSimpleInterfaceStateFunc = [this](CallResponseArg arg)
    {
        if(arg.result.size() != 1) {
          return;
        }
        const json fields = arg.result;
        if(fields.contains("propBool")) {
            if(bPropBool != fields["propBool"].get<bool>())
            {
                bPropBool = fields["propBool"].get<bool>();
                PropBoolChanged.Broadcast(bPropBool);
            }
        }
        if(fields.contains("propInt")) {
            if(PropInt != fields["propInt"].get<int32>())
            {
                PropInt = fields["propInt"].get<int32>();
                PropIntChanged.Broadcast(PropInt);
            }
        }
        if(fields.contains("propFloat")) {
            if(PropFloat != fields["propFloat"].get<float>())
            {
                PropFloat = fields["propFloat"].get<float>();
                PropFloatChanged.Broadcast(PropFloat);
            }
        }
        if(fields.contains("propString")) {
            if(PropString != fields["propString"].get<FString>())
            {
                PropString = fields["propString"].get<FString>();
                PropStringChanged.Broadcast(PropString);
            }
        }
    };
    if(AGCM != nullptr)
    {
        AGCM->GetSimulationConnection()->doFetchState("tb.simple/SimpleInterface", GetSimpleInterfaceStateFunc);
    }

    // register notification callback functions, signal/event -> fcn
    NotifyRequestFunc sigBoolFunc = [this](NotifyRequestArg arg)
    {
        const json fields = arg.params;
        if(fields.contains("paramBool"))
        {
            SigBoolSignal.Broadcast(fields["paramBool"].get<bool>());
        }
    };
    if(AGCM != nullptr)
    {
        AGCM->GetSimulationConnection()->onNotify("tb.simple/SimpleInterface#sigBool", sigBoolFunc);
    }

    NotifyRequestFunc sigIntFunc = [this](NotifyRequestArg arg)
    {
        const json fields = arg.params;
        if(fields.contains("paramInt"))
        {
            SigIntSignal.Broadcast(fields["paramInt"].get<int32>());
        }
    };
    if(AGCM != nullptr)
    {
        AGCM->GetSimulationConnection()->onNotify("tb.simple/SimpleInterface#sigInt", sigIntFunc);
    }

    NotifyRequestFunc sigFloatFunc = [this](NotifyRequestArg arg)
    {
        const json fields = arg.params;
        if(fields.contains("paramFloat"))
        {
            SigFloatSignal.Broadcast(fields["paramFloat"].get<float>());
        }
    };
    if(AGCM != nullptr)
    {
        AGCM->GetSimulationConnection()->onNotify("tb.simple/SimpleInterface#sigFloat", sigFloatFunc);
    }

    NotifyRequestFunc sigStringFunc = [this](NotifyRequestArg arg)
    {
        const json fields = arg.params;
        if(fields.contains("paramString"))
        {
            SigStringSignal.Broadcast(fields["paramString"].get<FString>());
        }
    };
    if(AGCM != nullptr)
    {
        AGCM->GetSimulationConnection()->onNotify("tb.simple/SimpleInterface#sigString", sigStringFunc);
    }

}

SimulationService::~SimulationService()
{
    if (GEngine != nullptr)
    {
        UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
        AGCM->GetSimulationConnection()->RemoveOnNotifyState("tb.simple/SimpleInterface");
        // unregister notification callback functions
        AGCM->GetSimulationConnection()->RemoveOnNotify("tb.simple/SimpleInterface#sigBool");
        AGCM->GetSimulationConnection()->RemoveOnNotify("tb.simple/SimpleInterface#sigInt");
        AGCM->GetSimulationConnection()->RemoveOnNotify("tb.simple/SimpleInterface#sigFloat");
        AGCM->GetSimulationConnection()->RemoveOnNotify("tb.simple/SimpleInterface#sigString");
    }
}

FTbSimpleSimpleInterfaceSigBoolDelegate& SimulationService::GetSigBoolSignalDelegate()
{
    return SigBoolSignal;
}

FTbSimpleSimpleInterfaceSigIntDelegate& SimulationService::GetSigIntSignalDelegate()
{
    return SigIntSignal;
}

FTbSimpleSimpleInterfaceSigFloatDelegate& SimulationService::GetSigFloatSignalDelegate()
{
    return SigFloatSignal;
}

FTbSimpleSimpleInterfaceSigStringDelegate& SimulationService::GetSigStringSignalDelegate()
{
    return SigStringSignal;
}

bool SimulationService::GetPropBool() const
{
    return bPropBool;
}

void SimulationService::SetPropBool(bool bInPropBool)
{
    Params params;
    params["propBool"] = bInPropBool;
    if (GEngine != nullptr)
    {
        UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
        AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "_set", params);
    }
}

FTbSimpleSimpleInterfacePropBoolChangedDelegate& SimulationService::GetPropBoolChangedDelegate()
{
    return PropBoolChanged;
}

int32 SimulationService::GetPropInt() const
{
    return PropInt;
}

void SimulationService::SetPropInt(int32 InPropInt)
{
    Params params;
    params["propInt"] = InPropInt;
    if (GEngine != nullptr)
    {
        UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
        AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "_set", params);
    }
}

FTbSimpleSimpleInterfacePropIntChangedDelegate& SimulationService::GetPropIntChangedDelegate()
{
    return PropIntChanged;
}

float SimulationService::GetPropFloat() const
{
    return PropFloat;
}

void SimulationService::SetPropFloat(float InPropFloat)
{
    Params params;
    params["propFloat"] = InPropFloat;
    if (GEngine != nullptr)
    {
        UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
        AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "_set", params);
    }
}

FTbSimpleSimpleInterfacePropFloatChangedDelegate& SimulationService::GetPropFloatChangedDelegate()
{
    return PropFloatChanged;
}

FString SimulationService::GetPropString() const
{
    return PropString;
}

void SimulationService::SetPropString(const FString& InPropString)
{
    Params params;
    params["propString"] = InPropString;
    if (GEngine != nullptr)
    {
        UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
        AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "_set", params);
    }
}

FTbSimpleSimpleInterfacePropStringChangedDelegate& SimulationService::GetPropStringChangedDelegate()
{
    return PropStringChanged;
}

bool SimulationService::FuncBool(bool bParamBool)
{
    Params params;
    params["paramBool"] = bParamBool;
    TPromise<bool> Promise;
    Async(EAsyncExecution::Thread, [params, &Promise]()
    {
        CallResponseFunc GetSimpleInterfaceStateFunc = [&Promise](CallResponseArg arg)
        {
            Promise.SetValue(arg.result.get<bool>());
        };
        if (GEngine != nullptr)
        {
            UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
            AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "funcBool", params, GetSimpleInterfaceStateFunc);
        }
    });

    return Promise.GetFuture().Get();
}

int32 SimulationService::FuncInt(int32 ParamInt)
{
    Params params;
    params["paramInt"] = ParamInt;
    TPromise<int32> Promise;
    Async(EAsyncExecution::Thread, [params, &Promise]()
    {
        CallResponseFunc GetSimpleInterfaceStateFunc = [&Promise](CallResponseArg arg)
        {
            Promise.SetValue(arg.result.get<int32>());
        };
        if (GEngine != nullptr)
        {
            UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
            AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "funcInt", params, GetSimpleInterfaceStateFunc);
        }
    });

    return Promise.GetFuture().Get();
}

float SimulationService::FuncFloat(float ParamFloat)
{
    Params params;
    params["paramFloat"] = ParamFloat;
    TPromise<float> Promise;
    Async(EAsyncExecution::Thread, [params, &Promise]()
    {
        CallResponseFunc GetSimpleInterfaceStateFunc = [&Promise](CallResponseArg arg)
        {
            Promise.SetValue(arg.result.get<float>());
        };
        if (GEngine != nullptr)
        {
            UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
            AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "funcFloat", params, GetSimpleInterfaceStateFunc);
        }
    });

    return Promise.GetFuture().Get();
}

FString SimulationService::FuncString(const FString& ParamString)
{
    Params params;
    params["paramString"] = ParamString;
    TPromise<FString> Promise;
    Async(EAsyncExecution::Thread, [params, &Promise]()
    {
        CallResponseFunc GetSimpleInterfaceStateFunc = [&Promise](CallResponseArg arg)
        {
            Promise.SetValue(arg.result.get<FString>());
        };
        if (GEngine != nullptr)
        {
            UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
            AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "funcString", params, GetSimpleInterfaceStateFunc);
        }
    });

    return Promise.GetFuture().Get();
}


} // namespace Private
} // namespace SimpleInterface
} // namespace TbSimple
