/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbSimpleSimpleInterfaceOLinkClient.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Generated/api/TbSimple.json.adapter.h"
#include "unrealolink.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "ApiGear/Public/ApiGearConnectionManager.h"
#include "Misc/DateTime.h"

using namespace ApiGear::ObjectLink;
UTbSimpleSimpleInterfaceOLinkClient::UTbSimpleSimpleInterfaceOLinkClient()
	: ITbSimpleSimpleInterfaceInterface()
	, m_node(nullptr)
	, m_isReady(false)
{
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetOLinkConnection()->Connect();
		AGCM->GetOLinkConnection()->linkObjectSource(olinkObjectName());
	}
	m_node = ClientRegistry::get().addObjectSink(this);
}

UTbSimpleSimpleInterfaceOLinkClient::~UTbSimpleSimpleInterfaceOLinkClient()
{
	ClientRegistry::get().removeObjectSink(this);
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetOLinkConnection()->unlinkObjectSource(olinkObjectName());
	}
	m_isReady = false;
	m_node = nullptr;
}

void UTbSimpleSimpleInterfaceOLinkClient::BroadcastSigBool_Implementation(bool bParamBool)
{
	SigBoolSignal.Broadcast(bParamBool);
}

FTbSimpleSimpleInterfaceSigBoolDelegate& UTbSimpleSimpleInterfaceOLinkClient::GetSigBoolSignalDelegate()
{
	return SigBoolSignal;
}

void UTbSimpleSimpleInterfaceOLinkClient::BroadcastSigInt_Implementation(int32 ParamInt)
{
	SigIntSignal.Broadcast(ParamInt);
}

FTbSimpleSimpleInterfaceSigIntDelegate& UTbSimpleSimpleInterfaceOLinkClient::GetSigIntSignalDelegate()
{
	return SigIntSignal;
}

void UTbSimpleSimpleInterfaceOLinkClient::BroadcastSigFloat_Implementation(float ParamFloat)
{
	SigFloatSignal.Broadcast(ParamFloat);
}

FTbSimpleSimpleInterfaceSigFloatDelegate& UTbSimpleSimpleInterfaceOLinkClient::GetSigFloatSignalDelegate()
{
	return SigFloatSignal;
}

void UTbSimpleSimpleInterfaceOLinkClient::BroadcastSigString_Implementation(const FString& ParamString)
{
	SigStringSignal.Broadcast(ParamString);
}

FTbSimpleSimpleInterfaceSigStringDelegate& UTbSimpleSimpleInterfaceOLinkClient::GetSigStringSignalDelegate()
{
	return SigStringSignal;
}

void UTbSimpleSimpleInterfaceOLinkClient::BroadcastPropBoolChanged_Implementation(bool bInPropBool)
{
	bPropBool = bInPropBool;
	PropBoolChanged.Broadcast(bInPropBool);
}

bool UTbSimpleSimpleInterfaceOLinkClient::GetPropBool_Implementation() const
{
	return bPropBool;
}

void UTbSimpleSimpleInterfaceOLinkClient::SetPropBool_Implementation(bool bInPropBool)
{
	if (!m_node)
	{
		return;
	}
	m_node->setRemoteProperty("tb.simple.SimpleInterface/propBool", bInPropBool);
}

FTbSimpleSimpleInterfacePropBoolChangedDelegate& UTbSimpleSimpleInterfaceOLinkClient::GetPropBoolChangedDelegate()
{
	return PropBoolChanged;
}

void UTbSimpleSimpleInterfaceOLinkClient::BroadcastPropIntChanged_Implementation(int32 InPropInt)
{
	PropInt = InPropInt;
	PropIntChanged.Broadcast(InPropInt);
}

int32 UTbSimpleSimpleInterfaceOLinkClient::GetPropInt_Implementation() const
{
	return PropInt;
}

void UTbSimpleSimpleInterfaceOLinkClient::SetPropInt_Implementation(int32 InPropInt)
{
	if (!m_node)
	{
		return;
	}
	m_node->setRemoteProperty("tb.simple.SimpleInterface/propInt", InPropInt);
}

FTbSimpleSimpleInterfacePropIntChangedDelegate& UTbSimpleSimpleInterfaceOLinkClient::GetPropIntChangedDelegate()
{
	return PropIntChanged;
}

void UTbSimpleSimpleInterfaceOLinkClient::BroadcastPropFloatChanged_Implementation(float InPropFloat)
{
	PropFloat = InPropFloat;
	PropFloatChanged.Broadcast(InPropFloat);
}

float UTbSimpleSimpleInterfaceOLinkClient::GetPropFloat_Implementation() const
{
	return PropFloat;
}

void UTbSimpleSimpleInterfaceOLinkClient::SetPropFloat_Implementation(float InPropFloat)
{
	if (!m_node)
	{
		return;
	}
	m_node->setRemoteProperty("tb.simple.SimpleInterface/propFloat", InPropFloat);
}

FTbSimpleSimpleInterfacePropFloatChangedDelegate& UTbSimpleSimpleInterfaceOLinkClient::GetPropFloatChangedDelegate()
{
	return PropFloatChanged;
}

void UTbSimpleSimpleInterfaceOLinkClient::BroadcastPropStringChanged_Implementation(const FString& InPropString)
{
	PropString = InPropString;
	PropStringChanged.Broadcast(InPropString);
}

FString UTbSimpleSimpleInterfaceOLinkClient::GetPropString_Implementation() const
{
	return PropString;
}

void UTbSimpleSimpleInterfaceOLinkClient::SetPropString_Implementation(const FString& InPropString)
{
	if (!m_node)
	{
		return;
	}
	m_node->setRemoteProperty("tb.simple.SimpleInterface/propString", InPropString);
}

FTbSimpleSimpleInterfacePropStringChangedDelegate& UTbSimpleSimpleInterfaceOLinkClient::GetPropStringChangedDelegate()
{
	return PropStringChanged;
}

bool UTbSimpleSimpleInterfaceOLinkClient::FuncBool_Implementation(bool bParamBool)
{
	if (!m_node)
	{
		UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
		return false;
	}
	TPromise<bool> Promise;
	Async(EAsyncExecution::Thread,
		[bParamBool, &Promise, this]()
		{
			InvokeReplyFunc GetSimpleInterfaceStateFunc = [&Promise](InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<bool>()); };
			m_node->invokeRemote("tb.simple.SimpleInterface/funcBool", {bParamBool}, GetSimpleInterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

int32 UTbSimpleSimpleInterfaceOLinkClient::FuncInt_Implementation(int32 ParamInt)
{
	if (!m_node)
	{
		UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
		return 0;
	}
	TPromise<int32> Promise;
	Async(EAsyncExecution::Thread,
		[ParamInt, &Promise, this]()
		{
			InvokeReplyFunc GetSimpleInterfaceStateFunc = [&Promise](InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<int32>()); };
			m_node->invokeRemote("tb.simple.SimpleInterface/funcInt", {ParamInt}, GetSimpleInterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

float UTbSimpleSimpleInterfaceOLinkClient::FuncFloat_Implementation(float ParamFloat)
{
	if (!m_node)
	{
		UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
		return 0.0f;
	}
	TPromise<float> Promise;
	Async(EAsyncExecution::Thread,
		[ParamFloat, &Promise, this]()
		{
			InvokeReplyFunc GetSimpleInterfaceStateFunc = [&Promise](InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<float>()); };
			m_node->invokeRemote("tb.simple.SimpleInterface/funcFloat", {ParamFloat}, GetSimpleInterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

FString UTbSimpleSimpleInterfaceOLinkClient::FuncString_Implementation(const FString& ParamString)
{
	if (!m_node)
	{
		UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
		return FString();
	}
	TPromise<FString> Promise;
	Async(EAsyncExecution::Thread,
		[ParamString, &Promise, this]()
		{
			InvokeReplyFunc GetSimpleInterfaceStateFunc = [&Promise](InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<FString>()); };
			m_node->invokeRemote("tb.simple.SimpleInterface/funcString", {ParamString}, GetSimpleInterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

void UTbSimpleSimpleInterfaceOLinkClient::applyState(const nlohmann::json& fields)
{
	if (fields.contains("propBool"))
	{
		if (bPropBool != fields["propBool"].get<bool>())
		{
			bPropBool = fields["propBool"].get<bool>();
			Execute_BroadcastPropBoolChanged(this, bPropBool);
		}
	}
	if (fields.contains("propInt"))
	{
		if (PropInt != fields["propInt"].get<int32>())
		{
			PropInt = fields["propInt"].get<int32>();
			Execute_BroadcastPropIntChanged(this, PropInt);
		}
	}
	if (fields.contains("propFloat"))
	{
		if (PropFloat != fields["propFloat"].get<float>())
		{
			PropFloat = fields["propFloat"].get<float>();
			Execute_BroadcastPropFloatChanged(this, PropFloat);
		}
	}
	if (fields.contains("propString"))
	{
		if (PropString != fields["propString"].get<FString>())
		{
			PropString = fields["propString"].get<FString>();
			Execute_BroadcastPropStringChanged(this, PropString);
		}
	}
}

std::string UTbSimpleSimpleInterfaceOLinkClient::olinkObjectName()
{
	return "tb.simple.SimpleInterface";
}

void UTbSimpleSimpleInterfaceOLinkClient::olinkOnSignal(std::string name, nlohmann::json args)
{
	std::string path = Name::pathFromName(name);
	if (path == "sigBool")
	{
		Execute_BroadcastSigBool(this, args[0].get<bool>());
		return;
	}
	if (path == "sigInt")
	{
		Execute_BroadcastSigInt(this, args[0].get<int32>());
		return;
	}
	if (path == "sigFloat")
	{
		Execute_BroadcastSigFloat(this, args[0].get<float>());
		return;
	}
	if (path == "sigString")
	{
		Execute_BroadcastSigString(this, args[0].get<FString>());
		return;
	}
}

void UTbSimpleSimpleInterfaceOLinkClient::olinkOnPropertyChanged(std::string name, nlohmann::json value)
{
	std::string path = Name::pathFromName(name);
	applyState({{path, value}});
}

void UTbSimpleSimpleInterfaceOLinkClient::olinkOnInit(std::string name, nlohmann::json props, IClientNode* node)
{
	m_isReady = true;
	m_node = node;
	applyState(props);
	// call isReady();
}

void UTbSimpleSimpleInterfaceOLinkClient::olinkOnRelease()
{
	m_isReady = false;
	m_node = nullptr;
}
