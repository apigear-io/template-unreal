/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbSimpleNoSignalsInterfaceOLinkSource.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Generated/api/TbSimple.json.adapter.h"
#include "unrealolink.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
THIRD_PARTY_INCLUDES_START
#include "olink/iobjectsource.h"
THIRD_PARTY_INCLUDES_END

using namespace ApiGear::ObjectLink;

namespace
{
static const std::string TbSimpleNoSignalsInterfaceIdentifier{"tb.simple.NoSignalsInterface"};
}
TbSimpleNoSignalsInterfaceOLinkSource::TbSimpleNoSignalsInterfaceOLinkSource()
	: Host(nullptr)
{
}

void TbSimpleNoSignalsInterfaceOLinkSource::setBackendService(TScriptInterface<ITbSimpleNoSignalsInterfaceInterface> InService)
{
	// only set if interface is implemented
	if (InService.GetInterface() == nullptr)
	{
		UE_LOG(LogTemp, Error, TEXT("Cannot set backend service to %s - interface TbSimpleNoSignalsInterface is not fully implemented"), *InService.GetObject()->GetName());
		return;
	}

	BackendService = InService;
}
void TbSimpleNoSignalsInterfaceOLinkSource::OnPropBoolChanged(bool bInPropBool)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "propBool");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, bInPropBool);
		}
	}
}

void TbSimpleNoSignalsInterfaceOLinkSource::OnPropIntChanged(int32 InPropInt)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "propInt");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InPropInt);
		}
	}
}

void TbSimpleNoSignalsInterfaceOLinkSource::setOLinkHost(TSoftObjectPtr<UUnrealOLinkHost> InHost)
{
	Host = InHost.Get();
}

//
// IObjectSource interface
//

std::string TbSimpleNoSignalsInterfaceOLinkSource::olinkObjectName()
{
	return TbSimpleNoSignalsInterfaceIdentifier;
}

nlohmann::json TbSimpleNoSignalsInterfaceOLinkSource::olinkInvoke(const std::string& methodId, const nlohmann::json& args)
{
	const std::string path = Name::getMemberName(methodId);
	if (path == "funcVoid")
	{
		BackendService->Execute_FuncVoid(BackendService.GetObject());
		return nlohmann::json{};
	}
	if (path == "funcBool")
	{
		bool bParamBool = args.at(0);
		bool result = BackendService->Execute_FuncBool(BackendService.GetObject(), bParamBool);
		return result;
	}
	return nlohmann::json();
}

void TbSimpleNoSignalsInterfaceOLinkSource::olinkSetProperty(const std::string& propertyId, const nlohmann::json& value)
{
	const std::string path = Name::getMemberName(propertyId);
	if (path == "propBool")
	{
		bool bPropBool = value.get<bool>();
		BackendService->Execute_SetPropBool(BackendService.GetObject(), bPropBool);
	}
	if (path == "propInt")
	{
		int32 PropInt = value.get<int32>();
		BackendService->Execute_SetPropInt(BackendService.GetObject(), PropInt);
	}
}

nlohmann::json TbSimpleNoSignalsInterfaceOLinkSource::olinkCollectProperties()
{
	return nlohmann::json::object({

		{"propBool", BackendService->Execute_GetPropBool(BackendService.GetObject())},
		{"propInt", BackendService->Execute_GetPropInt(BackendService.GetObject())}});
}
