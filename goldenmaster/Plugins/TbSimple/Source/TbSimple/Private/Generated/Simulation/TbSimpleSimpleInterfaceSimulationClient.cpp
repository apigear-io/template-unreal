/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbSimpleSimpleInterfaceSimulationClient.h"
#include "Generated/api/TbSimple.json.adapter.h"
#include "ApiGear/Public/ApiGearConnectionManager.h"
#include "unrealsimulation.h"
#include "Async/Async.h"
#include "Engine/Engine.h"

using namespace ApiGear::JSONRPC;
UTbSimpleSimpleInterfaceSimulationClient::UTbSimpleSimpleInterfaceSimulationClient()
	: ITbSimpleSimpleInterfaceInterface()
{
	UApiGearConnectionManager* AGCM = nullptr;
	if (GEngine != nullptr)
	{
		AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
	}
	NotifyRequestFunc SimpleInterfaceStateChangedFunc = [this](NotifyRequestArg arg)
	{
		const json fields = arg.params;
		if (fields.contains("propBool"))
		{
			if (bPropBool != fields["propBool"].get<bool>())
			{
				bPropBool = fields["propBool"].get<bool>();
				Execute_BroadcastPropBoolChanged(this, bPropBool);
			}
		}
		if (fields.contains("propInt"))
		{
			if (PropInt != fields["propInt"].get<int32>())
			{
				PropInt = fields["propInt"].get<int32>();
				Execute_BroadcastPropIntChanged(this, PropInt);
			}
		}
		if (fields.contains("propFloat"))
		{
			if (PropFloat != fields["propFloat"].get<float>())
			{
				PropFloat = fields["propFloat"].get<float>();
				Execute_BroadcastPropFloatChanged(this, PropFloat);
			}
		}
		if (fields.contains("propString"))
		{
			if (PropString != fields["propString"].get<FString>())
			{
				PropString = fields["propString"].get<FString>();
				Execute_BroadcastPropStringChanged(this, PropString);
			}
		}
	};
	if (AGCM != nullptr)
	{
		AGCM->GetSimulationConnection()->Connect();
		AGCM->GetSimulationConnection()->onNotifyState("tb.simple/SimpleInterface", SimpleInterfaceStateChangedFunc);
	}

	CallResponseFunc GetSimpleInterfaceStateFunc = [this](CallResponseArg arg)
	{
		if (arg.result.size() != 1)
		{
			return;
		}
		const json fields = arg.result;
		if (fields.contains("propBool"))
		{
			if (bPropBool != fields["propBool"].get<bool>())
			{
				bPropBool = fields["propBool"].get<bool>();
				Execute_BroadcastPropBoolChanged(this, bPropBool);
			}
		}
		if (fields.contains("propInt"))
		{
			if (PropInt != fields["propInt"].get<int32>())
			{
				PropInt = fields["propInt"].get<int32>();
				Execute_BroadcastPropIntChanged(this, PropInt);
			}
		}
		if (fields.contains("propFloat"))
		{
			if (PropFloat != fields["propFloat"].get<float>())
			{
				PropFloat = fields["propFloat"].get<float>();
				Execute_BroadcastPropFloatChanged(this, PropFloat);
			}
		}
		if (fields.contains("propString"))
		{
			if (PropString != fields["propString"].get<FString>())
			{
				PropString = fields["propString"].get<FString>();
				Execute_BroadcastPropStringChanged(this, PropString);
			}
		}
	};
	if (AGCM != nullptr)
	{
		AGCM->GetSimulationConnection()->doFetchState("tb.simple/SimpleInterface", GetSimpleInterfaceStateFunc);
	}

	// register notification callback functions, signal/event -> fcn
	NotifyRequestFunc sigBoolFunc = [this](NotifyRequestArg arg)
	{
		const json fields = arg.params;
		if (fields.contains("paramBool"))
		{
			Execute_BroadcastSigBool(this, fields["paramBool"].get<bool>());
		}
	};
	if (AGCM != nullptr)
	{
		AGCM->GetSimulationConnection()->onNotify("tb.simple/SimpleInterface#sigBool", sigBoolFunc);
	}

	NotifyRequestFunc sigIntFunc = [this](NotifyRequestArg arg)
	{
		const json fields = arg.params;
		if (fields.contains("paramInt"))
		{
			Execute_BroadcastSigInt(this, fields["paramInt"].get<int32>());
		}
	};
	if (AGCM != nullptr)
	{
		AGCM->GetSimulationConnection()->onNotify("tb.simple/SimpleInterface#sigInt", sigIntFunc);
	}

	NotifyRequestFunc sigFloatFunc = [this](NotifyRequestArg arg)
	{
		const json fields = arg.params;
		if (fields.contains("paramFloat"))
		{
			Execute_BroadcastSigFloat(this, fields["paramFloat"].get<float>());
		}
	};
	if (AGCM != nullptr)
	{
		AGCM->GetSimulationConnection()->onNotify("tb.simple/SimpleInterface#sigFloat", sigFloatFunc);
	}

	NotifyRequestFunc sigStringFunc = [this](NotifyRequestArg arg)
	{
		const json fields = arg.params;
		if (fields.contains("paramString"))
		{
			Execute_BroadcastSigString(this, fields["paramString"].get<FString>());
		}
	};
	if (AGCM != nullptr)
	{
		AGCM->GetSimulationConnection()->onNotify("tb.simple/SimpleInterface#sigString", sigStringFunc);
	}
}

UTbSimpleSimpleInterfaceSimulationClient::~UTbSimpleSimpleInterfaceSimulationClient()
{
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetSimulationConnection()->RemoveOnNotifyState("tb.simple/SimpleInterface");
		// unregister notification callback functions
		AGCM->GetSimulationConnection()->RemoveOnNotify("tb.simple/SimpleInterface#sigBool");
		AGCM->GetSimulationConnection()->RemoveOnNotify("tb.simple/SimpleInterface#sigInt");
		AGCM->GetSimulationConnection()->RemoveOnNotify("tb.simple/SimpleInterface#sigFloat");
		AGCM->GetSimulationConnection()->RemoveOnNotify("tb.simple/SimpleInterface#sigString");
	}
}

void UTbSimpleSimpleInterfaceSimulationClient::BroadcastSigBool_Implementation(bool bParamBool)
{
	SigBoolSignal.Broadcast(bParamBool);
}

FTbSimpleSimpleInterfaceSigBoolDelegate& UTbSimpleSimpleInterfaceSimulationClient::GetSigBoolSignalDelegate()
{
	return SigBoolSignal;
}

void UTbSimpleSimpleInterfaceSimulationClient::BroadcastSigInt_Implementation(int32 ParamInt)
{
	SigIntSignal.Broadcast(ParamInt);
}

FTbSimpleSimpleInterfaceSigIntDelegate& UTbSimpleSimpleInterfaceSimulationClient::GetSigIntSignalDelegate()
{
	return SigIntSignal;
}

void UTbSimpleSimpleInterfaceSimulationClient::BroadcastSigFloat_Implementation(float ParamFloat)
{
	SigFloatSignal.Broadcast(ParamFloat);
}

FTbSimpleSimpleInterfaceSigFloatDelegate& UTbSimpleSimpleInterfaceSimulationClient::GetSigFloatSignalDelegate()
{
	return SigFloatSignal;
}

void UTbSimpleSimpleInterfaceSimulationClient::BroadcastSigString_Implementation(const FString& ParamString)
{
	SigStringSignal.Broadcast(ParamString);
}

FTbSimpleSimpleInterfaceSigStringDelegate& UTbSimpleSimpleInterfaceSimulationClient::GetSigStringSignalDelegate()
{
	return SigStringSignal;
}

void UTbSimpleSimpleInterfaceSimulationClient::BroadcastPropBoolChanged_Implementation(bool bInPropBool)
{
	bPropBool = bInPropBool;
	PropBoolChanged.Broadcast(bInPropBool);
}

bool UTbSimpleSimpleInterfaceSimulationClient::GetPropBool_Implementation() const
{
	return bPropBool;
}

void UTbSimpleSimpleInterfaceSimulationClient::SetPropBool_Implementation(bool bInPropBool)
{
	Params params;
	params["propBool"] = bInPropBool;
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "_set", params);
	}
}

FTbSimpleSimpleInterfacePropBoolChangedDelegate& UTbSimpleSimpleInterfaceSimulationClient::GetPropBoolChangedDelegate()
{
	return PropBoolChanged;
}

void UTbSimpleSimpleInterfaceSimulationClient::BroadcastPropIntChanged_Implementation(int32 InPropInt)
{
	PropInt = InPropInt;
	PropIntChanged.Broadcast(InPropInt);
}

int32 UTbSimpleSimpleInterfaceSimulationClient::GetPropInt_Implementation() const
{
	return PropInt;
}

void UTbSimpleSimpleInterfaceSimulationClient::SetPropInt_Implementation(int32 InPropInt)
{
	Params params;
	params["propInt"] = InPropInt;
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "_set", params);
	}
}

FTbSimpleSimpleInterfacePropIntChangedDelegate& UTbSimpleSimpleInterfaceSimulationClient::GetPropIntChangedDelegate()
{
	return PropIntChanged;
}

void UTbSimpleSimpleInterfaceSimulationClient::BroadcastPropFloatChanged_Implementation(float InPropFloat)
{
	PropFloat = InPropFloat;
	PropFloatChanged.Broadcast(InPropFloat);
}

float UTbSimpleSimpleInterfaceSimulationClient::GetPropFloat_Implementation() const
{
	return PropFloat;
}

void UTbSimpleSimpleInterfaceSimulationClient::SetPropFloat_Implementation(float InPropFloat)
{
	Params params;
	params["propFloat"] = InPropFloat;
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "_set", params);
	}
}

FTbSimpleSimpleInterfacePropFloatChangedDelegate& UTbSimpleSimpleInterfaceSimulationClient::GetPropFloatChangedDelegate()
{
	return PropFloatChanged;
}

void UTbSimpleSimpleInterfaceSimulationClient::BroadcastPropStringChanged_Implementation(const FString& InPropString)
{
	PropString = InPropString;
	PropStringChanged.Broadcast(InPropString);
}

FString UTbSimpleSimpleInterfaceSimulationClient::GetPropString_Implementation() const
{
	return PropString;
}

void UTbSimpleSimpleInterfaceSimulationClient::SetPropString_Implementation(const FString& InPropString)
{
	Params params;
	params["propString"] = InPropString;
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "_set", params);
	}
}

FTbSimpleSimpleInterfacePropStringChangedDelegate& UTbSimpleSimpleInterfaceSimulationClient::GetPropStringChangedDelegate()
{
	return PropStringChanged;
}

bool UTbSimpleSimpleInterfaceSimulationClient::FuncBool_Implementation(bool bParamBool)
{
	Params params;
	params["paramBool"] = bParamBool;
	TPromise<bool> Promise;
	Async(EAsyncExecution::Thread,
		[params, &Promise]()
		{
			CallResponseFunc GetSimpleInterfaceStateFunc = [&Promise](CallResponseArg arg)
			{ Promise.SetValue(arg.result.get<bool>()); };
			if (GEngine != nullptr)
			{
				UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
				AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "funcBool", params, GetSimpleInterfaceStateFunc);
			}
		});

	return Promise.GetFuture().Get();
}

int32 UTbSimpleSimpleInterfaceSimulationClient::FuncInt_Implementation(int32 ParamInt)
{
	Params params;
	params["paramInt"] = ParamInt;
	TPromise<int32> Promise;
	Async(EAsyncExecution::Thread,
		[params, &Promise]()
		{
			CallResponseFunc GetSimpleInterfaceStateFunc = [&Promise](CallResponseArg arg)
			{ Promise.SetValue(arg.result.get<int32>()); };
			if (GEngine != nullptr)
			{
				UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
				AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "funcInt", params, GetSimpleInterfaceStateFunc);
			}
		});

	return Promise.GetFuture().Get();
}

float UTbSimpleSimpleInterfaceSimulationClient::FuncFloat_Implementation(float ParamFloat)
{
	Params params;
	params["paramFloat"] = ParamFloat;
	TPromise<float> Promise;
	Async(EAsyncExecution::Thread,
		[params, &Promise]()
		{
			CallResponseFunc GetSimpleInterfaceStateFunc = [&Promise](CallResponseArg arg)
			{ Promise.SetValue(arg.result.get<float>()); };
			if (GEngine != nullptr)
			{
				UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
				AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "funcFloat", params, GetSimpleInterfaceStateFunc);
			}
		});

	return Promise.GetFuture().Get();
}

FString UTbSimpleSimpleInterfaceSimulationClient::FuncString_Implementation(const FString& ParamString)
{
	Params params;
	params["paramString"] = ParamString;
	TPromise<FString> Promise;
	Async(EAsyncExecution::Thread,
		[params, &Promise]()
		{
			CallResponseFunc GetSimpleInterfaceStateFunc = [&Promise](CallResponseArg arg)
			{ Promise.SetValue(arg.result.get<FString>()); };
			if (GEngine != nullptr)
			{
				UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
				AGCM->GetSimulationConnection()->doCall("tb.simple/SimpleInterface", "funcString", params, GetSimpleInterfaceStateFunc);
			}
		});

	return Promise.GetFuture().Get();
}
