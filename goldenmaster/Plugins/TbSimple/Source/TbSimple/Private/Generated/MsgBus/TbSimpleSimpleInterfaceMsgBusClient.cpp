/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/MsgBus/TbSimpleSimpleInterfaceMsgBusClient.h"
#include "Generated/MsgBus/TbSimpleSimpleInterfaceMsgBusMessages.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
#include "MessageEndpointBuilder.h"
#include "MessageEndpoint.h"
#include <atomic>
#include "HAL/CriticalSection.h"

/**
   \brief data structure to hold the last sent property values
*/
struct TbSimpleSimpleInterfacePropertiesMsgBusData
{
	std::atomic<bool> bPropBool{false};
	std::atomic<int32> PropInt{0};
	std::atomic<int32> PropInt32{0};
	std::atomic<int64> PropInt64{0LL};
	std::atomic<float> PropFloat{0.0f};
	std::atomic<float> PropFloat32{0.0f};
	std::atomic<double> PropFloat64{0.0};
	FCriticalSection PropStringMutex;
	FString PropString{FString()};
};
DEFINE_LOG_CATEGORY(LogTbSimpleSimpleInterfaceMsgBusClient);

UTbSimpleSimpleInterfaceMsgBusClient::UTbSimpleSimpleInterfaceMsgBusClient()
	: UAbstractTbSimpleSimpleInterface()
	, _SentData(MakePimpl<TbSimpleSimpleInterfacePropertiesMsgBusData>())
{
	/* m_sink = std::make_shared<FOLinkSink>("tb.simple.SimpleInterface"); */
}

UTbSimpleSimpleInterfaceMsgBusClient::~UTbSimpleSimpleInterfaceMsgBusClient() = default;

void UTbSimpleSimpleInterfaceMsgBusClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	Connect();
}

void UTbSimpleSimpleInterfaceMsgBusClient::Deinitialize()
{
	Disconnect();

	Super::Deinitialize();
}

void UTbSimpleSimpleInterfaceMsgBusClient::Connect()
{
	if (IsConnected())
	{
		return;
	}

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && !ServiceAddress.IsValid())
	{
		DiscoverService();
		return;
	}

	// clang-format off
	TbSimpleSimpleInterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSimple/SimpleInterface/Client")
		.Handling<FTbSimpleSimpleInterfaceInitMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnConnectionInit)
		.Handling<FTbSimpleSimpleInterfaceServiceDisconnectMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnServiceClosedConnection)
		.Handling<FTbSimpleSimpleInterfaceSigBoolSignalMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnSigBool)

		.Handling<FTbSimpleSimpleInterfaceSigIntSignalMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnSigInt)

		.Handling<FTbSimpleSimpleInterfaceSigInt32SignalMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnSigInt32)

		.Handling<FTbSimpleSimpleInterfaceSigInt64SignalMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnSigInt64)

		.Handling<FTbSimpleSimpleInterfaceSigFloatSignalMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnSigFloat)

		.Handling<FTbSimpleSimpleInterfaceSigFloat32SignalMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnSigFloat32)

		.Handling<FTbSimpleSimpleInterfaceSigFloat64SignalMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnSigFloat64)

		.Handling<FTbSimpleSimpleInterfaceSigStringSignalMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnSigString)
		.Handling<FTbSimpleSimpleInterfacePropBoolChangedMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnPropBoolChanged)

		.Handling<FTbSimpleSimpleInterfacePropIntChangedMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnPropIntChanged)

		.Handling<FTbSimpleSimpleInterfacePropInt32ChangedMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnPropInt32Changed)

		.Handling<FTbSimpleSimpleInterfacePropInt64ChangedMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnPropInt64Changed)

		.Handling<FTbSimpleSimpleInterfacePropFloatChangedMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnPropFloatChanged)

		.Handling<FTbSimpleSimpleInterfacePropFloat32ChangedMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnPropFloat32Changed)

		.Handling<FTbSimpleSimpleInterfacePropFloat64ChangedMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnPropFloat64Changed)

		.Handling<FTbSimpleSimpleInterfacePropStringChangedMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnPropStringChanged)
		.Handling<FTbSimpleSimpleInterfaceFuncBoolReplyMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnFuncBoolReply)
		.Handling<FTbSimpleSimpleInterfaceFuncIntReplyMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnFuncIntReply)
		.Handling<FTbSimpleSimpleInterfaceFuncInt32ReplyMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnFuncInt32Reply)
		.Handling<FTbSimpleSimpleInterfaceFuncInt64ReplyMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnFuncInt64Reply)
		.Handling<FTbSimpleSimpleInterfaceFuncFloatReplyMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnFuncFloatReply)
		.Handling<FTbSimpleSimpleInterfaceFuncFloat32ReplyMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnFuncFloat32Reply)
		.Handling<FTbSimpleSimpleInterfaceFuncFloat64ReplyMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnFuncFloat64Reply)
		.Handling<FTbSimpleSimpleInterfaceFuncStringReplyMessage>(this, &UTbSimpleSimpleInterfaceMsgBusClient::OnFuncStringReply)
		.Build();
	// clang-format on

	DiscoverService();
}

void UTbSimpleSimpleInterfaceMsgBusClient::Disconnect()
{
	if (!IsConnected())
	{
		return;
	}

	auto msg = new FTbSimpleSimpleInterfaceClientDisconnectMessage();

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceClientDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbSimpleSimpleInterfaceMsgBusEndpoint.Reset();
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

void UTbSimpleSimpleInterfaceMsgBusClient::DiscoverService()
{
	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Publish<FTbSimpleSimpleInterfaceDiscoveryMessage>(new FTbSimpleSimpleInterfaceDiscoveryMessage());
	}
}

bool UTbSimpleSimpleInterfaceMsgBusClient::IsConnected() const
{
	return TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && ServiceAddress.IsValid();
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnConnectionInit(const FTbSimpleSimpleInterfaceInitMessage& InInitMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ServiceAddress.IsValid())
	{
		ServiceAddress = Context->GetSender();
		const bool bbPropBoolChanged = InInitMessage.bPropBool != bPropBool;
		if (bbPropBoolChanged)
		{
			bPropBool = InInitMessage.bPropBool;
			Execute__GetSignals(this)->OnPropBoolChanged.Broadcast(bPropBool);
		}

		const bool bPropIntChanged = InInitMessage.PropInt != PropInt;
		if (bPropIntChanged)
		{
			PropInt = InInitMessage.PropInt;
			Execute__GetSignals(this)->OnPropIntChanged.Broadcast(PropInt);
		}

		const bool bPropInt32Changed = InInitMessage.PropInt32 != PropInt32;
		if (bPropInt32Changed)
		{
			PropInt32 = InInitMessage.PropInt32;
			Execute__GetSignals(this)->OnPropInt32Changed.Broadcast(PropInt32);
		}

		const bool bPropInt64Changed = InInitMessage.PropInt64 != PropInt64;
		if (bPropInt64Changed)
		{
			PropInt64 = InInitMessage.PropInt64;
			Execute__GetSignals(this)->OnPropInt64Changed.Broadcast(PropInt64);
		}

		const bool bPropFloatChanged = InInitMessage.PropFloat != PropFloat;
		if (bPropFloatChanged)
		{
			PropFloat = InInitMessage.PropFloat;
			Execute__GetSignals(this)->OnPropFloatChanged.Broadcast(PropFloat);
		}

		const bool bPropFloat32Changed = InInitMessage.PropFloat32 != PropFloat32;
		if (bPropFloat32Changed)
		{
			PropFloat32 = InInitMessage.PropFloat32;
			Execute__GetSignals(this)->OnPropFloat32Changed.Broadcast(PropFloat32);
		}

		const bool bPropFloat64Changed = InInitMessage.PropFloat64 != PropFloat64;
		if (bPropFloat64Changed)
		{
			PropFloat64 = InInitMessage.PropFloat64;
			Execute__GetSignals(this)->OnPropFloat64Changed.Broadcast(PropFloat64);
		}

		const bool bPropStringChanged = InInitMessage.PropString != PropString;
		if (bPropStringChanged)
		{
			PropString = InInitMessage.PropString;
			Execute__GetSignals(this)->OnPropStringChanged.Broadcast(PropString);
		}

		_ConnectionStatusChanged.Broadcast(true);
	}
	else
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a second init message - should not happen"));
	}
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnServiceClosedConnection(const FTbSimpleSimpleInterfaceServiceDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		return;
	}

	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

bool UTbSimpleSimpleInterfaceMsgBusClient::GetPropBool_Implementation() const
{
	return bPropBool;
}

void UTbSimpleSimpleInterfaceMsgBusClient::SetPropBool_Implementation(bool bInPropBool)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropBool_Implementation() == bInPropBool)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->bPropBool == bInPropBool)
	{
		return;
	}

	auto msg = new FTbSimpleSimpleInterfaceSetPropBoolRequestMessage();
	msg->bPropBool = bInPropBool;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSetPropBoolRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		_SentData->bPropBool = bInPropBool;
	}
}

int32 UTbSimpleSimpleInterfaceMsgBusClient::GetPropInt_Implementation() const
{
	return PropInt;
}

void UTbSimpleSimpleInterfaceMsgBusClient::SetPropInt_Implementation(int32 InPropInt)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropInt_Implementation() == InPropInt)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->PropInt == InPropInt)
	{
		return;
	}

	auto msg = new FTbSimpleSimpleInterfaceSetPropIntRequestMessage();
	msg->PropInt = InPropInt;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSetPropIntRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		_SentData->PropInt = InPropInt;
	}
}

int32 UTbSimpleSimpleInterfaceMsgBusClient::GetPropInt32_Implementation() const
{
	return PropInt32;
}

void UTbSimpleSimpleInterfaceMsgBusClient::SetPropInt32_Implementation(int32 InPropInt32)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropInt32_Implementation() == InPropInt32)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->PropInt32 == InPropInt32)
	{
		return;
	}

	auto msg = new FTbSimpleSimpleInterfaceSetPropInt32RequestMessage();
	msg->PropInt32 = InPropInt32;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSetPropInt32RequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		_SentData->PropInt32 = InPropInt32;
	}
}

int64 UTbSimpleSimpleInterfaceMsgBusClient::GetPropInt64_Implementation() const
{
	return PropInt64;
}

void UTbSimpleSimpleInterfaceMsgBusClient::SetPropInt64_Implementation(int64 InPropInt64)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropInt64_Implementation() == InPropInt64)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->PropInt64 == InPropInt64)
	{
		return;
	}

	auto msg = new FTbSimpleSimpleInterfaceSetPropInt64RequestMessage();
	msg->PropInt64 = InPropInt64;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSetPropInt64RequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		_SentData->PropInt64 = InPropInt64;
	}
}

float UTbSimpleSimpleInterfaceMsgBusClient::GetPropFloat_Implementation() const
{
	return PropFloat;
}

void UTbSimpleSimpleInterfaceMsgBusClient::SetPropFloat_Implementation(float InPropFloat)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropFloat_Implementation() == InPropFloat)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->PropFloat == InPropFloat)
	{
		return;
	}

	auto msg = new FTbSimpleSimpleInterfaceSetPropFloatRequestMessage();
	msg->PropFloat = InPropFloat;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSetPropFloatRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		_SentData->PropFloat = InPropFloat;
	}
}

float UTbSimpleSimpleInterfaceMsgBusClient::GetPropFloat32_Implementation() const
{
	return PropFloat32;
}

void UTbSimpleSimpleInterfaceMsgBusClient::SetPropFloat32_Implementation(float InPropFloat32)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropFloat32_Implementation() == InPropFloat32)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->PropFloat32 == InPropFloat32)
	{
		return;
	}

	auto msg = new FTbSimpleSimpleInterfaceSetPropFloat32RequestMessage();
	msg->PropFloat32 = InPropFloat32;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSetPropFloat32RequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		_SentData->PropFloat32 = InPropFloat32;
	}
}

double UTbSimpleSimpleInterfaceMsgBusClient::GetPropFloat64_Implementation() const
{
	return PropFloat64;
}

void UTbSimpleSimpleInterfaceMsgBusClient::SetPropFloat64_Implementation(double InPropFloat64)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropFloat64_Implementation() == InPropFloat64)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->PropFloat64 == InPropFloat64)
	{
		return;
	}

	auto msg = new FTbSimpleSimpleInterfaceSetPropFloat64RequestMessage();
	msg->PropFloat64 = InPropFloat64;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSetPropFloat64RequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		_SentData->PropFloat64 = InPropFloat64;
	}
}

FString UTbSimpleSimpleInterfaceMsgBusClient::GetPropString_Implementation() const
{
	return PropString;
}

void UTbSimpleSimpleInterfaceMsgBusClient::SetPropString_Implementation(const FString& InPropString)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropString_Implementation() == InPropString)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->PropStringMutex));
		if (_SentData->PropString == InPropString)
		{
			return;
		}
	}

	auto msg = new FTbSimpleSimpleInterfaceSetPropStringRequestMessage();
	msg->PropString = InPropString;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSetPropStringRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		FScopeLock Lock(&(_SentData->PropStringMutex));
		_SentData->PropString = InPropString;
	}
}

void UTbSimpleSimpleInterfaceMsgBusClient::FuncNoReturnValue_Implementation(bool bInParamBool)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return;
	}

	auto msg = new FTbSimpleSimpleInterfaceFuncNoReturnValueRequestMessage();
	msg->RepsonseId = FGuid::NewGuid();
	msg->bParamBool = bInParamBool;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{

		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncNoReturnValueRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return;
	}

	return;
}

bool UTbSimpleSimpleInterfaceMsgBusClient::FuncBool_Implementation(bool bInParamBool)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return false;
	}

	auto msg = new FTbSimpleSimpleInterfaceFuncBoolRequestMessage();
	msg->RepsonseId = FGuid::NewGuid();
	msg->bParamBool = bInParamBool;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TPromise<bool> Promise;
		StorePromise(msg->RepsonseId, Promise);

		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncBoolRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return Promise.GetFuture().Get();
	}

	return false;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnFuncBoolReply(const FTbSimpleSimpleInterfaceFuncBoolReplyMessage& InFuncBoolReplyMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InFuncBoolReplyMessage.RepsonseId, InFuncBoolReplyMessage.Result);
}

int32 UTbSimpleSimpleInterfaceMsgBusClient::FuncInt_Implementation(int32 InParamInt)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return 0;
	}

	auto msg = new FTbSimpleSimpleInterfaceFuncIntRequestMessage();
	msg->RepsonseId = FGuid::NewGuid();
	msg->ParamInt = InParamInt;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TPromise<int32> Promise;
		StorePromise(msg->RepsonseId, Promise);

		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncIntRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return Promise.GetFuture().Get();
	}

	return 0;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnFuncIntReply(const FTbSimpleSimpleInterfaceFuncIntReplyMessage& InFuncIntReplyMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InFuncIntReplyMessage.RepsonseId, InFuncIntReplyMessage.Result);
}

int32 UTbSimpleSimpleInterfaceMsgBusClient::FuncInt32_Implementation(int32 InParamInt32)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return 0;
	}

	auto msg = new FTbSimpleSimpleInterfaceFuncInt32RequestMessage();
	msg->RepsonseId = FGuid::NewGuid();
	msg->ParamInt32 = InParamInt32;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TPromise<int32> Promise;
		StorePromise(msg->RepsonseId, Promise);

		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncInt32RequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return Promise.GetFuture().Get();
	}

	return 0;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnFuncInt32Reply(const FTbSimpleSimpleInterfaceFuncInt32ReplyMessage& InFuncInt32ReplyMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InFuncInt32ReplyMessage.RepsonseId, InFuncInt32ReplyMessage.Result);
}

int64 UTbSimpleSimpleInterfaceMsgBusClient::FuncInt64_Implementation(int64 InParamInt64)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return 0LL;
	}

	auto msg = new FTbSimpleSimpleInterfaceFuncInt64RequestMessage();
	msg->RepsonseId = FGuid::NewGuid();
	msg->ParamInt64 = InParamInt64;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TPromise<int64> Promise;
		StorePromise(msg->RepsonseId, Promise);

		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncInt64RequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return Promise.GetFuture().Get();
	}

	return 0LL;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnFuncInt64Reply(const FTbSimpleSimpleInterfaceFuncInt64ReplyMessage& InFuncInt64ReplyMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InFuncInt64ReplyMessage.RepsonseId, InFuncInt64ReplyMessage.Result);
}

float UTbSimpleSimpleInterfaceMsgBusClient::FuncFloat_Implementation(float InParamFloat)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return 0.0f;
	}

	auto msg = new FTbSimpleSimpleInterfaceFuncFloatRequestMessage();
	msg->RepsonseId = FGuid::NewGuid();
	msg->ParamFloat = InParamFloat;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TPromise<float> Promise;
		StorePromise(msg->RepsonseId, Promise);

		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncFloatRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return Promise.GetFuture().Get();
	}

	return 0.0f;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnFuncFloatReply(const FTbSimpleSimpleInterfaceFuncFloatReplyMessage& InFuncFloatReplyMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InFuncFloatReplyMessage.RepsonseId, InFuncFloatReplyMessage.Result);
}

float UTbSimpleSimpleInterfaceMsgBusClient::FuncFloat32_Implementation(float InParamFloat32)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return 0.0f;
	}

	auto msg = new FTbSimpleSimpleInterfaceFuncFloat32RequestMessage();
	msg->RepsonseId = FGuid::NewGuid();
	msg->ParamFloat32 = InParamFloat32;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TPromise<float> Promise;
		StorePromise(msg->RepsonseId, Promise);

		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncFloat32RequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return Promise.GetFuture().Get();
	}

	return 0.0f;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnFuncFloat32Reply(const FTbSimpleSimpleInterfaceFuncFloat32ReplyMessage& InFuncFloat32ReplyMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InFuncFloat32ReplyMessage.RepsonseId, InFuncFloat32ReplyMessage.Result);
}

double UTbSimpleSimpleInterfaceMsgBusClient::FuncFloat64_Implementation(double InParamFloat)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return 0.0;
	}

	auto msg = new FTbSimpleSimpleInterfaceFuncFloat64RequestMessage();
	msg->RepsonseId = FGuid::NewGuid();
	msg->ParamFloat = InParamFloat;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TPromise<double> Promise;
		StorePromise(msg->RepsonseId, Promise);

		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncFloat64RequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return Promise.GetFuture().Get();
	}

	return 0.0;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnFuncFloat64Reply(const FTbSimpleSimpleInterfaceFuncFloat64ReplyMessage& InFuncFloat64ReplyMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InFuncFloat64ReplyMessage.RepsonseId, InFuncFloat64ReplyMessage.Result);
}

FString UTbSimpleSimpleInterfaceMsgBusClient::FuncString_Implementation(const FString& InParamString)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return FString();
	}

	auto msg = new FTbSimpleSimpleInterfaceFuncStringRequestMessage();
	msg->RepsonseId = FGuid::NewGuid();
	msg->ParamString = InParamString;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TPromise<FString> Promise;
		StorePromise(msg->RepsonseId, Promise);

		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncStringRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return Promise.GetFuture().Get();
	}

	return FString();
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnFuncStringReply(const FTbSimpleSimpleInterfaceFuncStringReplyMessage& InFuncStringReplyMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InFuncStringReplyMessage.RepsonseId, InFuncStringReplyMessage.Result);
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnSigBool(const FTbSimpleSimpleInterfaceSigBoolSignalMessage& InSigBoolMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSigBoolSignal.Broadcast(InSigBoolMessage.bParamBool);
	return;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnSigInt(const FTbSimpleSimpleInterfaceSigIntSignalMessage& InSigIntMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSigIntSignal.Broadcast(InSigIntMessage.ParamInt);
	return;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnSigInt32(const FTbSimpleSimpleInterfaceSigInt32SignalMessage& InSigInt32Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSigInt32Signal.Broadcast(InSigInt32Message.ParamInt32);
	return;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnSigInt64(const FTbSimpleSimpleInterfaceSigInt64SignalMessage& InSigInt64Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSigInt64Signal.Broadcast(InSigInt64Message.ParamInt64);
	return;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnSigFloat(const FTbSimpleSimpleInterfaceSigFloatSignalMessage& InSigFloatMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSigFloatSignal.Broadcast(InSigFloatMessage.ParamFloat);
	return;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnSigFloat32(const FTbSimpleSimpleInterfaceSigFloat32SignalMessage& InSigFloat32Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSigFloat32Signal.Broadcast(InSigFloat32Message.ParamFloat32);
	return;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnSigFloat64(const FTbSimpleSimpleInterfaceSigFloat64SignalMessage& InSigFloat64Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSigFloat64Signal.Broadcast(InSigFloat64Message.ParamFloat64);
	return;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnSigString(const FTbSimpleSimpleInterfaceSigStringSignalMessage& InSigStringMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSigStringSignal.Broadcast(InSigStringMessage.ParamString);
	return;
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnPropBoolChanged(const FTbSimpleSimpleInterfacePropBoolChangedMessage& bInPropBoolMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bbPropBoolChanged = bInPropBoolMessage.bPropBool != bPropBool;
	if (bbPropBoolChanged)
	{
		bPropBool = bInPropBoolMessage.bPropBool;
		Execute__GetSignals(this)->OnPropBoolChanged.Broadcast(bPropBool);
	}
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnPropIntChanged(const FTbSimpleSimpleInterfacePropIntChangedMessage& InPropIntMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropIntChanged = InPropIntMessage.PropInt != PropInt;
	if (bPropIntChanged)
	{
		PropInt = InPropIntMessage.PropInt;
		Execute__GetSignals(this)->OnPropIntChanged.Broadcast(PropInt);
	}
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnPropInt32Changed(const FTbSimpleSimpleInterfacePropInt32ChangedMessage& InPropInt32Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropInt32Changed = InPropInt32Message.PropInt32 != PropInt32;
	if (bPropInt32Changed)
	{
		PropInt32 = InPropInt32Message.PropInt32;
		Execute__GetSignals(this)->OnPropInt32Changed.Broadcast(PropInt32);
	}
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnPropInt64Changed(const FTbSimpleSimpleInterfacePropInt64ChangedMessage& InPropInt64Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropInt64Changed = InPropInt64Message.PropInt64 != PropInt64;
	if (bPropInt64Changed)
	{
		PropInt64 = InPropInt64Message.PropInt64;
		Execute__GetSignals(this)->OnPropInt64Changed.Broadcast(PropInt64);
	}
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnPropFloatChanged(const FTbSimpleSimpleInterfacePropFloatChangedMessage& InPropFloatMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropFloatChanged = InPropFloatMessage.PropFloat != PropFloat;
	if (bPropFloatChanged)
	{
		PropFloat = InPropFloatMessage.PropFloat;
		Execute__GetSignals(this)->OnPropFloatChanged.Broadcast(PropFloat);
	}
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnPropFloat32Changed(const FTbSimpleSimpleInterfacePropFloat32ChangedMessage& InPropFloat32Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropFloat32Changed = InPropFloat32Message.PropFloat32 != PropFloat32;
	if (bPropFloat32Changed)
	{
		PropFloat32 = InPropFloat32Message.PropFloat32;
		Execute__GetSignals(this)->OnPropFloat32Changed.Broadcast(PropFloat32);
	}
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnPropFloat64Changed(const FTbSimpleSimpleInterfacePropFloat64ChangedMessage& InPropFloat64Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropFloat64Changed = InPropFloat64Message.PropFloat64 != PropFloat64;
	if (bPropFloat64Changed)
	{
		PropFloat64 = InPropFloat64Message.PropFloat64;
		Execute__GetSignals(this)->OnPropFloat64Changed.Broadcast(PropFloat64);
	}
}

void UTbSimpleSimpleInterfaceMsgBusClient::OnPropStringChanged(const FTbSimpleSimpleInterfacePropStringChangedMessage& InPropStringMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleSimpleInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropStringChanged = InPropStringMessage.PropString != PropString;
	if (bPropStringChanged)
	{
		PropString = InPropStringMessage.PropString;
		Execute__GetSignals(this)->OnPropStringChanged.Broadcast(PropString);
	}
}

template <typename ResultType>
bool UTbSimpleSimpleInterfaceMsgBusClient::StorePromise(const FGuid& Id, TPromise<ResultType>& Promise)
{
	FScopeLock Lock(&ReplyPromisesMapCS);
	return ReplyPromisesMap.Add(Id, &Promise) != nullptr;
}

template <typename ResultType>
bool UTbSimpleSimpleInterfaceMsgBusClient::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
	TPromise<ResultType>* PromisePtr = nullptr;

	{
		FScopeLock Lock(&ReplyPromisesMapCS);
		if (auto** Found = ReplyPromisesMap.Find(Id))
		{
			PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
			ReplyPromisesMap.Remove(Id);
		}
	}

	if (PromisePtr)
	{
		PromisePtr->SetValue(Value);
		return true;
	}
	return false;
}

template bool UTbSimpleSimpleInterfaceMsgBusClient::StorePromise<FString>(const FGuid& Id, TPromise<FString>& Promise);
template bool UTbSimpleSimpleInterfaceMsgBusClient::FulfillPromise<FString>(const FGuid& Id, const FString& Value);
template bool UTbSimpleSimpleInterfaceMsgBusClient::StorePromise<bool>(const FGuid& Id, TPromise<bool>& Promise);
template bool UTbSimpleSimpleInterfaceMsgBusClient::FulfillPromise<bool>(const FGuid& Id, const bool& Value);
template bool UTbSimpleSimpleInterfaceMsgBusClient::StorePromise<double>(const FGuid& Id, TPromise<double>& Promise);
template bool UTbSimpleSimpleInterfaceMsgBusClient::FulfillPromise<double>(const FGuid& Id, const double& Value);
template bool UTbSimpleSimpleInterfaceMsgBusClient::StorePromise<float>(const FGuid& Id, TPromise<float>& Promise);
template bool UTbSimpleSimpleInterfaceMsgBusClient::FulfillPromise<float>(const FGuid& Id, const float& Value);
template bool UTbSimpleSimpleInterfaceMsgBusClient::StorePromise<int32>(const FGuid& Id, TPromise<int32>& Promise);
template bool UTbSimpleSimpleInterfaceMsgBusClient::FulfillPromise<int32>(const FGuid& Id, const int32& Value);
template bool UTbSimpleSimpleInterfaceMsgBusClient::StorePromise<int64>(const FGuid& Id, TPromise<int64>& Promise);
template bool UTbSimpleSimpleInterfaceMsgBusClient::FulfillPromise<int64>(const FGuid& Id, const int64& Value);
