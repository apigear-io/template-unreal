/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/MsgBus/TbSimpleNoOperationsInterfaceMsgBusClient.h"
#include "Generated/MsgBus/TbSimpleNoOperationsInterfaceMsgBusMessages.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
#include "MessageEndpointBuilder.h"
#include "MessageEndpoint.h"
#include <atomic>

/**
   \brief data structure to hold the last sent property values
*/
struct TbSimpleNoOperationsInterfacePropertiesMsgBusData
{
	std::atomic<bool> bPropBool{false};
	std::atomic<int32> PropInt{0};
};
DEFINE_LOG_CATEGORY(LogTbSimpleNoOperationsInterfaceMsgBusClient);

UTbSimpleNoOperationsInterfaceMsgBusClient::UTbSimpleNoOperationsInterfaceMsgBusClient()
	: UAbstractTbSimpleNoOperationsInterface()
	, _SentData(MakePimpl<TbSimpleNoOperationsInterfacePropertiesMsgBusData>())
{
	/* m_sink = std::make_shared<FOLinkSink>("tb.simple.NoOperationsInterface"); */
}

UTbSimpleNoOperationsInterfaceMsgBusClient::~UTbSimpleNoOperationsInterfaceMsgBusClient() = default;

void UTbSimpleNoOperationsInterfaceMsgBusClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	Connect();
}

void UTbSimpleNoOperationsInterfaceMsgBusClient::Deinitialize()
{
	Disconnect();

	Super::Deinitialize();
}

void UTbSimpleNoOperationsInterfaceMsgBusClient::Connect()
{
	if (IsConnected())
	{
		return;
	}

	if (TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid() && !ServiceAddress.IsValid())
	{
		DiscoverService();
		return;
	}

	// clang-format off
	TbSimpleNoOperationsInterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSimple/NoOperationsInterface/Client")
		.Handling<FTbSimpleNoOperationsInterfaceInitMessage>(this, &UTbSimpleNoOperationsInterfaceMsgBusClient::OnConnectionInit)
		.Handling<FTbSimpleNoOperationsInterfaceServiceDisconnectMessage>(this, &UTbSimpleNoOperationsInterfaceMsgBusClient::OnServiceClosedConnection)
		.Handling<FTbSimpleNoOperationsInterfaceSigVoidSignalMessage>(this, &UTbSimpleNoOperationsInterfaceMsgBusClient::OnSigVoid)

		.Handling<FTbSimpleNoOperationsInterfaceSigBoolSignalMessage>(this, &UTbSimpleNoOperationsInterfaceMsgBusClient::OnSigBool)
		.Handling<FTbSimpleNoOperationsInterfacePropBoolChangedMessage>(this, &UTbSimpleNoOperationsInterfaceMsgBusClient::OnPropBoolChanged)

		.Handling<FTbSimpleNoOperationsInterfacePropIntChangedMessage>(this, &UTbSimpleNoOperationsInterfaceMsgBusClient::OnPropIntChanged)
		.Build();
	// clang-format on

	DiscoverService();
}

void UTbSimpleNoOperationsInterfaceMsgBusClient::Disconnect()
{
	if (!IsConnected())
	{
		return;
	}

	auto msg = new FTbSimpleNoOperationsInterfaceClientDisconnectMessage();

	if (TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoOperationsInterfaceMsgBusEndpoint->Send<FTbSimpleNoOperationsInterfaceClientDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbSimpleNoOperationsInterfaceMsgBusEndpoint.Reset();
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

void UTbSimpleNoOperationsInterfaceMsgBusClient::DiscoverService()
{
	if (TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoOperationsInterfaceMsgBusEndpoint->Publish<FTbSimpleNoOperationsInterfaceDiscoveryMessage>(new FTbSimpleNoOperationsInterfaceDiscoveryMessage());
	}
}

bool UTbSimpleNoOperationsInterfaceMsgBusClient::IsConnected() const
{
	return TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid() && ServiceAddress.IsValid();
}

void UTbSimpleNoOperationsInterfaceMsgBusClient::OnConnectionInit(const FTbSimpleNoOperationsInterfaceInitMessage& InInitMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ServiceAddress.IsValid())
	{
		ServiceAddress = Context->GetSender();
		const bool bbPropBoolChanged = InInitMessage.bPropBool != bPropBool;
		if (bbPropBoolChanged)
		{
			bPropBool = InInitMessage.bPropBool;
			Execute__GetSignals(this)->OnPropBoolChanged.Broadcast(bPropBool);
		}

		const bool bPropIntChanged = InInitMessage.PropInt != PropInt;
		if (bPropIntChanged)
		{
			PropInt = InInitMessage.PropInt;
			Execute__GetSignals(this)->OnPropIntChanged.Broadcast(PropInt);
		}

		_ConnectionStatusChanged.Broadcast(true);
	}
	else
	{
		UE_LOG(LogTbSimpleNoOperationsInterfaceMsgBusClient, Error, TEXT("Got a second init message - should not happen"));
	}
}

void UTbSimpleNoOperationsInterfaceMsgBusClient::OnServiceClosedConnection(const FTbSimpleNoOperationsInterfaceServiceDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		return;
	}

	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

bool UTbSimpleNoOperationsInterfaceMsgBusClient::GetPropBool_Implementation() const
{
	return bPropBool;
}

void UTbSimpleNoOperationsInterfaceMsgBusClient::SetPropBool_Implementation(bool bInPropBool)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleNoOperationsInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropBool_Implementation() == bInPropBool)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->bPropBool == bInPropBool)
	{
		return;
	}

	auto msg = new FTbSimpleNoOperationsInterfaceSetPropBoolRequestMessage();
	msg->bPropBool = bInPropBool;

	if (TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoOperationsInterfaceMsgBusEndpoint->Send<FTbSimpleNoOperationsInterfaceSetPropBoolRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		_SentData->bPropBool = bInPropBool;
	}
}

int32 UTbSimpleNoOperationsInterfaceMsgBusClient::GetPropInt_Implementation() const
{
	return PropInt;
}

void UTbSimpleNoOperationsInterfaceMsgBusClient::SetPropInt_Implementation(int32 InPropInt)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleNoOperationsInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropInt_Implementation() == InPropInt)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->PropInt == InPropInt)
	{
		return;
	}

	auto msg = new FTbSimpleNoOperationsInterfaceSetPropIntRequestMessage();
	msg->PropInt = InPropInt;

	if (TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoOperationsInterfaceMsgBusEndpoint->Send<FTbSimpleNoOperationsInterfaceSetPropIntRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		_SentData->PropInt = InPropInt;
	}
}

void UTbSimpleNoOperationsInterfaceMsgBusClient::OnSigVoid(const FTbSimpleNoOperationsInterfaceSigVoidSignalMessage& InSigVoidMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleNoOperationsInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSigVoidSignal.Broadcast();
	return;
}

void UTbSimpleNoOperationsInterfaceMsgBusClient::OnSigBool(const FTbSimpleNoOperationsInterfaceSigBoolSignalMessage& InSigBoolMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleNoOperationsInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSigBoolSignal.Broadcast(InSigBoolMessage.bParamBool);
	return;
}

void UTbSimpleNoOperationsInterfaceMsgBusClient::OnPropBoolChanged(const FTbSimpleNoOperationsInterfacePropBoolChangedMessage& bInPropBoolMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleNoOperationsInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bbPropBoolChanged = bInPropBoolMessage.bPropBool != bPropBool;
	if (bbPropBoolChanged)
	{
		bPropBool = bInPropBoolMessage.bPropBool;
		Execute__GetSignals(this)->OnPropBoolChanged.Broadcast(bPropBool);
	}
}

void UTbSimpleNoOperationsInterfaceMsgBusClient::OnPropIntChanged(const FTbSimpleNoOperationsInterfacePropIntChangedMessage& InPropIntMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleNoOperationsInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bPropIntChanged = InPropIntMessage.PropInt != PropInt;
	if (bPropIntChanged)
	{
		PropInt = InPropIntMessage.PropInt;
		Execute__GetSignals(this)->OnPropIntChanged.Broadcast(PropInt);
	}
}
