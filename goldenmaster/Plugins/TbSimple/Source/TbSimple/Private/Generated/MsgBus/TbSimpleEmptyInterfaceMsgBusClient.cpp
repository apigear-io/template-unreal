/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/MsgBus/TbSimpleEmptyInterfaceMsgBusClient.h"
#include "Generated/MsgBus/TbSimpleEmptyInterfaceMsgBusMessages.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
#include "MessageEndpointBuilder.h"
#include "MessageEndpoint.h"
DEFINE_LOG_CATEGORY(LogTbSimpleEmptyInterfaceMsgBusClient);

UTbSimpleEmptyInterfaceMsgBusClient::UTbSimpleEmptyInterfaceMsgBusClient()
	: UAbstractTbSimpleEmptyInterface()
{
	/* m_sink = std::make_shared<FOLinkSink>("tb.simple.EmptyInterface"); */
}

UTbSimpleEmptyInterfaceMsgBusClient::~UTbSimpleEmptyInterfaceMsgBusClient() = default;

void UTbSimpleEmptyInterfaceMsgBusClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	Connect();
}

void UTbSimpleEmptyInterfaceMsgBusClient::Deinitialize()
{
	Disconnect();

	Super::Deinitialize();
}

void UTbSimpleEmptyInterfaceMsgBusClient::Connect()
{
	if (IsConnected())
	{
		return;
	}

	if (TbSimpleEmptyInterfaceMsgBusEndpoint.IsValid() && !ServiceAddress.IsValid())
	{
		DiscoverService();
		return;
	}

	// clang-format off
	TbSimpleEmptyInterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSimple/EmptyInterface/Client")
		.Handling<FTbSimpleEmptyInterfaceInitMessage>(this, &UTbSimpleEmptyInterfaceMsgBusClient::OnConnectionInit)
		.Handling<FTbSimpleEmptyInterfaceServiceDisconnectMessage>(this, &UTbSimpleEmptyInterfaceMsgBusClient::OnServiceClosedConnection)
		.Build();
	// clang-format on

	DiscoverService();
}

void UTbSimpleEmptyInterfaceMsgBusClient::Disconnect()
{
	if (!IsConnected())
	{
		return;
	}

	auto msg = new FTbSimpleEmptyInterfaceClientDisconnectMessage();

	if (TbSimpleEmptyInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleEmptyInterfaceMsgBusEndpoint->Send<FTbSimpleEmptyInterfaceClientDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbSimpleEmptyInterfaceMsgBusEndpoint.Reset();
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

void UTbSimpleEmptyInterfaceMsgBusClient::DiscoverService()
{
	if (TbSimpleEmptyInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleEmptyInterfaceMsgBusEndpoint->Publish<FTbSimpleEmptyInterfaceDiscoveryMessage>(new FTbSimpleEmptyInterfaceDiscoveryMessage());
	}
}

bool UTbSimpleEmptyInterfaceMsgBusClient::IsConnected() const
{
	return TbSimpleEmptyInterfaceMsgBusEndpoint.IsValid() && ServiceAddress.IsValid();
}

void UTbSimpleEmptyInterfaceMsgBusClient::OnConnectionInit(const FTbSimpleEmptyInterfaceInitMessage& InInitMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ServiceAddress.IsValid())
	{
		ServiceAddress = Context->GetSender();

		_ConnectionStatusChanged.Broadcast(true);
	}
	else
	{
		UE_LOG(LogTbSimpleEmptyInterfaceMsgBusClient, Error, TEXT("Got a second init message - should not happen"));
	}
}

void UTbSimpleEmptyInterfaceMsgBusClient::OnServiceClosedConnection(const FTbSimpleEmptyInterfaceServiceDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		return;
	}

	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}
