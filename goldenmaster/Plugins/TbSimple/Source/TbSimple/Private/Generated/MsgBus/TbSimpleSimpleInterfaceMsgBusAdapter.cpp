/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/MsgBus/TbSimpleSimpleInterfaceMsgBusAdapter.h"
#include "Generated/MsgBus/TbSimpleSimpleInterfaceMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "TimerManager.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
UTbSimpleSimpleInterfaceMsgBusAdapter::UTbSimpleSimpleInterfaceMsgBusAdapter()
{
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTimerHandle.IsValid() && GetWorld())
	{
		GetWorld()->GetTimerManager().SetTimer(_HeartbeatTimerHandle, this, &UTbSimpleSimpleInterfaceMsgBusAdapter::_CheckClientTimeouts, _HeartbeatIntervalMS / 1000.0f, true);
	}

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	TbSimpleSimpleInterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSimple/SimpleInterface/Service")
		.Handling<FTbSimpleSimpleInterfaceDiscoveryMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnNewClientDiscovered)
		.Handling<FTbSimpleSimpleInterfacePingMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPing)
		.Handling<FTbSimpleSimpleInterfaceClientDisconnectMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnClientDisconnected)
		.Handling<FTbSimpleSimpleInterfaceSetPropBoolRequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropBoolRequest)
		.Handling<FTbSimpleSimpleInterfaceSetPropIntRequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropIntRequest)
		.Handling<FTbSimpleSimpleInterfaceSetPropInt32RequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropInt32Request)
		.Handling<FTbSimpleSimpleInterfaceSetPropInt64RequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropInt64Request)
		.Handling<FTbSimpleSimpleInterfaceSetPropFloatRequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropFloatRequest)
		.Handling<FTbSimpleSimpleInterfaceSetPropFloat32RequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropFloat32Request)
		.Handling<FTbSimpleSimpleInterfaceSetPropFloat64RequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropFloat64Request)
		.Handling<FTbSimpleSimpleInterfaceSetPropStringRequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropStringRequest)
		.Handling<FTbSimpleSimpleInterfaceFuncNoReturnValueRequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncNoReturnValueRequest)
		.Handling<FTbSimpleSimpleInterfaceFuncBoolRequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncBoolRequest)
		.Handling<FTbSimpleSimpleInterfaceFuncIntRequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncIntRequest)
		.Handling<FTbSimpleSimpleInterfaceFuncInt32RequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncInt32Request)
		.Handling<FTbSimpleSimpleInterfaceFuncInt64RequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncInt64Request)
		.Handling<FTbSimpleSimpleInterfaceFuncFloatRequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncFloatRequest)
		.Handling<FTbSimpleSimpleInterfaceFuncFloat32RequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncFloat32Request)
		.Handling<FTbSimpleSimpleInterfaceFuncFloat64RequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncFloat64Request)
		.Handling<FTbSimpleSimpleInterfaceFuncStringRequestMessage>(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncStringRequest)
		.Build();
	// clang-format on

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Subscribe<FTbSimpleSimpleInterfaceDiscoveryMessage>();
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTimerHandle.IsValid() && GetWorld())
	{
		GetWorld()->GetTimerManager().ClearTimer(_HeartbeatTimerHandle);
	}

	auto msg = new FTbSimpleSimpleInterfaceServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbSimpleSimpleInterfaceMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTbSimpleSimpleInterfaceMsgBusAdapter::_IsListening() const
{
	return TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid();
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::_setBackendService(TScriptInterface<ITbSimpleSimpleInterfaceInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbSimpleSimpleInterfaceSignals* BackendSignals = BackendService->Execute__GetSignals(BackendService.GetObject());
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service TbSimpleSimpleInterface"));
		BackendSignals->OnPropBoolChanged.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropBoolChanged);
		BackendSignals->OnPropIntChanged.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropIntChanged);
		BackendSignals->OnPropInt32Changed.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropInt32Changed);
		BackendSignals->OnPropInt64Changed.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropInt64Changed);
		BackendSignals->OnPropFloatChanged.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropFloatChanged);
		BackendSignals->OnPropFloat32Changed.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropFloat32Changed);
		BackendSignals->OnPropFloat64Changed.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropFloat64Changed);
		BackendSignals->OnPropStringChanged.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropStringChanged);
		BackendSignals->OnSigBoolSignal.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigBool);
		BackendSignals->OnSigIntSignal.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigInt);
		BackendSignals->OnSigInt32Signal.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigInt32);
		BackendSignals->OnSigInt64Signal.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigInt64);
		BackendSignals->OnSigFloatSignal.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigFloat);
		BackendSignals->OnSigFloat32Signal.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigFloat32);
		BackendSignals->OnSigFloat64Signal.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigFloat64);
		BackendSignals->OnSigStringSignal.RemoveDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigString);
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbSimpleSimpleInterface is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbSimpleSimpleInterfaceSignals* BackendSignals = BackendService->Execute__GetSignals(BackendService.GetObject());
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service TbSimpleSimpleInterface"));
	// connect property changed signals or simple events
	BackendSignals->OnPropBoolChanged.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropBoolChanged);
	BackendSignals->OnPropIntChanged.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropIntChanged);
	BackendSignals->OnPropInt32Changed.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropInt32Changed);
	BackendSignals->OnPropInt64Changed.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropInt64Changed);
	BackendSignals->OnPropFloatChanged.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropFloatChanged);
	BackendSignals->OnPropFloat32Changed.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropFloat32Changed);
	BackendSignals->OnPropFloat64Changed.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropFloat64Changed);
	BackendSignals->OnPropStringChanged.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropStringChanged);
	BackendSignals->OnSigBoolSignal.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigBool);
	BackendSignals->OnSigIntSignal.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigInt);
	BackendSignals->OnSigInt32Signal.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigInt32);
	BackendSignals->OnSigInt64Signal.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigInt64);
	BackendSignals->OnSigFloatSignal.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigFloat);
	BackendSignals->OnSigFloat32Signal.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigFloat32);
	BackendSignals->OnSigFloat64Signal.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigFloat64);
	BackendSignals->OnSigStringSignal.AddDynamic(this, &UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigString);
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnNewClientDiscovered(const FTbSimpleSimpleInterfaceDiscoveryMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTbSimpleSimpleInterfaceInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;
	msg->bPropBool = BackendService->Execute_GetPropBool(BackendService.GetObject());
	msg->PropInt = BackendService->Execute_GetPropInt(BackendService.GetObject());
	msg->PropInt32 = BackendService->Execute_GetPropInt32(BackendService.GetObject());
	msg->PropInt64 = BackendService->Execute_GetPropInt64(BackendService.GetObject());
	msg->PropFloat = BackendService->Execute_GetPropFloat(BackendService.GetObject());
	msg->PropFloat32 = BackendService->Execute_GetPropFloat32(BackendService.GetObject());
	msg->PropFloat64 = BackendService->Execute_GetPropFloat64(BackendService.GetObject());
	msg->PropString = BackendService->Execute_GetPropString(BackendService.GetObject());

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnPing(const FTbSimpleSimpleInterfacePingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleInterfacePongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfacePongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnClientDisconnected(const FTbSimpleSimpleInterfaceClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::_CheckClientTimeouts()
{
	const double CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double DeltaMS = (CurrentTime - ClientPair.Value) * 1000.0;

		if (DeltaMS > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncNoReturnValueRequest(const FTbSimpleSimpleInterfaceFuncNoReturnValueRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	BackendService->Execute_FuncNoReturnValue(BackendService.GetObject(), InMessage.bParamBool);
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncBoolRequest(const FTbSimpleSimpleInterfaceFuncBoolRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleInterfaceFuncBoolReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Execute_FuncBool(BackendService.GetObject(), InMessage.bParamBool);

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncBoolReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncIntRequest(const FTbSimpleSimpleInterfaceFuncIntRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleInterfaceFuncIntReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Execute_FuncInt(BackendService.GetObject(), InMessage.ParamInt);

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncIntReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncInt32Request(const FTbSimpleSimpleInterfaceFuncInt32RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleInterfaceFuncInt32ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Execute_FuncInt32(BackendService.GetObject(), InMessage.ParamInt32);

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncInt32ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncInt64Request(const FTbSimpleSimpleInterfaceFuncInt64RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleInterfaceFuncInt64ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Execute_FuncInt64(BackendService.GetObject(), InMessage.ParamInt64);

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncInt64ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncFloatRequest(const FTbSimpleSimpleInterfaceFuncFloatRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleInterfaceFuncFloatReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Execute_FuncFloat(BackendService.GetObject(), InMessage.ParamFloat);

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncFloatReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncFloat32Request(const FTbSimpleSimpleInterfaceFuncFloat32RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleInterfaceFuncFloat32ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Execute_FuncFloat32(BackendService.GetObject(), InMessage.ParamFloat32);

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncFloat32ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncFloat64Request(const FTbSimpleSimpleInterfaceFuncFloat64RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleInterfaceFuncFloat64ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Execute_FuncFloat64(BackendService.GetObject(), InMessage.ParamFloat);

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncFloat64ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnFuncStringRequest(const FTbSimpleSimpleInterfaceFuncStringRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleSimpleInterfaceFuncStringReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Execute_FuncString(BackendService.GetObject(), InMessage.ParamString);

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceFuncStringReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigBool(bool bInParamBool)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfaceSigBoolSignalMessage();
	msg->bParamBool = bInParamBool;
	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSigBoolSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigInt(int32 InParamInt)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfaceSigIntSignalMessage();
	msg->ParamInt = InParamInt;
	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSigIntSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigInt32(int32 InParamInt32)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfaceSigInt32SignalMessage();
	msg->ParamInt32 = InParamInt32;
	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSigInt32SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigInt64(int64 InParamInt64)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfaceSigInt64SignalMessage();
	msg->ParamInt64 = InParamInt64;
	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSigInt64SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigFloat(float InParamFloat)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfaceSigFloatSignalMessage();
	msg->ParamFloat = InParamFloat;
	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSigFloatSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigFloat32(float InParamFloat32)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfaceSigFloat32SignalMessage();
	msg->ParamFloat32 = InParamFloat32;
	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSigFloat32SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigFloat64(double InParamFloat64)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfaceSigFloat64SignalMessage();
	msg->ParamFloat64 = InParamFloat64;
	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSigFloat64SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSigString(const FString& InParamString)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfaceSigStringSignalMessage();
	msg->ParamString = InParamString;
	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfaceSigStringSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropBoolRequest(const FTbSimpleSimpleInterfaceSetPropBoolRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetPropBool(BackendService.GetObject(), InMessage.bPropBool);
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropBoolChanged(bool bInPropBool)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfacePropBoolChangedMessage();
	msg->bPropBool = bInPropBool;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfacePropBoolChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropIntRequest(const FTbSimpleSimpleInterfaceSetPropIntRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetPropInt(BackendService.GetObject(), InMessage.PropInt);
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropIntChanged(int32 InPropInt)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfacePropIntChangedMessage();
	msg->PropInt = InPropInt;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfacePropIntChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropInt32Request(const FTbSimpleSimpleInterfaceSetPropInt32RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetPropInt32(BackendService.GetObject(), InMessage.PropInt32);
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropInt32Changed(int32 InPropInt32)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfacePropInt32ChangedMessage();
	msg->PropInt32 = InPropInt32;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfacePropInt32ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropInt64Request(const FTbSimpleSimpleInterfaceSetPropInt64RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetPropInt64(BackendService.GetObject(), InMessage.PropInt64);
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropInt64Changed(int64 InPropInt64)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfacePropInt64ChangedMessage();
	msg->PropInt64 = InPropInt64;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfacePropInt64ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropFloatRequest(const FTbSimpleSimpleInterfaceSetPropFloatRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetPropFloat(BackendService.GetObject(), InMessage.PropFloat);
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropFloatChanged(float InPropFloat)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfacePropFloatChangedMessage();
	msg->PropFloat = InPropFloat;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfacePropFloatChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropFloat32Request(const FTbSimpleSimpleInterfaceSetPropFloat32RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetPropFloat32(BackendService.GetObject(), InMessage.PropFloat32);
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropFloat32Changed(float InPropFloat32)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfacePropFloat32ChangedMessage();
	msg->PropFloat32 = InPropFloat32;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfacePropFloat32ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropFloat64Request(const FTbSimpleSimpleInterfaceSetPropFloat64RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetPropFloat64(BackendService.GetObject(), InMessage.PropFloat64);
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropFloat64Changed(double InPropFloat64)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfacePropFloat64ChangedMessage();
	msg->PropFloat64 = InPropFloat64;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfacePropFloat64ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnSetPropStringRequest(const FTbSimpleSimpleInterfaceSetPropStringRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetPropString(BackendService.GetObject(), InMessage.PropString);
}

void UTbSimpleSimpleInterfaceMsgBusAdapter::OnPropStringChanged(const FString& InPropString)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTbSimpleSimpleInterfacePropStringChangedMessage();
	msg->PropString = InPropString;

	if (TbSimpleSimpleInterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		TbSimpleSimpleInterfaceMsgBusEndpoint->Send<FTbSimpleSimpleInterfacePropStringChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
