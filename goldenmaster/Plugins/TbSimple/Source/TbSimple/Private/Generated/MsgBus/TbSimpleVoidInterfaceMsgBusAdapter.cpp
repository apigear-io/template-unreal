/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/MsgBus/TbSimpleVoidInterfaceMsgBusAdapter.h"
#include "Generated/MsgBus/TbSimpleVoidInterfaceMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
UTbSimpleVoidInterfaceMsgBusAdapter::UTbSimpleVoidInterfaceMsgBusAdapter()
{
}

void UTbSimpleVoidInterfaceMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbSimpleVoidInterfaceMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTbSimpleVoidInterfaceMsgBusAdapter::_StartListening()
{
	if (TbSimpleVoidInterfaceMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	TbSimpleVoidInterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSimple/VoidInterface/Service")
		.Handling<FTbSimpleVoidInterfaceDiscoveryMessage>(this, &UTbSimpleVoidInterfaceMsgBusAdapter::OnNewClientDiscovered)
		.Handling<FTbSimpleVoidInterfacePingMessage>(this, &UTbSimpleVoidInterfaceMsgBusAdapter::OnPing)
		.Handling<FTbSimpleVoidInterfaceClientDisconnectMessage>(this, &UTbSimpleVoidInterfaceMsgBusAdapter::OnClientDisconnected)
		.Handling<FTbSimpleVoidInterfaceFuncVoidRequestMessage>(this, &UTbSimpleVoidInterfaceMsgBusAdapter::OnFuncVoidRequest)
		.Build();
	// clang-format on

	if (TbSimpleVoidInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleVoidInterfaceMsgBusEndpoint->Subscribe<FTbSimpleVoidInterfaceDiscoveryMessage>();
	}
}

void UTbSimpleVoidInterfaceMsgBusAdapter::_StopListening()
{
	auto msg = new FTbSimpleVoidInterfaceServiceDisconnectMessage();

	if (TbSimpleVoidInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleVoidInterfaceMsgBusEndpoint->Send<FTbSimpleVoidInterfaceServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbSimpleVoidInterfaceMsgBusEndpoint.Reset();
	ConnectedClients.Reset();
}

bool UTbSimpleVoidInterfaceMsgBusAdapter::_IsListening() const
{
	return TbSimpleVoidInterfaceMsgBusEndpoint.IsValid();
}

void UTbSimpleVoidInterfaceMsgBusAdapter::_setBackendService(TScriptInterface<ITbSimpleVoidInterfaceInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbSimpleVoidInterfaceSignals* BackendSignals = BackendService->Execute__GetSignals(BackendService.GetObject());
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service TbSimpleVoidInterface"));
		BackendSignals->OnSigVoidSignal.RemoveDynamic(this, &UTbSimpleVoidInterfaceMsgBusAdapter::OnSigVoid);
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbSimpleVoidInterface is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbSimpleVoidInterfaceSignals* BackendSignals = BackendService->Execute__GetSignals(BackendService.GetObject());
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service TbSimpleVoidInterface"));
	// connect property changed signals or simple events
	BackendSignals->OnSigVoidSignal.AddDynamic(this, &UTbSimpleVoidInterfaceMsgBusAdapter::OnSigVoid);
}

void UTbSimpleVoidInterfaceMsgBusAdapter::OnNewClientDiscovered(const FTbSimpleVoidInterfaceDiscoveryMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FMessageAddress& ClientAddress = ConnectedClients.AddDefaulted_GetRef();
	ClientAddress = Context->GetSender();

	auto msg = new FTbSimpleVoidInterfaceInitMessage();

	if (TbSimpleVoidInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleVoidInterfaceMsgBusEndpoint->Send<FTbSimpleVoidInterfaceInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleVoidInterfaceMsgBusAdapter::OnPing(const FTbSimpleVoidInterfacePingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleVoidInterfacePongMessage();
	msg->Timestamp = InMessage.Timestamp;

	if (TbSimpleVoidInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleVoidInterfaceMsgBusEndpoint->Send<FTbSimpleVoidInterfacePongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleVoidInterfaceMsgBusAdapter::OnClientDisconnected(const FTbSimpleVoidInterfaceClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	ConnectedClients.Remove(Context->GetSender());
}

void UTbSimpleVoidInterfaceMsgBusAdapter::OnFuncVoidRequest(const FTbSimpleVoidInterfaceFuncVoidRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	BackendService->Execute_FuncVoid(BackendService.GetObject());
}

void UTbSimpleVoidInterfaceMsgBusAdapter::OnSigVoid()
{
	auto msg = new FTbSimpleVoidInterfaceSigVoidSignalMessage();
	if (TbSimpleVoidInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleVoidInterfaceMsgBusEndpoint->Send<FTbSimpleVoidInterfaceSigVoidSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
