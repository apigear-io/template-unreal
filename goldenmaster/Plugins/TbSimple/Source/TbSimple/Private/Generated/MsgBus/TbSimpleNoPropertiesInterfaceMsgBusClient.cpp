/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/MsgBus/TbSimpleNoPropertiesInterfaceMsgBusClient.h"
#include "Generated/MsgBus/TbSimpleNoPropertiesInterfaceMsgBusMessages.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
#include "MessageEndpointBuilder.h"
#include "MessageEndpoint.h"
DEFINE_LOG_CATEGORY(LogTbSimpleNoPropertiesInterfaceMsgBusClient);

UTbSimpleNoPropertiesInterfaceMsgBusClient::UTbSimpleNoPropertiesInterfaceMsgBusClient()
	: UAbstractTbSimpleNoPropertiesInterface()
{
	/* m_sink = std::make_shared<FOLinkSink>("tb.simple.NoPropertiesInterface"); */
}

UTbSimpleNoPropertiesInterfaceMsgBusClient::~UTbSimpleNoPropertiesInterfaceMsgBusClient() = default;

void UTbSimpleNoPropertiesInterfaceMsgBusClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	Connect();
}

void UTbSimpleNoPropertiesInterfaceMsgBusClient::Deinitialize()
{
	Disconnect();

	Super::Deinitialize();
}

void UTbSimpleNoPropertiesInterfaceMsgBusClient::Connect()
{
	if (IsConnected())
	{
		return;
	}

	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid() && !ServiceAddress.IsValid())
	{
		DiscoverService();
		return;
	}

	// clang-format off
	TbSimpleNoPropertiesInterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSimple/NoPropertiesInterface/Client")
		.Handling<FTbSimpleNoPropertiesInterfaceInitMessage>(this, &UTbSimpleNoPropertiesInterfaceMsgBusClient::OnConnectionInit)
		.Handling<FTbSimpleNoPropertiesInterfaceServiceDisconnectMessage>(this, &UTbSimpleNoPropertiesInterfaceMsgBusClient::OnServiceClosedConnection)
		.Handling<FTbSimpleNoPropertiesInterfaceSigVoidSignalMessage>(this, &UTbSimpleNoPropertiesInterfaceMsgBusClient::OnSigVoid)

		.Handling<FTbSimpleNoPropertiesInterfaceSigBoolSignalMessage>(this, &UTbSimpleNoPropertiesInterfaceMsgBusClient::OnSigBool)
		.Handling<FTbSimpleNoPropertiesInterfaceFuncBoolReplyMessage>(this, &UTbSimpleNoPropertiesInterfaceMsgBusClient::OnFuncBoolReply)
		.Build();
	// clang-format on

	DiscoverService();
}

void UTbSimpleNoPropertiesInterfaceMsgBusClient::Disconnect()
{
	if (!IsConnected())
	{
		return;
	}

	auto msg = new FTbSimpleNoPropertiesInterfaceClientDisconnectMessage();

	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoPropertiesInterfaceMsgBusEndpoint->Send<FTbSimpleNoPropertiesInterfaceClientDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbSimpleNoPropertiesInterfaceMsgBusEndpoint.Reset();
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

void UTbSimpleNoPropertiesInterfaceMsgBusClient::DiscoverService()
{
	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoPropertiesInterfaceMsgBusEndpoint->Publish<FTbSimpleNoPropertiesInterfaceDiscoveryMessage>(new FTbSimpleNoPropertiesInterfaceDiscoveryMessage());
	}
}

bool UTbSimpleNoPropertiesInterfaceMsgBusClient::IsConnected() const
{
	return TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid() && ServiceAddress.IsValid();
}

void UTbSimpleNoPropertiesInterfaceMsgBusClient::OnConnectionInit(const FTbSimpleNoPropertiesInterfaceInitMessage& InInitMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ServiceAddress.IsValid())
	{
		ServiceAddress = Context->GetSender();

		_ConnectionStatusChanged.Broadcast(true);
	}
	else
	{
		UE_LOG(LogTbSimpleNoPropertiesInterfaceMsgBusClient, Error, TEXT("Got a second init message - should not happen"));
	}
}

void UTbSimpleNoPropertiesInterfaceMsgBusClient::OnServiceClosedConnection(const FTbSimpleNoPropertiesInterfaceServiceDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		return;
	}

	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

void UTbSimpleNoPropertiesInterfaceMsgBusClient::FuncVoid_Implementation()
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleNoPropertiesInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return;
	}

	auto msg = new FTbSimpleNoPropertiesInterfaceFuncVoidRequestMessage();
	msg->RepsonseId = FGuid::NewGuid();

	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid())
	{

		TbSimpleNoPropertiesInterfaceMsgBusEndpoint->Send<FTbSimpleNoPropertiesInterfaceFuncVoidRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return;
	}

	return;
}

bool UTbSimpleNoPropertiesInterfaceMsgBusClient::FuncBool_Implementation(bool bInParamBool)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleNoPropertiesInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return false;
	}

	auto msg = new FTbSimpleNoPropertiesInterfaceFuncBoolRequestMessage();
	msg->RepsonseId = FGuid::NewGuid();
	msg->bParamBool = bInParamBool;

	if (TbSimpleNoPropertiesInterfaceMsgBusEndpoint.IsValid())
	{
		TPromise<bool> Promise;
		StorePromise(msg->RepsonseId, Promise);

		TbSimpleNoPropertiesInterfaceMsgBusEndpoint->Send<FTbSimpleNoPropertiesInterfaceFuncBoolRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return Promise.GetFuture().Get();
	}

	return false;
}

void UTbSimpleNoPropertiesInterfaceMsgBusClient::OnFuncBoolReply(const FTbSimpleNoPropertiesInterfaceFuncBoolReplyMessage& InFuncBoolReplyMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InFuncBoolReplyMessage.RepsonseId, InFuncBoolReplyMessage.Result);
}

void UTbSimpleNoPropertiesInterfaceMsgBusClient::OnSigVoid(const FTbSimpleNoPropertiesInterfaceSigVoidSignalMessage& InSigVoidMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleNoPropertiesInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSigVoidSignal.Broadcast();
	return;
}

void UTbSimpleNoPropertiesInterfaceMsgBusClient::OnSigBool(const FTbSimpleNoPropertiesInterfaceSigBoolSignalMessage& InSigBoolMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleNoPropertiesInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSigBoolSignal.Broadcast(InSigBoolMessage.bParamBool);
	return;
}

template <typename ResultType>
bool UTbSimpleNoPropertiesInterfaceMsgBusClient::StorePromise(const FGuid& Id, TPromise<ResultType>& Promise)
{
	FScopeLock Lock(&ReplyPromisesMapCS);
	return ReplyPromisesMap.Add(Id, &Promise) != nullptr;
}

template <typename ResultType>
bool UTbSimpleNoPropertiesInterfaceMsgBusClient::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
	TPromise<ResultType>* PromisePtr = nullptr;

	{
		FScopeLock Lock(&ReplyPromisesMapCS);
		if (auto** Found = ReplyPromisesMap.Find(Id))
		{
			PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
			ReplyPromisesMap.Remove(Id);
		}
	}

	if (PromisePtr)
	{
		PromisePtr->SetValue(Value);
		return true;
	}
	return false;
}

template bool UTbSimpleNoPropertiesInterfaceMsgBusClient::StorePromise<bool>(const FGuid& Id, TPromise<bool>& Promise);
template bool UTbSimpleNoPropertiesInterfaceMsgBusClient::FulfillPromise<bool>(const FGuid& Id, const bool& Value);
