/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/MsgBus/TbSimpleNoOperationsInterfaceMsgBusAdapter.h"
#include "Generated/MsgBus/TbSimpleNoOperationsInterfaceMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
UTbSimpleNoOperationsInterfaceMsgBusAdapter::UTbSimpleNoOperationsInterfaceMsgBusAdapter()
{
}

void UTbSimpleNoOperationsInterfaceMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTbSimpleNoOperationsInterfaceMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTbSimpleNoOperationsInterfaceMsgBusAdapter::_StartListening()
{
	if (TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	TbSimpleNoOperationsInterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSimple/NoOperationsInterface/Service")
		.Handling<FTbSimpleNoOperationsInterfaceDiscoveryMessage>(this, &UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnNewClientDiscovered)
		.Handling<FTbSimpleNoOperationsInterfacePingMessage>(this, &UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnPing)
		.Handling<FTbSimpleNoOperationsInterfaceClientDisconnectMessage>(this, &UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnClientDisconnected)
		.Handling<FTbSimpleNoOperationsInterfaceSetPropBoolRequestMessage>(this, &UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnSetPropBoolRequest)
		.Handling<FTbSimpleNoOperationsInterfaceSetPropIntRequestMessage>(this, &UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnSetPropIntRequest)
		.Build();
	// clang-format on

	if (TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoOperationsInterfaceMsgBusEndpoint->Subscribe<FTbSimpleNoOperationsInterfaceDiscoveryMessage>();
	}
}

void UTbSimpleNoOperationsInterfaceMsgBusAdapter::_StopListening()
{
	auto msg = new FTbSimpleNoOperationsInterfaceServiceDisconnectMessage();

	if (TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoOperationsInterfaceMsgBusEndpoint->Send<FTbSimpleNoOperationsInterfaceServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbSimpleNoOperationsInterfaceMsgBusEndpoint.Reset();
	ConnectedClients.Reset();
}

bool UTbSimpleNoOperationsInterfaceMsgBusAdapter::_IsListening() const
{
	return TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid();
}

void UTbSimpleNoOperationsInterfaceMsgBusAdapter::_setBackendService(TScriptInterface<ITbSimpleNoOperationsInterfaceInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbSimpleNoOperationsInterfaceSignals* BackendSignals = BackendService->Execute__GetSignals(BackendService.GetObject());
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service TbSimpleNoOperationsInterface"));
		BackendSignals->OnPropBoolChanged.RemoveDynamic(this, &UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnPropBoolChanged);
		BackendSignals->OnPropIntChanged.RemoveDynamic(this, &UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnPropIntChanged);
		BackendSignals->OnSigVoidSignal.RemoveDynamic(this, &UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnSigVoid);
		BackendSignals->OnSigBoolSignal.RemoveDynamic(this, &UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnSigBool);
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbSimpleNoOperationsInterface is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbSimpleNoOperationsInterfaceSignals* BackendSignals = BackendService->Execute__GetSignals(BackendService.GetObject());
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service TbSimpleNoOperationsInterface"));
	// connect property changed signals or simple events
	BackendSignals->OnPropBoolChanged.AddDynamic(this, &UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnPropBoolChanged);
	BackendSignals->OnPropIntChanged.AddDynamic(this, &UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnPropIntChanged);
	BackendSignals->OnSigVoidSignal.AddDynamic(this, &UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnSigVoid);
	BackendSignals->OnSigBoolSignal.AddDynamic(this, &UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnSigBool);
}

void UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnNewClientDiscovered(const FTbSimpleNoOperationsInterfaceDiscoveryMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FMessageAddress& ClientAddress = ConnectedClients.AddDefaulted_GetRef();
	ClientAddress = Context->GetSender();

	auto msg = new FTbSimpleNoOperationsInterfaceInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;
	msg->bPropBool = BackendService->Execute_GetPropBool(BackendService.GetObject());
	msg->PropInt = BackendService->Execute_GetPropInt(BackendService.GetObject());

	if (TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoOperationsInterfaceMsgBusEndpoint->Send<FTbSimpleNoOperationsInterfaceInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnPing(const FTbSimpleNoOperationsInterfacePingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTbSimpleNoOperationsInterfacePongMessage();
	msg->Timestamp = InMessage.Timestamp;

	if (TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoOperationsInterfaceMsgBusEndpoint->Send<FTbSimpleNoOperationsInterfacePongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnClientDisconnected(const FTbSimpleNoOperationsInterfaceClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	ConnectedClients.Remove(Context->GetSender());
}

void UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnSigVoid()
{
	auto msg = new FTbSimpleNoOperationsInterfaceSigVoidSignalMessage();
	if (TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoOperationsInterfaceMsgBusEndpoint->Send<FTbSimpleNoOperationsInterfaceSigVoidSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnSigBool(bool bInParamBool)
{
	auto msg = new FTbSimpleNoOperationsInterfaceSigBoolSignalMessage();
	msg->bParamBool = bInParamBool;
	if (TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoOperationsInterfaceMsgBusEndpoint->Send<FTbSimpleNoOperationsInterfaceSigBoolSignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnSetPropBoolRequest(const FTbSimpleNoOperationsInterfaceSetPropBoolRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetPropBool(BackendService.GetObject(), InMessage.bPropBool);
}

void UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnPropBoolChanged(bool bInPropBool)
{
	auto msg = new FTbSimpleNoOperationsInterfacePropBoolChangedMessage();
	msg->bPropBool = bInPropBool;

	if (TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoOperationsInterfaceMsgBusEndpoint->Send<FTbSimpleNoOperationsInterfacePropBoolChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnSetPropIntRequest(const FTbSimpleNoOperationsInterfaceSetPropIntRequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->Execute_SetPropInt(BackendService.GetObject(), InMessage.PropInt);
}

void UTbSimpleNoOperationsInterfaceMsgBusAdapter::OnPropIntChanged(int32 InPropInt)
{
	auto msg = new FTbSimpleNoOperationsInterfacePropIntChangedMessage();
	msg->PropInt = InPropInt;

	if (TbSimpleNoOperationsInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleNoOperationsInterfaceMsgBusEndpoint->Send<FTbSimpleNoOperationsInterfacePropIntChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
