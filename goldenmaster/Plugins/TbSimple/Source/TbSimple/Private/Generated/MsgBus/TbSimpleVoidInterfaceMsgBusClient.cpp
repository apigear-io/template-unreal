/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/MsgBus/TbSimpleVoidInterfaceMsgBusClient.h"
#include "Generated/MsgBus/TbSimpleVoidInterfaceMsgBusMessages.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
#include "MessageEndpointBuilder.h"
#include "MessageEndpoint.h"
DEFINE_LOG_CATEGORY(LogTbSimpleVoidInterfaceMsgBusClient);

UTbSimpleVoidInterfaceMsgBusClient::UTbSimpleVoidInterfaceMsgBusClient()
	: UAbstractTbSimpleVoidInterface()
{
	/* m_sink = std::make_shared<FOLinkSink>("tb.simple.VoidInterface"); */
}

UTbSimpleVoidInterfaceMsgBusClient::~UTbSimpleVoidInterfaceMsgBusClient() = default;

void UTbSimpleVoidInterfaceMsgBusClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	Connect();
}

void UTbSimpleVoidInterfaceMsgBusClient::Deinitialize()
{
	Disconnect();

	Super::Deinitialize();
}

void UTbSimpleVoidInterfaceMsgBusClient::Connect()
{
	if (IsConnected())
	{
		return;
	}

	if (TbSimpleVoidInterfaceMsgBusEndpoint.IsValid() && !ServiceAddress.IsValid())
	{
		DiscoverService();
		return;
	}

	// clang-format off
	TbSimpleVoidInterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSimple/VoidInterface/Client")
		.Handling<FTbSimpleVoidInterfaceInitMessage>(this, &UTbSimpleVoidInterfaceMsgBusClient::OnConnectionInit)
		.Handling<FTbSimpleVoidInterfaceServiceDisconnectMessage>(this, &UTbSimpleVoidInterfaceMsgBusClient::OnServiceClosedConnection)
		.Handling<FTbSimpleVoidInterfaceSigVoidSignalMessage>(this, &UTbSimpleVoidInterfaceMsgBusClient::OnSigVoid)
		.Build();
	// clang-format on

	DiscoverService();
}

void UTbSimpleVoidInterfaceMsgBusClient::Disconnect()
{
	if (!IsConnected())
	{
		return;
	}

	auto msg = new FTbSimpleVoidInterfaceClientDisconnectMessage();

	if (TbSimpleVoidInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleVoidInterfaceMsgBusEndpoint->Send<FTbSimpleVoidInterfaceClientDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbSimpleVoidInterfaceMsgBusEndpoint.Reset();
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

void UTbSimpleVoidInterfaceMsgBusClient::DiscoverService()
{
	if (TbSimpleVoidInterfaceMsgBusEndpoint.IsValid())
	{
		TbSimpleVoidInterfaceMsgBusEndpoint->Publish<FTbSimpleVoidInterfaceDiscoveryMessage>(new FTbSimpleVoidInterfaceDiscoveryMessage());
	}
}

bool UTbSimpleVoidInterfaceMsgBusClient::IsConnected() const
{
	return TbSimpleVoidInterfaceMsgBusEndpoint.IsValid() && ServiceAddress.IsValid();
}

void UTbSimpleVoidInterfaceMsgBusClient::OnConnectionInit(const FTbSimpleVoidInterfaceInitMessage& InInitMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ServiceAddress.IsValid())
	{
		ServiceAddress = Context->GetSender();

		_ConnectionStatusChanged.Broadcast(true);
	}
	else
	{
		UE_LOG(LogTbSimpleVoidInterfaceMsgBusClient, Error, TEXT("Got a second init message - should not happen"));
	}
}

void UTbSimpleVoidInterfaceMsgBusClient::OnServiceClosedConnection(const FTbSimpleVoidInterfaceServiceDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		return;
	}

	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

void UTbSimpleVoidInterfaceMsgBusClient::FuncVoid_Implementation()
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSimpleVoidInterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return;
	}

	auto msg = new FTbSimpleVoidInterfaceFuncVoidRequestMessage();
	msg->RepsonseId = FGuid::NewGuid();

	if (TbSimpleVoidInterfaceMsgBusEndpoint.IsValid())
	{

		TbSimpleVoidInterfaceMsgBusEndpoint->Send<FTbSimpleVoidInterfaceFuncVoidRequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return;
	}

	return;
}

void UTbSimpleVoidInterfaceMsgBusClient::OnSigVoid(const FTbSimpleVoidInterfaceSigVoidSignalMessage& InSigVoidMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSimpleVoidInterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSigVoidSignal.Broadcast();
	return;
}

template <typename ResultType>
bool UTbSimpleVoidInterfaceMsgBusClient::StorePromise(const FGuid& Id, TPromise<ResultType>& Promise)
{
	FScopeLock Lock(&ReplyPromisesMapCS);
	return ReplyPromisesMap.Add(Id, &Promise) != nullptr;
}

template <typename ResultType>
bool UTbSimpleVoidInterfaceMsgBusClient::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
	TPromise<ResultType>* PromisePtr = nullptr;

	{
		FScopeLock Lock(&ReplyPromisesMapCS);
		if (auto** Found = ReplyPromisesMap.Find(Id))
		{
			PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
			ReplyPromisesMap.Remove(Id);
		}
	}

	if (PromisePtr)
	{
		PromisePtr->SetValue(Value);
		return true;
	}
	return false;
}
