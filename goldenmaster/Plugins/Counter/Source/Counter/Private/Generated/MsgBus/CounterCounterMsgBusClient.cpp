/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/MsgBus/CounterCounterMsgBusClient.h"
#include "Generated/MsgBus/CounterCounterMsgBusMessages.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "TimerManager.h"
#include "Misc/DateTime.h"
#include "GenericPlatform/GenericPlatformMath.h"
#include "GenericPlatform/GenericPlatformTime.h"
#include "MessageEndpointBuilder.h"
#include "MessageEndpoint.h"
#include "HAL/CriticalSection.h"

/**
   \brief data structure to hold the last sent property values
*/
struct CounterCounterPropertiesMsgBusData
{
	FCriticalSection VectorMutex;
	FCustomTypesVector3D Vector{FCustomTypesVector3D()};
	FCriticalSection ExternVectorMutex;
	FVector ExternVector{FVector(0.f, 0.f, 0.f)};
	FCriticalSection VectorArrayMutex;
	TArray<FCustomTypesVector3D> VectorArray{TArray<FCustomTypesVector3D>()};
	FCriticalSection ExternVectorArrayMutex;
	TArray<FVector> ExternVectorArray{TArray<FVector>()};
};
DEFINE_LOG_CATEGORY(LogCounterCounterMsgBusClient);

UCounterCounterMsgBusClient::UCounterCounterMsgBusClient()
	: UAbstractCounterCounter()
	, _SentData(MakePimpl<CounterCounterPropertiesMsgBusData>())
{
}

UCounterCounterMsgBusClient::~UCounterCounterMsgBusClient() = default;

void UCounterCounterMsgBusClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UCounterCounterMsgBusClient::Deinitialize()
{
	_Disconnect();

	Super::Deinitialize();
}

void UCounterCounterMsgBusClient::_Connect()
{
	if (!_HeartbeatTimerHandle.IsValid() && GetWorld())
	{
		GetWorld()->GetTimerManager().SetTimer(_HeartbeatTimerHandle, this, &UCounterCounterMsgBusClient::_OnHeartbeat, _HeartbeatIntervalMS / 1000.0f, true);
	}

	if (_IsConnected())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Log, TEXT("Already connected, cannot connect again."));
		return;
	}

	if (CounterCounterMsgBusEndpoint.IsValid() && !ServiceAddress.IsValid())
	{
		_DiscoverService();
		return;
	}

	// clang-format off
	CounterCounterMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/Counter/Counter/Client")
		.Handling<FCounterCounterInitMessage>(this, &UCounterCounterMsgBusClient::OnConnectionInit)
		.Handling<FCounterCounterPongMessage>(this, &UCounterCounterMsgBusClient::OnPong)
		.Handling<FCounterCounterServiceDisconnectMessage>(this, &UCounterCounterMsgBusClient::OnServiceClosedConnection)
		.Handling<FCounterCounterValueChangedSignalMessage>(this, &UCounterCounterMsgBusClient::OnValueChanged)
		.Handling<FCounterCounterVectorChangedMessage>(this, &UCounterCounterMsgBusClient::OnVectorChanged)
		.Handling<FCounterCounterExternVectorChangedMessage>(this, &UCounterCounterMsgBusClient::OnExternVectorChanged)
		.Handling<FCounterCounterVectorArrayChangedMessage>(this, &UCounterCounterMsgBusClient::OnVectorArrayChanged)
		.Handling<FCounterCounterExternVectorArrayChangedMessage>(this, &UCounterCounterMsgBusClient::OnExternVectorArrayChanged)
		.Handling<FCounterCounterIncrementReplyMessage>(this, &UCounterCounterMsgBusClient::OnIncrementReply)
		.Handling<FCounterCounterIncrementArrayReplyMessage>(this, &UCounterCounterMsgBusClient::OnIncrementArrayReply)
		.Handling<FCounterCounterDecrementReplyMessage>(this, &UCounterCounterMsgBusClient::OnDecrementReply)
		.Handling<FCounterCounterDecrementArrayReplyMessage>(this, &UCounterCounterMsgBusClient::OnDecrementArrayReply)
		.Build();
	// clang-format on

	_DiscoverService();
}

void UCounterCounterMsgBusClient::_Disconnect()
{
	_LastHbTimestamp = 0.0f;
	if (_HeartbeatTimerHandle.IsValid() && GetWorld())
	{
		GetWorld()->GetTimerManager().ClearTimer(_HeartbeatTimerHandle);
	}

	if (!_IsConnected())
	{
		return;
	}

	auto msg = new FCounterCounterClientDisconnectMessage();

	CounterCounterMsgBusEndpoint->Send<FCounterCounterClientDisconnectMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	CounterCounterMsgBusEndpoint.Reset();
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

void UCounterCounterMsgBusClient::_DiscoverService()
{
	if (!CounterCounterMsgBusEndpoint.IsValid())
	{
		return;
	}

	auto msg = new FCounterCounterDiscoveryMessage();
	CounterCounterMsgBusEndpoint->Publish<FCounterCounterDiscoveryMessage>(msg);
}

bool UCounterCounterMsgBusClient::_IsConnected() const
{
	return CounterCounterMsgBusEndpoint.IsValid() && ServiceAddress.IsValid();
}

void UCounterCounterMsgBusClient::OnConnectionInit(const FCounterCounterInitMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress.IsValid())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Warning, TEXT("Got a second init message - should not happen"));
		return;
	}

	ServiceAddress = Context->GetSender();

	const bool b_ClientPingIntervalMSChanged = InMessage._ClientPingIntervalMS != _HeartbeatIntervalMS;
	if (b_ClientPingIntervalMSChanged)
	{
		_HeartbeatIntervalMS = InMessage._ClientPingIntervalMS;

		if (_HeartbeatTimerHandle.IsValid() && GetWorld())
		{
			GetWorld()->GetTimerManager().ClearTimer(_HeartbeatTimerHandle);
		}

		if (!_HeartbeatTimerHandle.IsValid() && GetWorld())
		{
			GetWorld()->GetTimerManager().SetTimer(_HeartbeatTimerHandle, this, &UCounterCounterMsgBusClient::_OnHeartbeat, _HeartbeatIntervalMS / 1000.0f, true);
		}
	}
	const bool bVectorChanged = InMessage.Vector != Vector;
	if (bVectorChanged)
	{
		Vector = InMessage.Vector;
		Execute__GetSignals(this)->OnVectorChanged.Broadcast(Vector);
	}

	const bool bExternVectorChanged = InMessage.ExternVector != ExternVector;
	if (bExternVectorChanged)
	{
		ExternVector = InMessage.ExternVector;
		Execute__GetSignals(this)->OnExternVectorChanged.Broadcast(ExternVector);
	}

	const bool bVectorArrayChanged = InMessage.VectorArray != VectorArray;
	if (bVectorArrayChanged)
	{
		VectorArray = InMessage.VectorArray;
		Execute__GetSignals(this)->OnVectorArrayChanged.Broadcast(VectorArray);
	}

	const bool bExternVectorArrayChanged = InMessage.ExternVectorArray != ExternVectorArray;
	if (bExternVectorArrayChanged)
	{
		ExternVectorArray = InMessage.ExternVectorArray;
		Execute__GetSignals(this)->OnExternVectorArrayChanged.Broadcast(ExternVectorArray);
	}

	_ConnectionStatusChanged.Broadcast(true);
}

void UCounterCounterMsgBusClient::_OnHeartbeat()
{
	if (_LastHbTimestamp > 0.1f)
	{
		double Delta = (FPlatformTime::Seconds() - _LastHbTimestamp) * 1000;

		if (Delta > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			ServiceAddress.Invalidate();
			_LastHbTimestamp = 0.0f;
		}
	}

	if (!_IsConnected())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Warning, TEXT("Heartbeat failed. Client has no connection to service. Reconnecting ..."));

		_Connect();
		return;
	}

	auto msg = new FCounterCounterPingMessage();
	msg->Timestamp = FPlatformTime::Seconds();

	CounterCounterMsgBusEndpoint->Send<FCounterCounterPingMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
}

void UCounterCounterMsgBusClient::OnPong(const FCounterCounterPongMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	_LastHbTimestamp = InMessage.Timestamp;

	const double Current = FPlatformTime::Seconds();
	const double DeltaMS = (Current - InMessage.Timestamp) * 1000.0f;

	Stats.CurrentRTT_MS = DeltaMS;
	Stats.AverageRTT_MS = (Stats.AverageRTT_MS + Stats.CurrentRTT_MS) / 2.0f;
	Stats.MaxRTT_MS = FGenericPlatformMath::Max(Stats.MaxRTT_MS, Stats.CurrentRTT_MS);
	Stats.MinRTT_MS = FGenericPlatformMath::Min(Stats.MinRTT_MS, Stats.CurrentRTT_MS);

	_StatsUpdated.Broadcast(Stats);
}

const FCounterCounterStats& UCounterCounterMsgBusClient::_GetStats() const
{
	return Stats;
}

void UCounterCounterMsgBusClient::OnServiceClosedConnection(const FCounterCounterServiceDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		return;
	}

	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

FCustomTypesVector3D UCounterCounterMsgBusClient::GetVector_Implementation() const
{
	return Vector;
}

void UCounterCounterMsgBusClient::SetVector_Implementation(const FCustomTypesVector3D& InVector)
{
	if (!_IsConnected())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetVector_Implementation() == InVector)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->VectorMutex));
		if (_SentData->Vector == InVector)
		{
			return;
		}
	}

	auto msg = new FCounterCounterSetVectorRequestMessage();
	msg->Vector = InVector;

	CounterCounterMsgBusEndpoint->Send<FCounterCounterSetVectorRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	FScopeLock Lock(&(_SentData->VectorMutex));
	_SentData->Vector = InVector;
}

FVector UCounterCounterMsgBusClient::GetExternVector_Implementation() const
{
	return ExternVector;
}

void UCounterCounterMsgBusClient::SetExternVector_Implementation(const FVector& InExternVector)
{
	if (!_IsConnected())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetExternVector_Implementation() == InExternVector)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->ExternVectorMutex));
		if (_SentData->ExternVector == InExternVector)
		{
			return;
		}
	}

	auto msg = new FCounterCounterSetExternVectorRequestMessage();
	msg->ExternVector = InExternVector;

	CounterCounterMsgBusEndpoint->Send<FCounterCounterSetExternVectorRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	FScopeLock Lock(&(_SentData->ExternVectorMutex));
	_SentData->ExternVector = InExternVector;
}

TArray<FCustomTypesVector3D> UCounterCounterMsgBusClient::GetVectorArray_Implementation() const
{
	return VectorArray;
}

void UCounterCounterMsgBusClient::SetVectorArray_Implementation(const TArray<FCustomTypesVector3D>& InVectorArray)
{
	if (!_IsConnected())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetVectorArray_Implementation() == InVectorArray)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->VectorArrayMutex));
		if (_SentData->VectorArray == InVectorArray)
		{
			return;
		}
	}

	auto msg = new FCounterCounterSetVectorArrayRequestMessage();
	msg->VectorArray = InVectorArray;

	CounterCounterMsgBusEndpoint->Send<FCounterCounterSetVectorArrayRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	FScopeLock Lock(&(_SentData->VectorArrayMutex));
	_SentData->VectorArray = InVectorArray;
}

TArray<FVector> UCounterCounterMsgBusClient::GetExternVectorArray_Implementation() const
{
	return ExternVectorArray;
}

void UCounterCounterMsgBusClient::SetExternVectorArray_Implementation(const TArray<FVector>& InExternVectorArray)
{
	if (!_IsConnected())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetExternVectorArray_Implementation() == InExternVectorArray)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->ExternVectorArrayMutex));
		if (_SentData->ExternVectorArray == InExternVectorArray)
		{
			return;
		}
	}

	auto msg = new FCounterCounterSetExternVectorArrayRequestMessage();
	msg->ExternVectorArray = InExternVectorArray;

	CounterCounterMsgBusEndpoint->Send<FCounterCounterSetExternVectorArrayRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());
	FScopeLock Lock(&(_SentData->ExternVectorArrayMutex));
	_SentData->ExternVectorArray = InExternVectorArray;
}

FVector UCounterCounterMsgBusClient::Increment_Implementation(const FVector& InVec)
{
	if (!_IsConnected())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Error, TEXT("Client has no connection to service."));

		return FVector(0.f, 0.f, 0.f);
	}

	auto msg = new FCounterCounterIncrementRequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->Vec = InVec;
	TPromise<FVector> Promise;
	StorePromise(msg->ResponseId, Promise);

	CounterCounterMsgBusEndpoint->Send<FCounterCounterIncrementRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UCounterCounterMsgBusClient::OnIncrementReply(const FCounterCounterIncrementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

TArray<FVector> UCounterCounterMsgBusClient::IncrementArray_Implementation(const TArray<FVector>& InVec)
{
	if (!_IsConnected())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Error, TEXT("Client has no connection to service."));

		return TArray<FVector>();
	}

	auto msg = new FCounterCounterIncrementArrayRequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->Vec = InVec;
	TPromise<TArray<FVector>> Promise;
	StorePromise(msg->ResponseId, Promise);

	CounterCounterMsgBusEndpoint->Send<FCounterCounterIncrementArrayRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UCounterCounterMsgBusClient::OnIncrementArrayReply(const FCounterCounterIncrementArrayReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

FCustomTypesVector3D UCounterCounterMsgBusClient::Decrement_Implementation(const FCustomTypesVector3D& InVec)
{
	if (!_IsConnected())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Error, TEXT("Client has no connection to service."));

		return FCustomTypesVector3D();
	}

	auto msg = new FCounterCounterDecrementRequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->Vec = InVec;
	TPromise<FCustomTypesVector3D> Promise;
	StorePromise(msg->ResponseId, Promise);

	CounterCounterMsgBusEndpoint->Send<FCounterCounterDecrementRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UCounterCounterMsgBusClient::OnDecrementReply(const FCounterCounterDecrementReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

TArray<FCustomTypesVector3D> UCounterCounterMsgBusClient::DecrementArray_Implementation(const TArray<FCustomTypesVector3D>& InVec)
{
	if (!_IsConnected())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Error, TEXT("Client has no connection to service."));

		return TArray<FCustomTypesVector3D>();
	}

	auto msg = new FCounterCounterDecrementArrayRequestMessage();
	msg->ResponseId = FGuid::NewGuid();
	msg->Vec = InVec;
	TPromise<TArray<FCustomTypesVector3D>> Promise;
	StorePromise(msg->ResponseId, Promise);

	CounterCounterMsgBusEndpoint->Send<FCounterCounterDecrementArrayRequestMessage>(msg, EMessageFlags::Reliable,
		nullptr,
		TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
		FTimespan::Zero(),
		FDateTime::MaxValue());

	return Promise.GetFuture().Get();
}

void UCounterCounterMsgBusClient::OnDecrementArrayReply(const FCounterCounterDecrementArrayReplyMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InMessage.ResponseId, InMessage.Result);
}

void UCounterCounterMsgBusClient::OnValueChanged(const FCounterCounterValueChangedSignalMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnValueChangedSignal.Broadcast(InMessage.Vector, InMessage.ExternVector, InMessage.VectorArray, InMessage.ExternVectorArray);
	return;
}

void UCounterCounterMsgBusClient::OnVectorChanged(const FCounterCounterVectorChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bVectorChanged = InMessage.Vector != Vector;
	if (bVectorChanged)
	{
		Vector = InMessage.Vector;
		Execute__GetSignals(this)->OnVectorChanged.Broadcast(Vector);
	}
}

void UCounterCounterMsgBusClient::OnExternVectorChanged(const FCounterCounterExternVectorChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bExternVectorChanged = InMessage.ExternVector != ExternVector;
	if (bExternVectorChanged)
	{
		ExternVector = InMessage.ExternVector;
		Execute__GetSignals(this)->OnExternVectorChanged.Broadcast(ExternVector);
	}
}

void UCounterCounterMsgBusClient::OnVectorArrayChanged(const FCounterCounterVectorArrayChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bVectorArrayChanged = InMessage.VectorArray != VectorArray;
	if (bVectorArrayChanged)
	{
		VectorArray = InMessage.VectorArray;
		Execute__GetSignals(this)->OnVectorArrayChanged.Broadcast(VectorArray);
	}
}

void UCounterCounterMsgBusClient::OnExternVectorArrayChanged(const FCounterCounterExternVectorArrayChangedMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogCounterCounterMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bExternVectorArrayChanged = InMessage.ExternVectorArray != ExternVectorArray;
	if (bExternVectorArrayChanged)
	{
		ExternVectorArray = InMessage.ExternVectorArray;
		Execute__GetSignals(this)->OnExternVectorArrayChanged.Broadcast(ExternVectorArray);
	}
}

template <typename ResultType>
bool UCounterCounterMsgBusClient::StorePromise(const FGuid& Id, TPromise<ResultType>& Promise)
{
	FScopeLock Lock(&ReplyPromisesMapCS);
	return ReplyPromisesMap.Add(Id, &Promise) != nullptr;
}

template <typename ResultType>
bool UCounterCounterMsgBusClient::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
	TPromise<ResultType>* PromisePtr = nullptr;

	{
		FScopeLock Lock(&ReplyPromisesMapCS);
		if (auto** Found = ReplyPromisesMap.Find(Id))
		{
			PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
			ReplyPromisesMap.Remove(Id);
		}
	}

	if (PromisePtr)
	{
		PromisePtr->SetValue(Value);
		return true;
	}
	return false;
}

template bool UCounterCounterMsgBusClient::StorePromise<FCustomTypesVector3D>(const FGuid& Id, TPromise<FCustomTypesVector3D>& Promise);
template bool UCounterCounterMsgBusClient::FulfillPromise<FCustomTypesVector3D>(const FGuid& Id, const FCustomTypesVector3D& Value);
template bool UCounterCounterMsgBusClient::StorePromise<FVector>(const FGuid& Id, TPromise<FVector>& Promise);
template bool UCounterCounterMsgBusClient::FulfillPromise<FVector>(const FGuid& Id, const FVector& Value);
template bool UCounterCounterMsgBusClient::StorePromise<TArray<FCustomTypesVector3D>>(const FGuid& Id, TPromise<TArray<FCustomTypesVector3D>>& Promise);
template bool UCounterCounterMsgBusClient::FulfillPromise<TArray<FCustomTypesVector3D>>(const FGuid& Id, const TArray<FCustomTypesVector3D>& Value);
template bool UCounterCounterMsgBusClient::StorePromise<TArray<FVector>>(const FGuid& Id, TPromise<TArray<FVector>>& Promise);
template bool UCounterCounterMsgBusClient::FulfillPromise<TArray<FVector>>(const FGuid& Id, const TArray<FVector>& Value);
