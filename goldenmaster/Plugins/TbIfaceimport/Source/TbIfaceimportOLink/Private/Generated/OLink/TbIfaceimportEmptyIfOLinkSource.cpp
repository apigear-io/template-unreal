/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbIfaceimportEmptyIfOLinkSource.h"
#include "HAL/Platform.h"
#include "OLinkCommon.h"
#if !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
#include "Async/Future.h"
#include "Async/Async.h"
#include "TbIfaceimport/Generated/api/TbIfaceimport.json.adapter.h"
#include "OLinkClientConnection.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
THIRD_PARTY_INCLUDES_START
#include "olink/iobjectsource.h"
THIRD_PARTY_INCLUDES_END

using namespace ApiGear::ObjectLink;

namespace
{
static const std::string TbIfaceimportEmptyIfIdentifier{"tb.ifaceimport.EmptyIf"};
}

DEFINE_LOG_CATEGORY(LogTbIfaceimportEmptyIfOLinkSource);
TbIfaceimportEmptyIfOLinkSource::TbIfaceimportEmptyIfOLinkSource()
	: Host(nullptr)
{
}

void TbIfaceimportEmptyIfOLinkSource::setBackendService(TScriptInterface<ITbIfaceimportEmptyIfInterface> InService)
{
	// only set if interface is implemented
	if (InService.GetInterface() == nullptr)
	{
		UE_LOG(LogTbIfaceimportEmptyIfOLinkSource, Error, TEXT("Cannot set backend service - interface TbIfaceimportEmptyIf is not fully implemented"));
		return;
	}

	BackendService = InService;
}
void TbIfaceimportEmptyIfOLinkSource::setOLinkHost(TSoftObjectPtr<UOLinkHost> InHost)
{
	Host = InHost.Get();
}

//
// IObjectSource interface
//

std::string TbIfaceimportEmptyIfOLinkSource::olinkObjectName()
{
	return TbIfaceimportEmptyIfIdentifier;
}

nlohmann::json TbIfaceimportEmptyIfOLinkSource::olinkInvoke(const std::string& methodId, const nlohmann::json& args)
{
	if (!BackendService)
	{
		UE_LOG(LogTbIfaceimportEmptyIfOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter TbIfaceimportEmptyIfOLinkAdapter which implements the TbIfaceimportEmptyIf interface"));
		return nlohmann::json();
	}

	const std::string path = Name::getMemberName(methodId);
	return nlohmann::json();
}

void TbIfaceimportEmptyIfOLinkSource::olinkSetProperty(const std::string& propertyId, const nlohmann::json& value)
{
	if (!BackendService)
	{
		UE_LOG(LogTbIfaceimportEmptyIfOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter TbIfaceimportEmptyIfOLinkAdapter which implements the TbIfaceimportEmptyIf interface"));
		return;
	}

	const std::string path = Name::getMemberName(propertyId);
}

nlohmann::json TbIfaceimportEmptyIfOLinkSource::olinkCollectProperties()
{
	if (!BackendService)
	{
		UE_LOG(LogTbIfaceimportEmptyIfOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter TbIfaceimportEmptyIfOLinkAdapter which implements the TbIfaceimportEmptyIf interface"));
		return nlohmann::json();
	}

	return nlohmann::json::object({});
}
#endif // !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
