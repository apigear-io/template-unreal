/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Testbed2ManyParamInterfaceOLink.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "apig/Testbed2.json.adapter.h"
#include "unrealolink.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "ApiGear/Public/ApiGearConnectionManager.h"
#include "Misc/DateTime.h"

using namespace ApiGear::ObjectLink;

namespace Testbed2
{
namespace ManyParamInterface
{
namespace Private
{
OLinkService::OLinkService()
	: ITestbed2ManyParamInterfaceInterface()
	, m_node(nullptr)
	, m_isReady(false)
	, Prop1(0)
	, Prop2(0)
	, Prop3(0)
	, Prop4(0)
{
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetOLinkConnection()->Connect();
		AGCM->GetOLinkConnection()->linkObjectSource(olinkObjectName());
	}
	m_node = ClientRegistry::get().addObjectSink(this);
}

OLinkService::~OLinkService()
{
	ClientRegistry::get().removeObjectSink(this);
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetOLinkConnection()->unlinkObjectSource(olinkObjectName());
	}
	m_isReady = false;
	m_node = nullptr;
}

FTestbed2ManyParamInterfaceSig1Delegate& OLinkService::GetSig1SignalDelegate()
{
	return Sig1Signal;
}

FTestbed2ManyParamInterfaceSig2Delegate& OLinkService::GetSig2SignalDelegate()
{
	return Sig2Signal;
}

FTestbed2ManyParamInterfaceSig3Delegate& OLinkService::GetSig3SignalDelegate()
{
	return Sig3Signal;
}

FTestbed2ManyParamInterfaceSig4Delegate& OLinkService::GetSig4SignalDelegate()
{
	return Sig4Signal;
}

int32 OLinkService::GetProp1() const
{
	return Prop1;
}

void OLinkService::SetProp1(int32 InProp1)
{
	if (!m_node)
	{
		return;
	}
	m_node->setRemoteProperty("testbed2.ManyParamInterface/prop1", InProp1);
}

FTestbed2ManyParamInterfaceProp1ChangedDelegate& OLinkService::GetProp1ChangedDelegate()
{
	return Prop1Changed;
}
int32 OLinkService::GetProp2() const
{
	return Prop2;
}

void OLinkService::SetProp2(int32 InProp2)
{
	if (!m_node)
	{
		return;
	}
	m_node->setRemoteProperty("testbed2.ManyParamInterface/prop2", InProp2);
}

FTestbed2ManyParamInterfaceProp2ChangedDelegate& OLinkService::GetProp2ChangedDelegate()
{
	return Prop2Changed;
}
int32 OLinkService::GetProp3() const
{
	return Prop3;
}

void OLinkService::SetProp3(int32 InProp3)
{
	if (!m_node)
	{
		return;
	}
	m_node->setRemoteProperty("testbed2.ManyParamInterface/prop3", InProp3);
}

FTestbed2ManyParamInterfaceProp3ChangedDelegate& OLinkService::GetProp3ChangedDelegate()
{
	return Prop3Changed;
}
int32 OLinkService::GetProp4() const
{
	return Prop4;
}

void OLinkService::SetProp4(int32 InProp4)
{
	if (!m_node)
	{
		return;
	}
	m_node->setRemoteProperty("testbed2.ManyParamInterface/prop4", InProp4);
}

FTestbed2ManyParamInterfaceProp4ChangedDelegate& OLinkService::GetProp4ChangedDelegate()
{
	return Prop4Changed;
}

int32 OLinkService::Func1(int32 Param1)
{
	if (!m_node)
	{
		UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
		return 0;
	}
	TPromise<int32> Promise;
	Async(EAsyncExecution::Thread,
		[Param1, &Promise, this]()
		{
			InvokeReplyFunc GetManyParamInterfaceStateFunc = [&Promise](InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<int32>()); };
			m_node->invokeRemote("testbed2.ManyParamInterface/func1", {Param1}, GetManyParamInterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

int32 OLinkService::Func2(int32 Param1, int32 Param2)
{
	if (!m_node)
	{
		UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
		return 0;
	}
	TPromise<int32> Promise;
	Async(EAsyncExecution::Thread,
		[Param1, Param2, &Promise, this]()
		{
			InvokeReplyFunc GetManyParamInterfaceStateFunc = [&Promise](InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<int32>()); };
			m_node->invokeRemote("testbed2.ManyParamInterface/func2", {Param1, Param2}, GetManyParamInterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

int32 OLinkService::Func3(int32 Param1, int32 Param2, int32 Param3)
{
	if (!m_node)
	{
		UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
		return 0;
	}
	TPromise<int32> Promise;
	Async(EAsyncExecution::Thread,
		[Param1, Param2, Param3, &Promise, this]()
		{
			InvokeReplyFunc GetManyParamInterfaceStateFunc = [&Promise](InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<int32>()); };
			m_node->invokeRemote("testbed2.ManyParamInterface/func3", {Param1, Param2, Param3}, GetManyParamInterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

int32 OLinkService::Func4(int32 Param1, int32 Param2, int32 Param3, int32 Param4)
{
	if (!m_node)
	{
		UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
		return 0;
	}
	TPromise<int32> Promise;
	Async(EAsyncExecution::Thread,
		[Param1, Param2, Param3, Param4, &Promise, this]()
		{
			InvokeReplyFunc GetManyParamInterfaceStateFunc = [&Promise](InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<int32>()); };
			m_node->invokeRemote("testbed2.ManyParamInterface/func4", {Param1, Param2, Param3, Param4}, GetManyParamInterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

void OLinkService::applyState(const nlohmann::json& fields)
{
	if (fields.contains("prop1"))
	{
		if (Prop1 != fields["prop1"].get<int32>())
		{
			Prop1 = fields["prop1"].get<int32>();
			Prop1Changed.Broadcast(Prop1);
		}
	}
	if (fields.contains("prop2"))
	{
		if (Prop2 != fields["prop2"].get<int32>())
		{
			Prop2 = fields["prop2"].get<int32>();
			Prop2Changed.Broadcast(Prop2);
		}
	}
	if (fields.contains("prop3"))
	{
		if (Prop3 != fields["prop3"].get<int32>())
		{
			Prop3 = fields["prop3"].get<int32>();
			Prop3Changed.Broadcast(Prop3);
		}
	}
	if (fields.contains("prop4"))
	{
		if (Prop4 != fields["prop4"].get<int32>())
		{
			Prop4 = fields["prop4"].get<int32>();
			Prop4Changed.Broadcast(Prop4);
		}
	}
}

std::string OLinkService::olinkObjectName()
{
	return "testbed2.ManyParamInterface";
}

void OLinkService::olinkOnSignal(std::string name, nlohmann::json args)
{
	std::string path = Name::pathFromName(name);
	if (path == "sig1")
	{
		Sig1Signal.Broadcast(args[0].get<int32>());
		return;
	}
	if (path == "sig2")
	{
		Sig2Signal.Broadcast(args[0].get<int32>(), args[1].get<int32>());
		return;
	}
	if (path == "sig3")
	{
		Sig3Signal.Broadcast(args[0].get<int32>(), args[1].get<int32>(), args[2].get<int32>());
		return;
	}
	if (path == "sig4")
	{
		Sig4Signal.Broadcast(args[0].get<int32>(), args[1].get<int32>(), args[2].get<int32>(), args[3].get<int32>());
		return;
	}
}

void OLinkService::olinkOnPropertyChanged(std::string name, nlohmann::json value)
{
	std::string path = Name::pathFromName(name);
	applyState({{path, value}});
}

void OLinkService::olinkOnInit(std::string name, nlohmann::json props, IClientNode* node)
{
	m_isReady = true;
	m_node = node;
	applyState(props);
	// call isReady();
}

void OLinkService::olinkOnRelease()
{
	m_isReady = false;
	m_node = nullptr;
}

} // namespace Private
} // namespace ManyParamInterface
} // namespace Testbed2
