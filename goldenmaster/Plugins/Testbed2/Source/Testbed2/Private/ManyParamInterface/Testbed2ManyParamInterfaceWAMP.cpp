
/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Testbed2ManyParamInterfaceWAMP.h"
#include "apig/Testbed2.json.adapter.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "unrealwamp.h"

using namespace ApiGear::WAMP;

namespace Testbed2
{
namespace ManyParamInterface
{
namespace Private
{
WAMPService::WAMPService()
	: ITestbed2ManyParamInterfaceInterface()
	, Prop1(0)
	, Prop2(0)
	, Prop3(0)
	, Prop4(0)
{
	EventFunc ManyParamInterfaceStateChangedFunc = [this](EventArg arg)
	{
		const json fields = arg.kwargs;
		if (fields.contains("prop1"))
		{
			if (Prop1 != fields["prop1"].get<int32>())
			{
				Prop1 = fields["prop1"].get<int32>();
				Prop1Changed.Broadcast(Prop1);
			}
		}
		if (fields.contains("prop2"))
		{
			if (Prop2 != fields["prop2"].get<int32>())
			{
				Prop2 = fields["prop2"].get<int32>();
				Prop2Changed.Broadcast(Prop2);
			}
		}
		if (fields.contains("prop3"))
		{
			if (Prop3 != fields["prop3"].get<int32>())
			{
				Prop3 = fields["prop3"].get<int32>();
				Prop3Changed.Broadcast(Prop3);
			}
		}
		if (fields.contains("prop4"))
		{
			if (Prop4 != fields["prop4"].get<int32>())
			{
				Prop4 = fields["prop4"].get<int32>();
				Prop4Changed.Broadcast(Prop4);
			}
		}
	};
	UnrealWamp::instance()->doSubscribe("testbed2.ManyParamInterface", ManyParamInterfaceStateChangedFunc);

	ResponseFunc GetManyParamInterfaceStateFunc = [this](ResponseArg arg)
	{
		if (arg.args.size() != 1)
		{
			return;
		}
		const json fields = arg.args[0];
		if (fields.contains("prop1"))
		{
			if (Prop1 != fields["prop1"].get<int32>())
			{
				Prop1 = fields["prop1"].get<int32>();
				Prop1Changed.Broadcast(Prop1);
			}
		}
		if (fields.contains("prop2"))
		{
			if (Prop2 != fields["prop2"].get<int32>())
			{
				Prop2 = fields["prop2"].get<int32>();
				Prop2Changed.Broadcast(Prop2);
			}
		}
		if (fields.contains("prop3"))
		{
			if (Prop3 != fields["prop3"].get<int32>())
			{
				Prop3 = fields["prop3"].get<int32>();
				Prop3Changed.Broadcast(Prop3);
			}
		}
		if (fields.contains("prop4"))
		{
			if (Prop4 != fields["prop4"].get<int32>())
			{
				Prop4 = fields["prop4"].get<int32>();
				Prop4Changed.Broadcast(Prop4);
			}
		}
	};
	UnrealWamp::instance()->doCall("testbed2.ManyParamInterface._get", Arguments(), ArgumentsKw(), GetManyParamInterfaceStateFunc);

	EventFunc sig1Func = [this](EventArg arg)
	{
		if (arg.args.size() == 1)
		{
			Sig1Signal.Broadcast(arg.args[0].get<int32>());
		}
	};
	UnrealWamp::instance()->doSubscribe("testbed2.ManyParamInterface.sig1", sig1Func);

	EventFunc sig2Func = [this](EventArg arg)
	{
		if (arg.args.size() == 2)
		{
			Sig2Signal.Broadcast(arg.args[0].get<int32>(), arg.args[1].get<int32>());
		}
	};
	UnrealWamp::instance()->doSubscribe("testbed2.ManyParamInterface.sig2", sig2Func);

	EventFunc sig3Func = [this](EventArg arg)
	{
		if (arg.args.size() == 3)
		{
			Sig3Signal.Broadcast(arg.args[0].get<int32>(), arg.args[1].get<int32>(), arg.args[2].get<int32>());
		}
	};
	UnrealWamp::instance()->doSubscribe("testbed2.ManyParamInterface.sig3", sig3Func);

	EventFunc sig4Func = [this](EventArg arg)
	{
		if (arg.args.size() == 4)
		{
			Sig4Signal.Broadcast(arg.args[0].get<int32>(), arg.args[1].get<int32>(), arg.args[2].get<int32>(), arg.args[3].get<int32>());
		}
	};
	UnrealWamp::instance()->doSubscribe("testbed2.ManyParamInterface.sig4", sig4Func);
}

WAMPService::~WAMPService()
{
	UnrealWamp::instance()->doUnSubscribe("testbed2.ManyParamInterface");
	UnrealWamp::instance()->doUnSubscribe("testbed2.ManyParamInterface.sig1");
	UnrealWamp::instance()->doUnSubscribe("testbed2.ManyParamInterface.sig2");
	UnrealWamp::instance()->doUnSubscribe("testbed2.ManyParamInterface.sig3");
	UnrealWamp::instance()->doUnSubscribe("testbed2.ManyParamInterface.sig4");
}

FTestbed2ManyParamInterfaceSig1Delegate& WAMPService::GetSig1SignalDelegate()
{
	return Sig1Signal;
}

FTestbed2ManyParamInterfaceSig2Delegate& WAMPService::GetSig2SignalDelegate()
{
	return Sig2Signal;
}

FTestbed2ManyParamInterfaceSig3Delegate& WAMPService::GetSig3SignalDelegate()
{
	return Sig3Signal;
}

FTestbed2ManyParamInterfaceSig4Delegate& WAMPService::GetSig4SignalDelegate()
{
	return Sig4Signal;
}

int32 WAMPService::GetProp1() const
{
	return Prop1;
}

void WAMPService::SetProp1(int32 InProp1)
{
	ArgumentsKw fields_;
	fields_["prop1"] = InProp1;
	UnrealWamp::instance()->doCall("testbed2.ManyParamInterface._set", Arguments(), fields_);
}

FTestbed2ManyParamInterfaceProp1ChangedDelegate& WAMPService::GetProp1ChangedDelegate()
{
	return Prop1Changed;
}

int32 WAMPService::GetProp2() const
{
	return Prop2;
}

void WAMPService::SetProp2(int32 InProp2)
{
	ArgumentsKw fields_;
	fields_["prop2"] = InProp2;
	UnrealWamp::instance()->doCall("testbed2.ManyParamInterface._set", Arguments(), fields_);
}

FTestbed2ManyParamInterfaceProp2ChangedDelegate& WAMPService::GetProp2ChangedDelegate()
{
	return Prop2Changed;
}

int32 WAMPService::GetProp3() const
{
	return Prop3;
}

void WAMPService::SetProp3(int32 InProp3)
{
	ArgumentsKw fields_;
	fields_["prop3"] = InProp3;
	UnrealWamp::instance()->doCall("testbed2.ManyParamInterface._set", Arguments(), fields_);
}

FTestbed2ManyParamInterfaceProp3ChangedDelegate& WAMPService::GetProp3ChangedDelegate()
{
	return Prop3Changed;
}

int32 WAMPService::GetProp4() const
{
	return Prop4;
}

void WAMPService::SetProp4(int32 InProp4)
{
	ArgumentsKw fields_;
	fields_["prop4"] = InProp4;
	UnrealWamp::instance()->doCall("testbed2.ManyParamInterface._set", Arguments(), fields_);
}

FTestbed2ManyParamInterfaceProp4ChangedDelegate& WAMPService::GetProp4ChangedDelegate()
{
	return Prop4Changed;
}

int32 WAMPService::Func1(int32 Param1)
{
	TPromise<int32> Promise;
	Async(EAsyncExecution::Thread,
		[Param1, &Promise]()
		{
			ResponseFunc GetManyParamInterfaceStateFunc = [&Promise](ResponseArg arg)
			{
				if (arg.args.size() != 1)
				{
					return;
				}
				Promise.SetValue(arg.args[0].get<int32>());
			};
			UnrealWamp::instance()->doCall("testbed2.ManyParamInterface.func1", {Param1}, ArgumentsKw(), GetManyParamInterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

int32 WAMPService::Func2(int32 Param1, int32 Param2)
{
	TPromise<int32> Promise;
	Async(EAsyncExecution::Thread,
		[Param1, Param2, &Promise]()
		{
			ResponseFunc GetManyParamInterfaceStateFunc = [&Promise](ResponseArg arg)
			{
				if (arg.args.size() != 1)
				{
					return;
				}
				Promise.SetValue(arg.args[0].get<int32>());
			};
			UnrealWamp::instance()->doCall("testbed2.ManyParamInterface.func2", {Param1, Param2}, ArgumentsKw(), GetManyParamInterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

int32 WAMPService::Func3(int32 Param1, int32 Param2, int32 Param3)
{
	TPromise<int32> Promise;
	Async(EAsyncExecution::Thread,
		[Param1, Param2, Param3, &Promise]()
		{
			ResponseFunc GetManyParamInterfaceStateFunc = [&Promise](ResponseArg arg)
			{
				if (arg.args.size() != 1)
				{
					return;
				}
				Promise.SetValue(arg.args[0].get<int32>());
			};
			UnrealWamp::instance()->doCall("testbed2.ManyParamInterface.func3", {Param1, Param2, Param3}, ArgumentsKw(), GetManyParamInterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

int32 WAMPService::Func4(int32 Param1, int32 Param2, int32 Param3, int32 Param4)
{
	TPromise<int32> Promise;
	Async(EAsyncExecution::Thread,
		[Param1, Param2, Param3, Param4, &Promise]()
		{
			ResponseFunc GetManyParamInterfaceStateFunc = [&Promise](ResponseArg arg)
			{
				if (arg.args.size() != 1)
				{
					return;
				}
				Promise.SetValue(arg.args[0].get<int32>());
			};
			UnrealWamp::instance()->doCall("testbed2.ManyParamInterface.func4", {Param1, Param2, Param3, Param4}, ArgumentsKw(), GetManyParamInterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

} // namespace Private
} // namespace ManyParamInterface
} // namespace Testbed2
