/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Testbed2NestedStruct1InterfaceOLink.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "apig/Testbed2.json.adapter.h"
#include "unrealolink.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "ApiGear/Public/ApiGearConnectionManager.h"
#include "Misc/DateTime.h"

using namespace ApiGear::ObjectLink;
UTestbed2NestedStruct1InterfaceOLinkService::UTestbed2NestedStruct1InterfaceOLinkService()
	: ITestbed2NestedStruct1InterfaceInterface()
	, m_node(nullptr)
	, m_isReady(false)
{
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetOLinkConnection()->Connect();
		AGCM->GetOLinkConnection()->linkObjectSource(olinkObjectName());
	}
	m_node = ClientRegistry::get().addObjectSink(this);
}

UTestbed2NestedStruct1InterfaceOLinkService::~UTestbed2NestedStruct1InterfaceOLinkService()
{
	ClientRegistry::get().removeObjectSink(this);
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetOLinkConnection()->unlinkObjectSource(olinkObjectName());
	}
	m_isReady = false;
	m_node = nullptr;
}

void UTestbed2NestedStruct1InterfaceOLinkService::BroadcastSig1_Implementation(const FTestbed2NestedStruct1& Param1)
{
	Sig1Signal.Broadcast(Param1);
}

FTestbed2NestedStruct1InterfaceSig1Delegate& UTestbed2NestedStruct1InterfaceOLinkService::GetSig1SignalDelegate()
{
	return Sig1Signal;
}

void UTestbed2NestedStruct1InterfaceOLinkService::BroadcastProp1Changed_Implementation(const FTestbed2NestedStruct1& InProp1)
{
	Prop1 = InProp1;
	Prop1Changed.Broadcast(InProp1);
}

FTestbed2NestedStruct1 UTestbed2NestedStruct1InterfaceOLinkService::GetProp1_Implementation() const
{
	return Prop1;
}

void UTestbed2NestedStruct1InterfaceOLinkService::SetProp1_Implementation(const FTestbed2NestedStruct1& InProp1)
{
	if (!m_node)
	{
		return;
	}
	m_node->setRemoteProperty("testbed2.NestedStruct1Interface/prop1", InProp1);
}

FTestbed2NestedStruct1InterfaceProp1ChangedDelegate& UTestbed2NestedStruct1InterfaceOLinkService::GetProp1ChangedDelegate()
{
	return Prop1Changed;
}

FTestbed2NestedStruct1 UTestbed2NestedStruct1InterfaceOLinkService::Func1_Implementation(const FTestbed2NestedStruct1& Param1)
{
	if (!m_node)
	{
		UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
		return FTestbed2NestedStruct1();
	}
	TPromise<FTestbed2NestedStruct1> Promise;
	Async(EAsyncExecution::Thread,
		[Param1, &Promise, this]()
		{
			InvokeReplyFunc GetNestedStruct1InterfaceStateFunc = [&Promise](InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<FTestbed2NestedStruct1>()); };
			m_node->invokeRemote("testbed2.NestedStruct1Interface/func1", {Param1}, GetNestedStruct1InterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

void UTestbed2NestedStruct1InterfaceOLinkService::applyState(const nlohmann::json& fields)
{
	if (fields.contains("prop1"))
	{
		if (Prop1 != fields["prop1"].get<FTestbed2NestedStruct1>())
		{
			Prop1 = fields["prop1"].get<FTestbed2NestedStruct1>();
			Execute_BroadcastProp1Changed(this, Prop1);
		}
	}
}

std::string UTestbed2NestedStruct1InterfaceOLinkService::olinkObjectName()
{
	return "testbed2.NestedStruct1Interface";
}

void UTestbed2NestedStruct1InterfaceOLinkService::olinkOnSignal(std::string name, nlohmann::json args)
{
	std::string path = Name::pathFromName(name);
	if (path == "sig1")
	{
		Execute_BroadcastSig1(this, args[0].get<FTestbed2NestedStruct1>());
		return;
	}
}

void UTestbed2NestedStruct1InterfaceOLinkService::olinkOnPropertyChanged(std::string name, nlohmann::json value)
{
	std::string path = Name::pathFromName(name);
	applyState({{path, value}});
}

void UTestbed2NestedStruct1InterfaceOLinkService::olinkOnInit(std::string name, nlohmann::json props, IClientNode* node)
{
	m_isReady = true;
	m_node = node;
	applyState(props);
	// call isReady();
}

void UTestbed2NestedStruct1InterfaceOLinkService::olinkOnRelease()
{
	m_isReady = false;
	m_node = nullptr;
}
