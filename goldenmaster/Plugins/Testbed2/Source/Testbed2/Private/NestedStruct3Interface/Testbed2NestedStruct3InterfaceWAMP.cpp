
/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Testbed2NestedStruct3InterfaceWAMP.h"
#include "apig/Testbed2.json.adapter.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "unrealwamp.h"

using namespace ApiGear::WAMP;

namespace Testbed2 {
namespace NestedStruct3Interface {
namespace Private {
WAMPService::WAMPService()
: ITestbed2NestedStruct3InterfaceInterface()
, Prop1(FTestbed2NestedStruct1())
, Prop2(FTestbed2NestedStruct2())
, Prop3(FTestbed2NestedStruct3())
{
    EventFunc NestedStruct3InterfaceStateChangedFunc = [this](EventArg arg)
    {
        const json fields = arg.kwargs;
        if(fields.contains("prop1")) {
            if(Prop1 != fields["prop1"].get<FTestbed2NestedStruct1>())
            {
                Prop1 = fields["prop1"].get<FTestbed2NestedStruct1>();
                Prop1Changed.Broadcast(Prop1);
            }
        }
        if(fields.contains("prop2")) {
            if(Prop2 != fields["prop2"].get<FTestbed2NestedStruct2>())
            {
                Prop2 = fields["prop2"].get<FTestbed2NestedStruct2>();
                Prop2Changed.Broadcast(Prop2);
            }
        }
        if(fields.contains("prop3")) {
            if(Prop3 != fields["prop3"].get<FTestbed2NestedStruct3>())
            {
                Prop3 = fields["prop3"].get<FTestbed2NestedStruct3>();
                Prop3Changed.Broadcast(Prop3);
            }
        }
    };
    UnrealWamp::instance()->doSubscribe("testbed2.NestedStruct3Interface", NestedStruct3InterfaceStateChangedFunc);

    ResponseFunc GetNestedStruct3InterfaceStateFunc = [this](ResponseArg arg)
    {
        if(arg.args.size() != 1) {
          return;
        }
        const json fields = arg.args[0];
        if(fields.contains("prop1")) {
            if(Prop1 != fields["prop1"].get<FTestbed2NestedStruct1>())
            {
                Prop1 = fields["prop1"].get<FTestbed2NestedStruct1>();
                Prop1Changed.Broadcast(Prop1);
            }
        }
        if(fields.contains("prop2")) {
            if(Prop2 != fields["prop2"].get<FTestbed2NestedStruct2>())
            {
                Prop2 = fields["prop2"].get<FTestbed2NestedStruct2>();
                Prop2Changed.Broadcast(Prop2);
            }
        }
        if(fields.contains("prop3")) {
            if(Prop3 != fields["prop3"].get<FTestbed2NestedStruct3>())
            {
                Prop3 = fields["prop3"].get<FTestbed2NestedStruct3>();
                Prop3Changed.Broadcast(Prop3);
            }
        }
    };
    UnrealWamp::instance()->doCall("testbed2.NestedStruct3Interface._get", Arguments(), ArgumentsKw(), GetNestedStruct3InterfaceStateFunc);

    EventFunc sig1Func = [this](EventArg arg)
    {
        if(arg.args.size() == 1)
        {
            Sig1Signal.Broadcast(arg.args[0].get<FTestbed2NestedStruct1>());
        }
    };
    UnrealWamp::instance()->doSubscribe("testbed2.NestedStruct3Interface.sig1", sig1Func);
    
    EventFunc sig2Func = [this](EventArg arg)
    {
        if(arg.args.size() == 2)
        {
            Sig2Signal.Broadcast(arg.args[0].get<FTestbed2NestedStruct1>(),arg.args[1].get<FTestbed2NestedStruct2>());
        }
    };
    UnrealWamp::instance()->doSubscribe("testbed2.NestedStruct3Interface.sig2", sig2Func);
    
    EventFunc sig3Func = [this](EventArg arg)
    {
        if(arg.args.size() == 3)
        {
            Sig3Signal.Broadcast(arg.args[0].get<FTestbed2NestedStruct1>(),arg.args[1].get<FTestbed2NestedStruct2>(),arg.args[2].get<FTestbed2NestedStruct3>());
        }
    };
    UnrealWamp::instance()->doSubscribe("testbed2.NestedStruct3Interface.sig3", sig3Func);
    
}

WAMPService::~WAMPService()
{
    UnrealWamp::instance()->doUnSubscribe("testbed2.NestedStruct3Interface");
    UnrealWamp::instance()->doUnSubscribe("testbed2.NestedStruct3Interface.sig1");
    UnrealWamp::instance()->doUnSubscribe("testbed2.NestedStruct3Interface.sig2");
    UnrealWamp::instance()->doUnSubscribe("testbed2.NestedStruct3Interface.sig3");
}

FTestbed2NestedStruct3InterfaceSig1Delegate& WAMPService::GetSig1SignalDelegate()
{
    return Sig1Signal;
}

FTestbed2NestedStruct3InterfaceSig2Delegate& WAMPService::GetSig2SignalDelegate()
{
    return Sig2Signal;
}

FTestbed2NestedStruct3InterfaceSig3Delegate& WAMPService::GetSig3SignalDelegate()
{
    return Sig3Signal;
}

FTestbed2NestedStruct1 WAMPService::GetProp1() const
{
    return Prop1;
}

void WAMPService::SetProp1(const FTestbed2NestedStruct1& InProp1)
{
    ArgumentsKw fields_;
    fields_["prop1"] = InProp1;
    UnrealWamp::instance()->doCall("testbed2.NestedStruct3Interface._set", Arguments(), fields_);
}

FTestbed2NestedStruct3InterfaceProp1ChangedDelegate& WAMPService::GetProp1ChangedDelegate()
{
    return Prop1Changed;
}

FTestbed2NestedStruct2 WAMPService::GetProp2() const
{
    return Prop2;
}

void WAMPService::SetProp2(const FTestbed2NestedStruct2& InProp2)
{
    ArgumentsKw fields_;
    fields_["prop2"] = InProp2;
    UnrealWamp::instance()->doCall("testbed2.NestedStruct3Interface._set", Arguments(), fields_);
}

FTestbed2NestedStruct3InterfaceProp2ChangedDelegate& WAMPService::GetProp2ChangedDelegate()
{
    return Prop2Changed;
}

FTestbed2NestedStruct3 WAMPService::GetProp3() const
{
    return Prop3;
}

void WAMPService::SetProp3(const FTestbed2NestedStruct3& InProp3)
{
    ArgumentsKw fields_;
    fields_["prop3"] = InProp3;
    UnrealWamp::instance()->doCall("testbed2.NestedStruct3Interface._set", Arguments(), fields_);
}

FTestbed2NestedStruct3InterfaceProp3ChangedDelegate& WAMPService::GetProp3ChangedDelegate()
{
    return Prop3Changed;
}


FTestbed2NestedStruct1 WAMPService::Func1(const FTestbed2NestedStruct1& Param1)
{
    TPromise<FTestbed2NestedStruct1> Promise;
    Async(EAsyncExecution::Thread, [Param1,&Promise]()
    {
        ResponseFunc GetNestedStruct3InterfaceStateFunc = [&Promise](ResponseArg arg)
        {
            if(arg.args.size() != 1) {
              return;
            }
            Promise.SetValue(arg.args[0].get<FTestbed2NestedStruct1>());
        };
        UnrealWamp::instance()->doCall("testbed2.NestedStruct3Interface.func1", {Param1}, ArgumentsKw(), GetNestedStruct3InterfaceStateFunc);
    });

    return Promise.GetFuture().Get();
}

FTestbed2NestedStruct1 WAMPService::Func2(const FTestbed2NestedStruct1& Param1, const FTestbed2NestedStruct2& Param2)
{
    TPromise<FTestbed2NestedStruct1> Promise;
    Async(EAsyncExecution::Thread, [Param1,Param2,&Promise]()
    {
        ResponseFunc GetNestedStruct3InterfaceStateFunc = [&Promise](ResponseArg arg)
        {
            if(arg.args.size() != 1) {
              return;
            }
            Promise.SetValue(arg.args[0].get<FTestbed2NestedStruct1>());
        };
        UnrealWamp::instance()->doCall("testbed2.NestedStruct3Interface.func2", {Param1,Param2}, ArgumentsKw(), GetNestedStruct3InterfaceStateFunc);
    });

    return Promise.GetFuture().Get();
}

FTestbed2NestedStruct1 WAMPService::Func3(const FTestbed2NestedStruct1& Param1, const FTestbed2NestedStruct2& Param2, const FTestbed2NestedStruct3& Param3)
{
    TPromise<FTestbed2NestedStruct1> Promise;
    Async(EAsyncExecution::Thread, [Param1,Param2,Param3,&Promise]()
    {
        ResponseFunc GetNestedStruct3InterfaceStateFunc = [&Promise](ResponseArg arg)
        {
            if(arg.args.size() != 1) {
              return;
            }
            Promise.SetValue(arg.args[0].get<FTestbed2NestedStruct1>());
        };
        UnrealWamp::instance()->doCall("testbed2.NestedStruct3Interface.func3", {Param1,Param2,Param3}, ArgumentsKw(), GetNestedStruct3InterfaceStateFunc);
    });

    return Promise.GetFuture().Get();
}


} // namespace Private
} // namespace NestedStruct3Interface
} // namespace Testbed2
