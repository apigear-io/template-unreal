/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Testbed2ManyParamInterfaceSimulationClient.h"
#include "Generated/api/Testbed2.json.adapter.h"
#include "ApiGear/Public/ApiGearConnectionManager.h"
#include "unrealsimulation.h"
#include "Async/Async.h"
#include "Engine/Engine.h"

using namespace ApiGear::JSONRPC;
UTestbed2ManyParamInterfaceSimulationClient::UTestbed2ManyParamInterfaceSimulationClient()
	: ITestbed2ManyParamInterfaceInterface()
{
}

void UTestbed2ManyParamInterfaceSimulationClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	UApiGearConnectionManager* AGCM = nullptr;
	if (GEngine != nullptr)
	{
		AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
	}
	NotifyRequestFunc ManyParamInterfaceStateChangedFunc = [this](NotifyRequestArg arg)
	{
		const json fields = arg.params;
		if (fields.contains("prop1"))
		{
			if (Prop1 != fields["prop1"].get<int32>())
			{
				Prop1 = fields["prop1"].get<int32>();
				Execute_BroadcastProp1Changed(this, Prop1);
			}
		}
		if (fields.contains("prop2"))
		{
			if (Prop2 != fields["prop2"].get<int32>())
			{
				Prop2 = fields["prop2"].get<int32>();
				Execute_BroadcastProp2Changed(this, Prop2);
			}
		}
		if (fields.contains("prop3"))
		{
			if (Prop3 != fields["prop3"].get<int32>())
			{
				Prop3 = fields["prop3"].get<int32>();
				Execute_BroadcastProp3Changed(this, Prop3);
			}
		}
		if (fields.contains("prop4"))
		{
			if (Prop4 != fields["prop4"].get<int32>())
			{
				Prop4 = fields["prop4"].get<int32>();
				Execute_BroadcastProp4Changed(this, Prop4);
			}
		}
	};
	if (AGCM != nullptr)
	{
		AGCM->GetSimulationConnection()->Connect();
		AGCM->GetSimulationConnection()->onNotifyState("testbed2/ManyParamInterface", ManyParamInterfaceStateChangedFunc);
	}

	CallResponseFunc GetManyParamInterfaceStateFunc = [this](CallResponseArg arg)
	{
		if (arg.result.size() != 1)
		{
			return;
		}
		const json fields = arg.result;
		if (fields.contains("prop1"))
		{
			if (Prop1 != fields["prop1"].get<int32>())
			{
				Prop1 = fields["prop1"].get<int32>();
				Execute_BroadcastProp1Changed(this, Prop1);
			}
		}
		if (fields.contains("prop2"))
		{
			if (Prop2 != fields["prop2"].get<int32>())
			{
				Prop2 = fields["prop2"].get<int32>();
				Execute_BroadcastProp2Changed(this, Prop2);
			}
		}
		if (fields.contains("prop3"))
		{
			if (Prop3 != fields["prop3"].get<int32>())
			{
				Prop3 = fields["prop3"].get<int32>();
				Execute_BroadcastProp3Changed(this, Prop3);
			}
		}
		if (fields.contains("prop4"))
		{
			if (Prop4 != fields["prop4"].get<int32>())
			{
				Prop4 = fields["prop4"].get<int32>();
				Execute_BroadcastProp4Changed(this, Prop4);
			}
		}
	};
	if (AGCM != nullptr)
	{
		AGCM->GetSimulationConnection()->doFetchState("testbed2/ManyParamInterface", GetManyParamInterfaceStateFunc);
	}

	// register notification callback functions, signal/event -> fcn
	NotifyRequestFunc sig0Func = [this](NotifyRequestArg arg)
	{
		Execute_BroadcastSig0(this);
	};
	if (AGCM != nullptr)
	{
		AGCM->GetSimulationConnection()->onNotify("testbed2/ManyParamInterface#sig0", sig0Func);
	}

	NotifyRequestFunc sig1Func = [this](NotifyRequestArg arg)
	{
		const json fields = arg.params;
		if (fields.contains("param1"))
		{
			Execute_BroadcastSig1(this, fields["param1"].get<int32>());
		}
	};
	if (AGCM != nullptr)
	{
		AGCM->GetSimulationConnection()->onNotify("testbed2/ManyParamInterface#sig1", sig1Func);
	}

	NotifyRequestFunc sig2Func = [this](NotifyRequestArg arg)
	{
		const json fields = arg.params;
		if (fields.contains("param1") && fields.contains("param2"))
		{
			Execute_BroadcastSig2(this, fields["param1"].get<int32>(), fields["param2"].get<int32>());
		}
	};
	if (AGCM != nullptr)
	{
		AGCM->GetSimulationConnection()->onNotify("testbed2/ManyParamInterface#sig2", sig2Func);
	}

	NotifyRequestFunc sig3Func = [this](NotifyRequestArg arg)
	{
		const json fields = arg.params;
		if (fields.contains("param1") && fields.contains("param2") && fields.contains("param3"))
		{
			Execute_BroadcastSig3(this, fields["param1"].get<int32>(), fields["param2"].get<int32>(), fields["param3"].get<int32>());
		}
	};
	if (AGCM != nullptr)
	{
		AGCM->GetSimulationConnection()->onNotify("testbed2/ManyParamInterface#sig3", sig3Func);
	}

	NotifyRequestFunc sig4Func = [this](NotifyRequestArg arg)
	{
		const json fields = arg.params;
		if (fields.contains("param1") && fields.contains("param2") && fields.contains("param3") && fields.contains("param4"))
		{
			Execute_BroadcastSig4(this, fields["param1"].get<int32>(), fields["param2"].get<int32>(), fields["param3"].get<int32>(), fields["param4"].get<int32>());
		}
	};
	if (AGCM != nullptr)
	{
		AGCM->GetSimulationConnection()->onNotify("testbed2/ManyParamInterface#sig4", sig4Func);
	}
}

void UTestbed2ManyParamInterfaceSimulationClient::Deinitialize()
{
	Super::Deinitialize();

	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetSimulationConnection()->RemoveOnNotifyState("testbed2/ManyParamInterface");
		// unregister notification callback functions
		AGCM->GetSimulationConnection()->RemoveOnNotify("testbed2/ManyParamInterface#sig0");
		AGCM->GetSimulationConnection()->RemoveOnNotify("testbed2/ManyParamInterface#sig1");
		AGCM->GetSimulationConnection()->RemoveOnNotify("testbed2/ManyParamInterface#sig2");
		AGCM->GetSimulationConnection()->RemoveOnNotify("testbed2/ManyParamInterface#sig3");
		AGCM->GetSimulationConnection()->RemoveOnNotify("testbed2/ManyParamInterface#sig4");
	}
}

void UTestbed2ManyParamInterfaceSimulationClient::BroadcastSig0_Implementation()
{
	Sig0Signal.Broadcast();
}

FTestbed2ManyParamInterfaceSig0Delegate& UTestbed2ManyParamInterfaceSimulationClient::GetSig0SignalDelegate()
{
	return Sig0Signal;
}

void UTestbed2ManyParamInterfaceSimulationClient::BroadcastSig1_Implementation(int32 Param1)
{
	Sig1Signal.Broadcast(Param1);
}

FTestbed2ManyParamInterfaceSig1Delegate& UTestbed2ManyParamInterfaceSimulationClient::GetSig1SignalDelegate()
{
	return Sig1Signal;
}

void UTestbed2ManyParamInterfaceSimulationClient::BroadcastSig2_Implementation(int32 Param1, int32 Param2)
{
	Sig2Signal.Broadcast(Param1, Param2);
}

FTestbed2ManyParamInterfaceSig2Delegate& UTestbed2ManyParamInterfaceSimulationClient::GetSig2SignalDelegate()
{
	return Sig2Signal;
}

void UTestbed2ManyParamInterfaceSimulationClient::BroadcastSig3_Implementation(int32 Param1, int32 Param2, int32 Param3)
{
	Sig3Signal.Broadcast(Param1, Param2, Param3);
}

FTestbed2ManyParamInterfaceSig3Delegate& UTestbed2ManyParamInterfaceSimulationClient::GetSig3SignalDelegate()
{
	return Sig3Signal;
}

void UTestbed2ManyParamInterfaceSimulationClient::BroadcastSig4_Implementation(int32 Param1, int32 Param2, int32 Param3, int32 Param4)
{
	Sig4Signal.Broadcast(Param1, Param2, Param3, Param4);
}

FTestbed2ManyParamInterfaceSig4Delegate& UTestbed2ManyParamInterfaceSimulationClient::GetSig4SignalDelegate()
{
	return Sig4Signal;
}

void UTestbed2ManyParamInterfaceSimulationClient::BroadcastProp1Changed_Implementation(int32 InProp1)
{
	Prop1 = InProp1;
	Prop1Changed.Broadcast(InProp1);
}

int32 UTestbed2ManyParamInterfaceSimulationClient::GetProp1_Implementation() const
{
	return Prop1;
}

void UTestbed2ManyParamInterfaceSimulationClient::SetProp1_Implementation(int32 InProp1)
{
	Params params;
	params["prop1"] = InProp1;
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetSimulationConnection()->doCall("testbed2/ManyParamInterface", "_set", params);
	}
}

FTestbed2ManyParamInterfaceProp1ChangedDelegate& UTestbed2ManyParamInterfaceSimulationClient::GetProp1ChangedDelegate()
{
	return Prop1Changed;
}

void UTestbed2ManyParamInterfaceSimulationClient::BroadcastProp2Changed_Implementation(int32 InProp2)
{
	Prop2 = InProp2;
	Prop2Changed.Broadcast(InProp2);
}

int32 UTestbed2ManyParamInterfaceSimulationClient::GetProp2_Implementation() const
{
	return Prop2;
}

void UTestbed2ManyParamInterfaceSimulationClient::SetProp2_Implementation(int32 InProp2)
{
	Params params;
	params["prop2"] = InProp2;
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetSimulationConnection()->doCall("testbed2/ManyParamInterface", "_set", params);
	}
}

FTestbed2ManyParamInterfaceProp2ChangedDelegate& UTestbed2ManyParamInterfaceSimulationClient::GetProp2ChangedDelegate()
{
	return Prop2Changed;
}

void UTestbed2ManyParamInterfaceSimulationClient::BroadcastProp3Changed_Implementation(int32 InProp3)
{
	Prop3 = InProp3;
	Prop3Changed.Broadcast(InProp3);
}

int32 UTestbed2ManyParamInterfaceSimulationClient::GetProp3_Implementation() const
{
	return Prop3;
}

void UTestbed2ManyParamInterfaceSimulationClient::SetProp3_Implementation(int32 InProp3)
{
	Params params;
	params["prop3"] = InProp3;
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetSimulationConnection()->doCall("testbed2/ManyParamInterface", "_set", params);
	}
}

FTestbed2ManyParamInterfaceProp3ChangedDelegate& UTestbed2ManyParamInterfaceSimulationClient::GetProp3ChangedDelegate()
{
	return Prop3Changed;
}

void UTestbed2ManyParamInterfaceSimulationClient::BroadcastProp4Changed_Implementation(int32 InProp4)
{
	Prop4 = InProp4;
	Prop4Changed.Broadcast(InProp4);
}

int32 UTestbed2ManyParamInterfaceSimulationClient::GetProp4_Implementation() const
{
	return Prop4;
}

void UTestbed2ManyParamInterfaceSimulationClient::SetProp4_Implementation(int32 InProp4)
{
	Params params;
	params["prop4"] = InProp4;
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetSimulationConnection()->doCall("testbed2/ManyParamInterface", "_set", params);
	}
}

FTestbed2ManyParamInterfaceProp4ChangedDelegate& UTestbed2ManyParamInterfaceSimulationClient::GetProp4ChangedDelegate()
{
	return Prop4Changed;
}

void UTestbed2ManyParamInterfaceSimulationClient::Func0_Implementation()
{
	Params params;
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetSimulationConnection()->doCall("testbed2/ManyParamInterface", "func0", params);
	}
}

int32 UTestbed2ManyParamInterfaceSimulationClient::Func1_Implementation(int32 Param1)
{
	Params params;
	params["param1"] = Param1;
	TPromise<int32> Promise;
	Async(EAsyncExecution::Thread,
		[params, &Promise]()
		{
			CallResponseFunc GetManyParamInterfaceStateFunc = [&Promise](CallResponseArg arg)
			{ Promise.SetValue(arg.result.get<int32>()); };
			if (GEngine != nullptr)
			{
				UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
				AGCM->GetSimulationConnection()->doCall("testbed2/ManyParamInterface", "func1", params, GetManyParamInterfaceStateFunc);
			}
		});

	return Promise.GetFuture().Get();
}

int32 UTestbed2ManyParamInterfaceSimulationClient::Func2_Implementation(int32 Param1, int32 Param2)
{
	Params params;
	params["param1"] = Param1;
	params["param2"] = Param2;
	TPromise<int32> Promise;
	Async(EAsyncExecution::Thread,
		[params, &Promise]()
		{
			CallResponseFunc GetManyParamInterfaceStateFunc = [&Promise](CallResponseArg arg)
			{ Promise.SetValue(arg.result.get<int32>()); };
			if (GEngine != nullptr)
			{
				UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
				AGCM->GetSimulationConnection()->doCall("testbed2/ManyParamInterface", "func2", params, GetManyParamInterfaceStateFunc);
			}
		});

	return Promise.GetFuture().Get();
}

int32 UTestbed2ManyParamInterfaceSimulationClient::Func3_Implementation(int32 Param1, int32 Param2, int32 Param3)
{
	Params params;
	params["param1"] = Param1;
	params["param2"] = Param2;
	params["param3"] = Param3;
	TPromise<int32> Promise;
	Async(EAsyncExecution::Thread,
		[params, &Promise]()
		{
			CallResponseFunc GetManyParamInterfaceStateFunc = [&Promise](CallResponseArg arg)
			{ Promise.SetValue(arg.result.get<int32>()); };
			if (GEngine != nullptr)
			{
				UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
				AGCM->GetSimulationConnection()->doCall("testbed2/ManyParamInterface", "func3", params, GetManyParamInterfaceStateFunc);
			}
		});

	return Promise.GetFuture().Get();
}

int32 UTestbed2ManyParamInterfaceSimulationClient::Func4_Implementation(int32 Param1, int32 Param2, int32 Param3, int32 Param4)
{
	Params params;
	params["param1"] = Param1;
	params["param2"] = Param2;
	params["param3"] = Param3;
	params["param4"] = Param4;
	TPromise<int32> Promise;
	Async(EAsyncExecution::Thread,
		[params, &Promise]()
		{
			CallResponseFunc GetManyParamInterfaceStateFunc = [&Promise](CallResponseArg arg)
			{ Promise.SetValue(arg.result.get<int32>()); };
			if (GEngine != nullptr)
			{
				UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
				AGCM->GetSimulationConnection()->doCall("testbed2/ManyParamInterface", "func4", params, GetManyParamInterfaceStateFunc);
			}
		});

	return Promise.GetFuture().Get();
}

void UTestbed2ManyParamInterfaceSimulationClient::Func5_Implementation(int32 Param1, int32 Param2, int32 Param3, int32 Param4, int32 Param5)
{
	Params params;
	params["param1"] = Param1;
	params["param2"] = Param2;
	params["param3"] = Param3;
	params["param4"] = Param4;
	params["param5"] = Param5;
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetSimulationConnection()->doCall("testbed2/ManyParamInterface", "func5", params);
	}
}
