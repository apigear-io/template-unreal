/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/OLink/Testbed2NestedStruct3InterfaceOLinkClient.h"
#include "ApiGearSettings.h"
#include "Async/Async.h"
#include "Generated/api/Testbed2.json.adapter.h"
#include "unrealolink.h"
#include "unrealolinksink.h"
#include "Engine/Engine.h"
#include "ApiGear/Public/ApiGearConnectionManager.h"
#include "Misc/DateTime.h"
#include "Testbed2Settings.h"
THIRD_PARTY_INCLUDES_START
#include "olink/clientnode.h"
#include "olink/iobjectsink.h"
THIRD_PARTY_INCLUDES_END

/**
   \brief data structure to hold the last sent property values
*/
struct Testbed2NestedStruct3InterfacePropertiesData
{
	FTestbed2NestedStruct1 Prop1{FTestbed2NestedStruct1()};
	FTestbed2NestedStruct2 Prop2{FTestbed2NestedStruct2()};
	FTestbed2NestedStruct3 Prop3{FTestbed2NestedStruct3()};
};
DEFINE_LOG_CATEGORY(LogTestbed2NestedStruct3InterfaceOLinkClient);

UTestbed2NestedStruct3InterfaceOLinkClient::UTestbed2NestedStruct3InterfaceOLinkClient()
	: UAbstractTestbed2NestedStruct3Interface()
#if (ENGINE_MAJOR_VERSION == 4 && ENGINE_MINOR_VERSION < 27)
	, _SentData(MakeUnique<Testbed2NestedStruct3InterfacePropertiesData>())
#else
	, _SentData(MakePimpl<Testbed2NestedStruct3InterfacePropertiesData>())
#endif
{
	m_sink = std::make_shared<FUnrealOLinkSink>("testbed2.NestedStruct3Interface");
}

UTestbed2NestedStruct3InterfaceOLinkClient::UTestbed2NestedStruct3InterfaceOLinkClient(FVTableHelper& Helper)
	: Super(Helper)
{
}
UTestbed2NestedStruct3InterfaceOLinkClient::~UTestbed2NestedStruct3InterfaceOLinkClient() = default;

void UTestbed2NestedStruct3InterfaceOLinkClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	FUnrealOLinkSink::FPropertyChangedFunc PropertyChangedFunc = [this](const nlohmann::json& props)
	{
		this->applyState(props);
	};
	m_sink->setOnPropertyChangedCallback(PropertyChangedFunc);

	FUnrealOLinkSink::FSignalEmittedFunc SignalEmittedFunc = [this](const std::string& signalName, const nlohmann::json& args)
	{
		this->emitSignal(signalName, args);
	};
	m_sink->setOnSignalEmittedCallback(SignalEmittedFunc);

	check(GEngine);
	UTestbed2Settings* settings = GetMutableDefault<UTestbed2Settings>();

	UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();

	TScriptInterface<IApiGearConnection> OLinkConnection = AGCM->GetConnection(settings->ConnectionIdentifier);

	UseConnection(OLinkConnection);
	OLinkConnection->Connect();
}

void UTestbed2NestedStruct3InterfaceOLinkClient::Deinitialize()
{
	// tell the sink that we are gone and should not try to be invoked
	m_sink->resetOnPropertyChangedCallback();
	m_sink->resetOnSignalEmittedCallback();

	if (Connection.GetObject())
	{
		UUnrealOLink* UnrealOLinkConnection = Cast<UUnrealOLink>(Connection.GetObject());
		UnrealOLinkConnection->unlinkObjectSource(m_sink->olinkObjectName());
		UnrealOLinkConnection->node()->registry().removeSink(m_sink->olinkObjectName());
	}

	Super::Deinitialize();
}

void UTestbed2NestedStruct3InterfaceOLinkClient::UseConnection(TScriptInterface<IApiGearConnection> InConnection)
{
	checkf(InConnection.GetInterface() != nullptr, TEXT("Cannot use connection - interface IApiGearConnection is not fully implemented"));

	// only accept connections of type olink
	checkf(InConnection->GetConnectionProtocolIdentifier() == "olink", TEXT("Cannot use connection - must be of type olink"));

	UUnrealOLink* UnrealOLinkConnection = nullptr;
	// remove old connection
	if (Connection.GetObject())
	{
		UnrealOLinkConnection = Cast<UUnrealOLink>(Connection.GetObject());
		UnrealOLinkConnection->unlinkObjectSource(m_sink->olinkObjectName());
		UnrealOLinkConnection->node()->registry().removeSink(m_sink->olinkObjectName());
		UnrealOLinkConnection = nullptr;
	}

	// set up new connection
	UnrealOLinkConnection = Cast<UUnrealOLink>(InConnection.GetObject());
	UnrealOLinkConnection->node()->registry().addSink(m_sink);
	UnrealOLinkConnection->linkObjectSource(m_sink->olinkObjectName());

	Connection = InConnection;
}

FTestbed2NestedStruct1 UTestbed2NestedStruct3InterfaceOLinkClient::GetProp1_Implementation() const
{
	return Prop1;
}

void UTestbed2NestedStruct3InterfaceOLinkClient::SetProp1_Implementation(const FTestbed2NestedStruct1& InProp1)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed2NestedStruct3InterfaceOLinkClient, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetProp1_Implementation() == InProp1)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->Prop1 == InProp1)
	{
		return;
	}
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "prop1");
	m_sink->GetNode()->setRemoteProperty(memberId, InProp1);
	_SentData->Prop1 = InProp1;
}

FTestbed2NestedStruct2 UTestbed2NestedStruct3InterfaceOLinkClient::GetProp2_Implementation() const
{
	return Prop2;
}

void UTestbed2NestedStruct3InterfaceOLinkClient::SetProp2_Implementation(const FTestbed2NestedStruct2& InProp2)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed2NestedStruct3InterfaceOLinkClient, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetProp2_Implementation() == InProp2)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->Prop2 == InProp2)
	{
		return;
	}
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "prop2");
	m_sink->GetNode()->setRemoteProperty(memberId, InProp2);
	_SentData->Prop2 = InProp2;
}

FTestbed2NestedStruct3 UTestbed2NestedStruct3InterfaceOLinkClient::GetProp3_Implementation() const
{
	return Prop3;
}

void UTestbed2NestedStruct3InterfaceOLinkClient::SetProp3_Implementation(const FTestbed2NestedStruct3& InProp3)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed2NestedStruct3InterfaceOLinkClient, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetProp3_Implementation() == InProp3)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->Prop3 == InProp3)
	{
		return;
	}
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "prop3");
	m_sink->GetNode()->setRemoteProperty(memberId, InProp3);
	_SentData->Prop3 = InProp3;
}

FTestbed2NestedStruct1 UTestbed2NestedStruct3InterfaceOLinkClient::Func1_Implementation(const FTestbed2NestedStruct1& Param1)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed2NestedStruct3InterfaceOLinkClient, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));

		return FTestbed2NestedStruct1();
	}
	TPromise<FTestbed2NestedStruct1> Promise;
	Async(EAsyncExecution::Thread,
		[Param1, &Promise, this]()
		{
			ApiGear::ObjectLink::InvokeReplyFunc GetNestedStruct3InterfaceStateFunc = [&Promise](ApiGear::ObjectLink::InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<FTestbed2NestedStruct1>()); };
			static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "func1");
			m_sink->GetNode()->invokeRemote(memberId, {Param1}, GetNestedStruct3InterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

FTestbed2NestedStruct1 UTestbed2NestedStruct3InterfaceOLinkClient::Func2_Implementation(const FTestbed2NestedStruct1& Param1, const FTestbed2NestedStruct2& Param2)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed2NestedStruct3InterfaceOLinkClient, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));

		return FTestbed2NestedStruct1();
	}
	TPromise<FTestbed2NestedStruct1> Promise;
	Async(EAsyncExecution::Thread,
		[Param1, Param2, &Promise, this]()
		{
			ApiGear::ObjectLink::InvokeReplyFunc GetNestedStruct3InterfaceStateFunc = [&Promise](ApiGear::ObjectLink::InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<FTestbed2NestedStruct1>()); };
			static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "func2");
			m_sink->GetNode()->invokeRemote(memberId, {Param1, Param2}, GetNestedStruct3InterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

FTestbed2NestedStruct1 UTestbed2NestedStruct3InterfaceOLinkClient::Func3_Implementation(const FTestbed2NestedStruct1& Param1, const FTestbed2NestedStruct2& Param2, const FTestbed2NestedStruct3& Param3)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed2NestedStruct3InterfaceOLinkClient, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));

		return FTestbed2NestedStruct1();
	}
	TPromise<FTestbed2NestedStruct1> Promise;
	Async(EAsyncExecution::Thread,
		[Param1, Param2, Param3, &Promise, this]()
		{
			ApiGear::ObjectLink::InvokeReplyFunc GetNestedStruct3InterfaceStateFunc = [&Promise](ApiGear::ObjectLink::InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<FTestbed2NestedStruct1>()); };
			static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "func3");
			m_sink->GetNode()->invokeRemote(memberId, {Param1, Param2, Param3}, GetNestedStruct3InterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

void UTestbed2NestedStruct3InterfaceOLinkClient::applyState(const nlohmann::json& fields)
{
	const bool bProp1Changed = fields.contains("prop1") && (Prop1 != fields["prop1"].get<FTestbed2NestedStruct1>());
	if (bProp1Changed)
	{
		Prop1 = fields["prop1"].get<FTestbed2NestedStruct1>();
		Execute_BroadcastProp1Changed(this, Prop1);
	}

	const bool bProp2Changed = fields.contains("prop2") && (Prop2 != fields["prop2"].get<FTestbed2NestedStruct2>());
	if (bProp2Changed)
	{
		Prop2 = fields["prop2"].get<FTestbed2NestedStruct2>();
		Execute_BroadcastProp2Changed(this, Prop2);
	}

	const bool bProp3Changed = fields.contains("prop3") && (Prop3 != fields["prop3"].get<FTestbed2NestedStruct3>());
	if (bProp3Changed)
	{
		Prop3 = fields["prop3"].get<FTestbed2NestedStruct3>();
		Execute_BroadcastProp3Changed(this, Prop3);
	}
}

void UTestbed2NestedStruct3InterfaceOLinkClient::emitSignal(const std::string& signalName, const nlohmann::json& args)
{
	if (signalName == "sig1")
	{
		const FTestbed2NestedStruct1& Param1 = args[0].get<FTestbed2NestedStruct1>();
		Execute_BroadcastSig1(this, Param1);
		return;
	}

	if (signalName == "sig2")
	{
		const FTestbed2NestedStruct1& Param1 = args[0].get<FTestbed2NestedStruct1>();
		const FTestbed2NestedStruct2& Param2 = args[1].get<FTestbed2NestedStruct2>();
		Execute_BroadcastSig2(this, Param1, Param2);
		return;
	}

	if (signalName == "sig3")
	{
		const FTestbed2NestedStruct1& Param1 = args[0].get<FTestbed2NestedStruct1>();
		const FTestbed2NestedStruct2& Param2 = args[1].get<FTestbed2NestedStruct2>();
		const FTestbed2NestedStruct3& Param3 = args[2].get<FTestbed2NestedStruct3>();
		Execute_BroadcastSig3(this, Param1, Param2, Param3);
		return;
	}
}
