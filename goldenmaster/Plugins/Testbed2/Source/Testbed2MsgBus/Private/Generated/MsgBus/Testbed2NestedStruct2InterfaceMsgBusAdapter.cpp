/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Testbed2/Generated/MsgBus/Testbed2NestedStruct2InterfaceMsgBusAdapter.h"
#include "Testbed2/Generated/MsgBus/Testbed2NestedStruct2InterfaceMsgBusMessages.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "TimerManager.h"
#include "MessageEndpoint.h"
#include "MessageEndpointBuilder.h"
#include "Misc/DateTime.h"
UTestbed2NestedStruct2InterfaceMsgBusAdapter::UTestbed2NestedStruct2InterfaceMsgBusAdapter()
{
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::Deinitialize()
{
	_StopListening();

	Super::Deinitialize();
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::_StartListening()
{

	if (!_HeartbeatTimerHandle.IsValid() && GetWorld())
	{
		GetWorld()->GetTimerManager().SetTimer(_HeartbeatTimerHandle, this, &UTestbed2NestedStruct2InterfaceMsgBusAdapter::_CheckClientTimeouts, _HeartbeatIntervalMS / 1000.0f, true);
	}

	if (Testbed2NestedStruct2InterfaceMsgBusEndpoint.IsValid())
		return;

	// clang-format off
	Testbed2NestedStruct2InterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/Testbed2/NestedStruct2Interface/Service")
		.Handling<FTestbed2NestedStruct2InterfaceDiscoveryMessage>(this, &UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnNewClientDiscovered)
		.Handling<FTestbed2NestedStruct2InterfacePingMessage>(this, &UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnPing)
		.Handling<FTestbed2NestedStruct2InterfaceClientDisconnectMessage>(this, &UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnClientDisconnected)
		.Handling<FTestbed2NestedStruct2InterfaceSetProp1RequestMessage>(this, &UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnSetProp1Request)
		.Handling<FTestbed2NestedStruct2InterfaceSetProp2RequestMessage>(this, &UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnSetProp2Request)
		.Handling<FTestbed2NestedStruct2InterfaceFunc1RequestMessage>(this, &UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnFunc1Request)
		.Handling<FTestbed2NestedStruct2InterfaceFunc2RequestMessage>(this, &UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnFunc2Request)
		.Build();
	// clang-format on

	if (Testbed2NestedStruct2InterfaceMsgBusEndpoint.IsValid())
	{
		Testbed2NestedStruct2InterfaceMsgBusEndpoint->Subscribe<FTestbed2NestedStruct2InterfaceDiscoveryMessage>();
	}
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::_StopListening()
{
	if (_HeartbeatTimerHandle.IsValid() && GetWorld())
	{
		GetWorld()->GetTimerManager().ClearTimer(_HeartbeatTimerHandle);
	}

	auto msg = new FTestbed2NestedStruct2InterfaceServiceDisconnectMessage();

	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	if (Testbed2NestedStruct2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed2NestedStruct2InterfaceMsgBusEndpoint->Send<FTestbed2NestedStruct2InterfaceServiceDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	Testbed2NestedStruct2InterfaceMsgBusEndpoint.Reset();
	ConnectedClientsTimestamps.Empty();
	_UpdateClientsConnected();
}

bool UTestbed2NestedStruct2InterfaceMsgBusAdapter::_IsListening() const
{
	return Testbed2NestedStruct2InterfaceMsgBusEndpoint.IsValid();
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::_setBackendService(TScriptInterface<ITestbed2NestedStruct2InterfaceInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTestbed2NestedStruct2InterfaceSignals* BackendSignals = BackendService->_GetSignals();
		checkf(BackendSignals, TEXT("Cannot unsubscribe from delegates from backend service Testbed2NestedStruct2Interface"));
		if (OnProp1ChangedHandle.IsValid())
		{
			BackendSignals->OnProp1Changed.Remove(OnProp1ChangedHandle);
			OnProp1ChangedHandle.Reset();
		}
		if (OnProp2ChangedHandle.IsValid())
		{
			BackendSignals->OnProp2Changed.Remove(OnProp2ChangedHandle);
			OnProp2ChangedHandle.Reset();
		}
		if (OnSig1SignalHandle.IsValid())
		{
			BackendSignals->OnSig1Signal.Remove(OnSig1SignalHandle);
			OnSig1SignalHandle.Reset();
		}
		if (OnSig2SignalHandle.IsValid())
		{
			BackendSignals->OnSig2Signal.Remove(OnSig2SignalHandle);
			OnSig2SignalHandle.Reset();
		}
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface Testbed2NestedStruct2Interface is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTestbed2NestedStruct2InterfaceSignals* BackendSignals = BackendService->_GetSignals();
	checkf(BackendSignals, TEXT("Cannot subscribe to delegates from backend service Testbed2NestedStruct2Interface"));
	// connect property changed signals or simple events
	OnProp1ChangedHandle = BackendSignals->OnProp1Changed.AddUObject(this, &UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnProp1Changed);
	OnProp2ChangedHandle = BackendSignals->OnProp2Changed.AddUObject(this, &UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnProp2Changed);
	OnSig1SignalHandle = BackendSignals->OnSig1Signal.AddUObject(this, &UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnSig1);
	OnSig2SignalHandle = BackendSignals->OnSig2Signal.AddUObject(this, &UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnSig2);
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnNewClientDiscovered(const FTestbed2NestedStruct2InterfaceDiscoveryMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	const FMessageAddress& ClientAddress = Context->GetSender();

	auto msg = new FTestbed2NestedStruct2InterfaceInitMessage();
	msg->_ClientPingIntervalMS = _HeartbeatIntervalMS;
	msg->Prop1 = BackendService->GetProp1();
	msg->Prop2 = BackendService->GetProp2();

	if (Testbed2NestedStruct2InterfaceMsgBusEndpoint.IsValid())
	{
		Testbed2NestedStruct2InterfaceMsgBusEndpoint->Send<FTestbed2NestedStruct2InterfaceInitMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ClientAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	_OnClientConnected.Broadcast(ClientAddress.ToString());
	ConnectedClientsTimestamps.Add(ClientAddress, FPlatformTime::Seconds());
	_UpdateClientsConnected();
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnPing(const FTestbed2NestedStruct2InterfacePingMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTestbed2NestedStruct2InterfacePongMessage();
	msg->Timestamp = InMessage.Timestamp;

	ConnectedClientsTimestamps.Add(Context->GetSender(), FPlatformTime::Seconds());

	if (Testbed2NestedStruct2InterfaceMsgBusEndpoint.IsValid())
	{
		Testbed2NestedStruct2InterfaceMsgBusEndpoint->Send<FTestbed2NestedStruct2InterfacePongMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnClientDisconnected(const FTestbed2NestedStruct2InterfaceClientDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ConnectedClientsTimestamps.Contains(Context->GetSender()))
	{
		return;
	}

	ConnectedClientsTimestamps.Remove(Context->GetSender());
	_OnClientDisconnected.Broadcast(Context->GetSender().ToString());
	_UpdateClientsConnected();
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::_CheckClientTimeouts()
{
	float CurrentTime = FPlatformTime::Seconds();
	TArray<FMessageAddress> TimedOutClients;

	for (const auto& ClientPair : ConnectedClientsTimestamps)
	{
		const double Delta = (CurrentTime - ClientPair.Value) * 1000;

		if (Delta > 2 * _HeartbeatIntervalMS)
		{
			// service seems to be dead or not responding - reset connection
			TimedOutClients.Add(ClientPair.Key);
		}
	}

	for (const auto& ClientAddress : TimedOutClients)
	{
		_OnClientTimeout.Broadcast(ClientAddress.ToString());
		ConnectedClientsTimestamps.Remove(ClientAddress);
	}
	_UpdateClientsConnected();
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::_UpdateClientsConnected()
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);
	_ClientsConnected = NumberOfClients;
	_OnClientsConnectedCountChanged.Broadcast(_ClientsConnected);
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnFunc1Request(const FTestbed2NestedStruct2InterfaceFunc1RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTestbed2NestedStruct2InterfaceFunc1ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Func1(InMessage.Param1);

	if (Testbed2NestedStruct2InterfaceMsgBusEndpoint.IsValid())
	{
		Testbed2NestedStruct2InterfaceMsgBusEndpoint->Send<FTestbed2NestedStruct2InterfaceFunc1ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnFunc2Request(const FTestbed2NestedStruct2InterfaceFunc2RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	auto msg = new FTestbed2NestedStruct2InterfaceFunc2ReplyMessage();
	msg->ResponseId = InMessage.ResponseId;
	msg->Result = BackendService->Func2(InMessage.Param1, InMessage.Param2);

	if (Testbed2NestedStruct2InterfaceMsgBusEndpoint.IsValid())
	{
		Testbed2NestedStruct2InterfaceMsgBusEndpoint->Send<FTestbed2NestedStruct2InterfaceFunc2ReplyMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(Context->GetSender()),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnSig1(const FTestbed2NestedStruct1& InParam1)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed2NestedStruct2InterfaceSig1SignalMessage();
	msg->Param1 = InParam1;
	if (Testbed2NestedStruct2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed2NestedStruct2InterfaceMsgBusEndpoint->Send<FTestbed2NestedStruct2InterfaceSig1SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnSig2(const FTestbed2NestedStruct1& InParam1, const FTestbed2NestedStruct2& InParam2)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed2NestedStruct2InterfaceSig2SignalMessage();
	msg->Param1 = InParam1;
	msg->Param2 = InParam2;
	if (Testbed2NestedStruct2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed2NestedStruct2InterfaceMsgBusEndpoint->Send<FTestbed2NestedStruct2InterfaceSig2SignalMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnSetProp1Request(const FTestbed2NestedStruct2InterfaceSetProp1RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetProp1(InMessage.Prop1);
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnProp1Changed(const FTestbed2NestedStruct1& InProp1)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed2NestedStruct2InterfaceProp1ChangedMessage();
	msg->Prop1 = InProp1;

	if (Testbed2NestedStruct2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed2NestedStruct2InterfaceMsgBusEndpoint->Send<FTestbed2NestedStruct2InterfaceProp1ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnSetProp2Request(const FTestbed2NestedStruct2InterfaceSetProp2RequestMessage& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& /*Context*/)
{
	BackendService->SetProp2(InMessage.Prop2);
}

void UTestbed2NestedStruct2InterfaceMsgBusAdapter::OnProp2Changed(const FTestbed2NestedStruct2& InProp2)
{
	TArray<FMessageAddress> ConnectedClients;
	int32 NumberOfClients = ConnectedClientsTimestamps.GetKeys(ConnectedClients);

	auto msg = new FTestbed2NestedStruct2InterfaceProp2ChangedMessage();
	msg->Prop2 = InProp2;

	if (Testbed2NestedStruct2InterfaceMsgBusEndpoint.IsValid() && NumberOfClients > 0)
	{
		Testbed2NestedStruct2InterfaceMsgBusEndpoint->Send<FTestbed2NestedStruct2InterfaceProp2ChangedMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			ConnectedClients,
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}
}
