/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */




#include "Testbed2/Generated/Jni/Testbed2NestedStruct3InterfaceJniClient.h"
#include "Testbed2/Generated/Jni/Testbed2DataJavaConverter.h"
#include "Testbed2/Generated/api/Testbed2_data.h"

#include "Async/Async.h"
#include "Engine/Engine.h"

#if PLATFORM_ANDROID

#include "Engine/Engine.h"
 #include "Android/AndroidJNI.h"
 #include "Android/AndroidApplication.h"

 #if USE_ANDROID_JNI
 #include <jni.h>
 #endif
#endif

#include <atomic>
#include "HAL/CriticalSection.h"
#include "GenericPlatform/GenericPlatformMisc.h"

/**
   \brief data structure to hold the last sent property values
*/


class UTestbed2NestedStruct3InterfaceJniClientMethodHelper
{
public:
    template <typename ResultType>
    FGuid StorePromise(TPromise<ResultType>& Promise);

    template <typename ResultType>
    bool FulfillPromise(const FGuid& Id, const ResultType& Value);
private:
    TMap<FGuid, void*> ReplyPromisesMap;
    FCriticalSection ReplyPromisesMapCS;

};

namespace {

    UTestbed2NestedStruct3InterfaceJniClient* gUTestbed2NestedStruct3InterfaceJniClientHandle = nullptr;
    TFunction<void(bool)> gUTestbed2NestedStruct3InterfaceJniClientnotifyIsReady = [](bool value) { (void)value; UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("notifyIsReady used but not set ")); };
    TFunction<void(FTestbed2NestedStruct1)> gUTestbed2NestedStruct3InterfaceJniClientOnProp1ChangedEmpty = [](FTestbed2NestedStruct1 value) { (void)value; UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("onProp1Changed used but not set ")); };
    TFunction<void(FTestbed2NestedStruct1)> gUTestbed2NestedStruct3InterfaceJniClientOnProp1Changed = gUTestbed2NestedStruct3InterfaceJniClientOnProp1ChangedEmpty;
    TFunction<void(FTestbed2NestedStruct2)> gUTestbed2NestedStruct3InterfaceJniClientOnProp2ChangedEmpty = [](FTestbed2NestedStruct2 value) { (void)value; UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("onProp2Changed used but not set ")); };
    TFunction<void(FTestbed2NestedStruct2)> gUTestbed2NestedStruct3InterfaceJniClientOnProp2Changed = gUTestbed2NestedStruct3InterfaceJniClientOnProp2ChangedEmpty;
    TFunction<void(FTestbed2NestedStruct3)> gUTestbed2NestedStruct3InterfaceJniClientOnProp3ChangedEmpty = [](FTestbed2NestedStruct3 value) { (void)value; UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("onProp3Changed used but not set ")); };
    TFunction<void(FTestbed2NestedStruct3)> gUTestbed2NestedStruct3InterfaceJniClientOnProp3Changed = gUTestbed2NestedStruct3InterfaceJniClientOnProp3ChangedEmpty;

    UTestbed2NestedStruct3InterfaceJniClientMethodHelper  gUTestbed2NestedStruct3InterfaceJniClientmethodHelper;

}


DEFINE_LOG_CATEGORY(LogTestbed2NestedStruct3InterfaceClient_JNI);

UTestbed2NestedStruct3InterfaceJniClient::UTestbed2NestedStruct3InterfaceJniClient()
{
#if !(PLATFORM_ANDROID && USE_ANDROID_JNI)
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("This is class that adapts the usage with android and jni, but seems to be used on different target. Make sure  you are using it with Android"));
#endif
}

UTestbed2NestedStruct3InterfaceJniClient::UTestbed2NestedStruct3InterfaceJniClient(FVTableHelper& Helper)
    : Super(Helper)
{
}
UTestbed2NestedStruct3InterfaceJniClient::~UTestbed2NestedStruct3InterfaceJniClient() = default;

void UTestbed2NestedStruct3InterfaceJniClient::Initialize(FSubsystemCollectionBase& Collection)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Init"));
    Super::Initialize(Collection);

    gUTestbed2NestedStruct3InterfaceJniClientHandle = this;
    gUTestbed2NestedStruct3InterfaceJniClientnotifyIsReady = [this](bool value) {
         b_isReady = value;
         AsyncTask(ENamedThreads::GameThread, [this]()
             {
                 _ConnectionStatusChangedBP.Broadcast(b_isReady);
                 _ConnectionStatusChanged.Broadcast(b_isReady);
             });
        };
	gUTestbed2NestedStruct3InterfaceJniClientOnProp1Changed = [this](const FTestbed2NestedStruct1& InProp1)
    {
         Prop1 = InProp1;
         _GetPublisher()->BroadcastProp1Changed(Prop1);
    };
	gUTestbed2NestedStruct3InterfaceJniClientOnProp2Changed = [this](const FTestbed2NestedStruct2& InProp2)
    {
         Prop2 = InProp2;
         _GetPublisher()->BroadcastProp2Changed(Prop2);
    };
	gUTestbed2NestedStruct3InterfaceJniClientOnProp3Changed = [this](const FTestbed2NestedStruct3& InProp3)
    {
         Prop3 = InProp3;
         _GetPublisher()->BroadcastProp3Changed(Prop3);
    };

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    m_javaJniClientClass = FAndroidApplication::FindJavaClassGlobalRef("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient");
    jmethodID constructor = Env->GetMethodID(m_javaJniClientClass, "<init>", "()V");
    jobject localRef = Env->NewObject(m_javaJniClientClass, constructor);
    m_javaJniClientInstance = Env->NewGlobalRef(localRef);
    FAndroidApplication::GetJavaEnv()->DeleteLocalRef(localRef);
#endif
}

void UTestbed2NestedStruct3InterfaceJniClient::Deinitialize()
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("deinit"));
    _unbind();
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    Env->DeleteGlobalRef(m_javaJniClientInstance);
    m_javaJniClientClass = nullptr;
    m_javaJniClientInstance = nullptr;
#endif

    gUTestbed2NestedStruct3InterfaceJniClientnotifyIsReady = [](bool value){(void)value; UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("notifyIsReady used but not set "));};
    gUTestbed2NestedStruct3InterfaceJniClientOnProp1Changed = gUTestbed2NestedStruct3InterfaceJniClientOnProp1ChangedEmpty;
    gUTestbed2NestedStruct3InterfaceJniClientOnProp2Changed = gUTestbed2NestedStruct3InterfaceJniClientOnProp2ChangedEmpty;
    gUTestbed2NestedStruct3InterfaceJniClientOnProp3Changed = gUTestbed2NestedStruct3InterfaceJniClientOnProp3ChangedEmpty;

    gUTestbed2NestedStruct3InterfaceJniClientHandle = nullptr;
    Super::Deinitialize();
}
FTestbed2NestedStruct1 UTestbed2NestedStruct3InterfaceJniClient::GetProp1() const
{
    return Prop1;
}
void UTestbed2NestedStruct3InterfaceJniClient::SetProp1(const FTestbed2NestedStruct1& InProp1)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:setProp1"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetProp1() == InProp1 )
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Property prop1 to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:setProp1 (Ltestbed2/testbed2_api/NestedStruct1;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setProp1", "(Ltestbed2/testbed2_api/NestedStruct1;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:setProp1 (Ltestbed2/testbed2_api/NestedStruct1;)V not found"));
            return;
        }
        
        jobject jlocal_Prop1 = Testbed2DataJavaConverter::makeJavaNestedStruct1(Env, InProp1);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_Prop1);
        Env->DeleteLocalRef(jlocal_Prop1);
    }
#endif

}
FTestbed2NestedStruct2 UTestbed2NestedStruct3InterfaceJniClient::GetProp2() const
{
    return Prop2;
}
void UTestbed2NestedStruct3InterfaceJniClient::SetProp2(const FTestbed2NestedStruct2& InProp2)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:setProp2"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetProp2() == InProp2 )
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Property prop2 to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:setProp2 (Ltestbed2/testbed2_api/NestedStruct2;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setProp2", "(Ltestbed2/testbed2_api/NestedStruct2;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:setProp2 (Ltestbed2/testbed2_api/NestedStruct2;)V not found"));
            return;
        }
        
        jobject jlocal_Prop2 = Testbed2DataJavaConverter::makeJavaNestedStruct2(Env, InProp2);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_Prop2);
        Env->DeleteLocalRef(jlocal_Prop2);
    }
#endif

}
FTestbed2NestedStruct3 UTestbed2NestedStruct3InterfaceJniClient::GetProp3() const
{
    return Prop3;
}
void UTestbed2NestedStruct3InterfaceJniClient::SetProp3(const FTestbed2NestedStruct3& InProp3)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:setProp3"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetProp3() == InProp3 )
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Property prop3 to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:setProp3 (Ltestbed2/testbed2_api/NestedStruct3;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setProp3", "(Ltestbed2/testbed2_api/NestedStruct3;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:setProp3 (Ltestbed2/testbed2_api/NestedStruct3;)V not found"));
            return;
        }
        
        jobject jlocal_Prop3 = Testbed2DataJavaConverter::makeJavaNestedStruct3(Env, InProp3);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_Prop3);
        Env->DeleteLocalRef(jlocal_Prop3);
    }
#endif

}
FTestbed2NestedStruct1 UTestbed2NestedStruct3InterfaceJniClient::Func1(const FTestbed2NestedStruct1& InParam1)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:func1 "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return FTestbed2NestedStruct1();
    }
    TPromise<FTestbed2NestedStruct1> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:func1Async:(Ljava/lang/String;Ltestbed2/testbed2_api/NestedStruct1;)V CLASS not found"));
        return FTestbed2NestedStruct1();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "func1Async", "(Ljava/lang/String;Ltestbed2/testbed2_api/NestedStruct1;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTestbed2NestedStruct3InterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobject jlocal_Param1 = Testbed2DataJavaConverter::makeJavaNestedStruct1(Env, InParam1);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_Param1);
        Env->DeleteLocalRef(jlocal_Param1);
    }
    else
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:func1Async (Ljava/lang/String;Ltestbed2/testbed2_api/NestedStruct1;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
FTestbed2NestedStruct1 UTestbed2NestedStruct3InterfaceJniClient::Func2(const FTestbed2NestedStruct1& InParam1, const FTestbed2NestedStruct2& InParam2)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:func2 "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return FTestbed2NestedStruct1();
    }
    TPromise<FTestbed2NestedStruct1> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:func2Async:(Ljava/lang/String;Ltestbed2/testbed2_api/NestedStruct1;Ltestbed2/testbed2_api/NestedStruct2;)V CLASS not found"));
        return FTestbed2NestedStruct1();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "func2Async", "(Ljava/lang/String;Ltestbed2/testbed2_api/NestedStruct1;Ltestbed2/testbed2_api/NestedStruct2;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTestbed2NestedStruct3InterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobject jlocal_Param1 = Testbed2DataJavaConverter::makeJavaNestedStruct1(Env, InParam1);
        jobject jlocal_Param2 = Testbed2DataJavaConverter::makeJavaNestedStruct2(Env, InParam2);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_Param1,  jlocal_Param2);
        Env->DeleteLocalRef(jlocal_Param1);
        Env->DeleteLocalRef(jlocal_Param2);
    }
    else
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:func2Async (Ljava/lang/String;Ltestbed2/testbed2_api/NestedStruct1;Ltestbed2/testbed2_api/NestedStruct2;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
FTestbed2NestedStruct1 UTestbed2NestedStruct3InterfaceJniClient::Func3(const FTestbed2NestedStruct1& InParam1, const FTestbed2NestedStruct2& InParam2, const FTestbed2NestedStruct3& InParam3)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:func3 "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return FTestbed2NestedStruct1();
    }
    TPromise<FTestbed2NestedStruct1> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:func3Async:(Ljava/lang/String;Ltestbed2/testbed2_api/NestedStruct1;Ltestbed2/testbed2_api/NestedStruct2;Ltestbed2/testbed2_api/NestedStruct3;)V CLASS not found"));
        return FTestbed2NestedStruct1();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "func3Async", "(Ljava/lang/String;Ltestbed2/testbed2_api/NestedStruct1;Ltestbed2/testbed2_api/NestedStruct2;Ltestbed2/testbed2_api/NestedStruct3;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTestbed2NestedStruct3InterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobject jlocal_Param1 = Testbed2DataJavaConverter::makeJavaNestedStruct1(Env, InParam1);
        jobject jlocal_Param2 = Testbed2DataJavaConverter::makeJavaNestedStruct2(Env, InParam2);
        jobject jlocal_Param3 = Testbed2DataJavaConverter::makeJavaNestedStruct3(Env, InParam3);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_Param1,  jlocal_Param2,  jlocal_Param3);
        Env->DeleteLocalRef(jlocal_Param1);
        Env->DeleteLocalRef(jlocal_Param2);
        Env->DeleteLocalRef(jlocal_Param3);
    }
    else
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:func3Async (Ljava/lang/String;Ltestbed2/testbed2_api/NestedStruct1;Ltestbed2/testbed2_api/NestedStruct2;Ltestbed2/testbed2_api/NestedStruct3;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}

bool UTestbed2NestedStruct3InterfaceJniClient::_bindToService(FString servicePackage, FString connectionId)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Request JNI connection to %s"), *servicePackage);
    if (b_isReady)
    {
        if (servicePackage == m_lastBoundServicePackage && connectionId == m_lastConnectionId)
        {
            UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("Already bound"));
            return true;
        }
        else
        {
            _unbind();
        }
    }
    m_lastBoundServicePackage = servicePackage;
    m_lastConnectionId = connectionId;
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:bind:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z CLASS not found"));
        return false;
    }
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "bind", "(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z");
    if (MethodID != nullptr)
    {
        jobject Activity = FJavaWrapper::GameActivityThis;
        auto jPackage = FJavaHelper::ToJavaString(Env, servicePackage);
        auto jConnId = FJavaHelper::ToJavaString(Env, connectionId);
        auto res = FJavaWrapper::CallBooleanMethod(Env, m_javaJniClientInstance, MethodID, Activity, *jPackage, *jConnId);
        return res;
    }
    else
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:bind (Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z not found"));
    }
#endif
    return false;
}

void UTestbed2NestedStruct3InterfaceJniClient::_unbind()
{

    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Request JNI unbind"));

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:unbind:()V CLASS not found"));
        return;
    }
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "unbind", "()V");
    if (MethodID != nullptr)
    {
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID);
    }
    else
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("testbed2/testbed2jniclient/NestedStruct3InterfaceJniClient:unbind ()V not found"));
    }
#endif
}

bool UTestbed2NestedStruct3InterfaceJniClient::_IsReady() const
{
    return b_isReady;
}

#if PLATFORM_ANDROID && USE_ANDROID_JNI
JNI_METHOD void Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnProp1Changed(JNIEnv* Env, jclass Clazz,jobject prop1)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnProp1Changed"));
    if (gUTestbed2NestedStruct3InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnProp1Changed: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed2NestedStruct1 local_prop1 = FTestbed2NestedStruct1();
    Testbed2DataJavaConverter::fillNestedStruct1(Env, prop1, local_prop1);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop1= MoveTemp(local_prop1)]()
    {
        gUTestbed2NestedStruct3InterfaceJniClientOnProp1Changed(plocal_prop1);
    });
}
JNI_METHOD void Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnProp2Changed(JNIEnv* Env, jclass Clazz,jobject prop2)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnProp2Changed"));
    if (gUTestbed2NestedStruct3InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnProp2Changed: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed2NestedStruct2 local_prop2 = FTestbed2NestedStruct2();
    Testbed2DataJavaConverter::fillNestedStruct2(Env, prop2, local_prop2);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop2= MoveTemp(local_prop2)]()
    {
        gUTestbed2NestedStruct3InterfaceJniClientOnProp2Changed(plocal_prop2);
    });
}
JNI_METHOD void Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnProp3Changed(JNIEnv* Env, jclass Clazz,jobject prop3)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnProp3Changed"));
    if (gUTestbed2NestedStruct3InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnProp3Changed: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed2NestedStruct3 local_prop3 = FTestbed2NestedStruct3();
    Testbed2DataJavaConverter::fillNestedStruct3(Env, prop3, local_prop3);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop3= MoveTemp(local_prop3)]()
    {
        gUTestbed2NestedStruct3InterfaceJniClientOnProp3Changed(plocal_prop3);
    });
}

JNI_METHOD void Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnSig1(JNIEnv* Env, jclass Clazz, jobject param1)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnSig1"));
    if (gUTestbed2NestedStruct3InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnSig1: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed2NestedStruct1 local_param1 = FTestbed2NestedStruct1();
    Testbed2DataJavaConverter::fillNestedStruct1(Env, param1, local_param1);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param1= MoveTemp(local_param1)]()
        {
            if (gUTestbed2NestedStruct3InterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnSig1: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTestbed2NestedStruct3InterfaceJniClientHandle->_GetPublisher()->BroadcastSig1Signal( plocal_param1);
        });
}

JNI_METHOD void Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnSig2(JNIEnv* Env, jclass Clazz, jobject param1, jobject param2)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnSig2"));
    if (gUTestbed2NestedStruct3InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnSig2: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed2NestedStruct1 local_param1 = FTestbed2NestedStruct1();
    Testbed2DataJavaConverter::fillNestedStruct1(Env, param1, local_param1);
    FTestbed2NestedStruct2 local_param2 = FTestbed2NestedStruct2();
    Testbed2DataJavaConverter::fillNestedStruct2(Env, param2, local_param2);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param1= MoveTemp(local_param1),  plocal_param2= MoveTemp(local_param2)]()
        {
            if (gUTestbed2NestedStruct3InterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnSig2: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTestbed2NestedStruct3InterfaceJniClientHandle->_GetPublisher()->BroadcastSig2Signal( plocal_param1,  plocal_param2);
        });
}

JNI_METHOD void Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnSig3(JNIEnv* Env, jclass Clazz, jobject param1, jobject param2, jobject param3)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnSig3"));
    if (gUTestbed2NestedStruct3InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnSig3: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed2NestedStruct1 local_param1 = FTestbed2NestedStruct1();
    Testbed2DataJavaConverter::fillNestedStruct1(Env, param1, local_param1);
    FTestbed2NestedStruct2 local_param2 = FTestbed2NestedStruct2();
    Testbed2DataJavaConverter::fillNestedStruct2(Env, param2, local_param2);
    FTestbed2NestedStruct3 local_param3 = FTestbed2NestedStruct3();
    Testbed2DataJavaConverter::fillNestedStruct3(Env, param3, local_param3);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param1= MoveTemp(local_param1),  plocal_param2= MoveTemp(local_param2),  plocal_param3= MoveTemp(local_param3)]()
        {
            if (gUTestbed2NestedStruct3InterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Warning, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnSig3: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTestbed2NestedStruct3InterfaceJniClientHandle->_GetPublisher()->BroadcastSig3Signal( plocal_param1,  plocal_param2,  plocal_param3);
        });
}

JNI_METHOD void Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnFunc1Result(JNIEnv* Env, jclass Clazz, jobject result, jstring callId)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnFunc1Result"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    FTestbed2NestedStruct1 cpp_result = FTestbed2NestedStruct1();
    Testbed2DataJavaConverter::fillNestedStruct1(Env, result,cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTestbed2NestedStruct3InterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnFunc2Result(JNIEnv* Env, jclass Clazz, jobject result, jstring callId)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnFunc2Result"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    FTestbed2NestedStruct1 cpp_result = FTestbed2NestedStruct1();
    Testbed2DataJavaConverter::fillNestedStruct1(Env, result,cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTestbed2NestedStruct3InterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnFunc3Result(JNIEnv* Env, jclass Clazz, jobject result, jstring callId)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT("Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeOnFunc3Result"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    FTestbed2NestedStruct1 cpp_result = FTestbed2NestedStruct1();
    Testbed2DataJavaConverter::fillNestedStruct1(Env, result,cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTestbed2NestedStruct3InterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_testbed2_testbed2jniclient_NestedStruct3InterfaceJniClient_nativeIsReady(JNIEnv* Env, jclass Clazz, jboolean value)
{
    AsyncTask(ENamedThreads::GameThread, [value]()
        {
            gUTestbed2NestedStruct3InterfaceJniClientnotifyIsReady(value);
        });
}
#endif


template <typename ResultType>
FGuid UTestbed2NestedStruct3InterfaceJniClientMethodHelper::StorePromise(TPromise<ResultType>& Promise)
{
    FGuid Id = FGuid::NewGuid();
    FScopeLock Lock(&ReplyPromisesMapCS);
    ReplyPromisesMap.Add(Id, &Promise);
    //TODO invalid id if sth goes wrong + log + checking
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT(" method store id %s"), *(Id.ToString(EGuidFormats::Digits)));
    return Id;
}

template <typename ResultType>
bool UTestbed2NestedStruct3InterfaceJniClientMethodHelper::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
    UE_LOG(LogTestbed2NestedStruct3InterfaceClient_JNI, Verbose, TEXT(" method resolving id %s"), *(Id.ToString(EGuidFormats::Digits)));
    TPromise<ResultType>* PromisePtr = nullptr;

    {
        FScopeLock Lock(&ReplyPromisesMapCS);
        if (auto** Found = ReplyPromisesMap.Find(Id))
        {
            PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
            ReplyPromisesMap.Remove(Id);
        }
    }

    if (PromisePtr)
    {
        AsyncTask(ENamedThreads::GameThread, [Value, PromisePtr]()
            {
                PromisePtr->SetValue(Value);
            });
        return true;

    }
    return false;
}
template FGuid UTestbed2NestedStruct3InterfaceJniClientMethodHelper::StorePromise<FTestbed2NestedStruct1>(TPromise<FTestbed2NestedStruct1>& Promise);
template bool UTestbed2NestedStruct3InterfaceJniClientMethodHelper::FulfillPromise<FTestbed2NestedStruct1>(const FGuid& Id, const FTestbed2NestedStruct1& Value);

