/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Testbed2/Generated/Jni/Testbed2NestedStruct3InterfaceJniAdapter.h"
#include "Testbed2/Generated/Jni/Testbed2DataJavaConverter.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
#include "HAL/Platform.h"
#include "Testbed2/Generated/api/Testbed2_data.h"


#if PLATFORM_ANDROID

#include "Engine/Engine.h"
#include "Android/AndroidJNI.h"
#include "Android/AndroidApplication.h"

#if USE_ANDROID_JNI
#include <jni.h>
#endif
#endif

DEFINE_LOG_CATEGORY(LogTestbed2NestedStruct3Interface_JNI);


namespace 
{
	UTestbed2NestedStruct3InterfaceJniAdapter* gUTestbed2NestedStruct3InterfaceJniAdapterHandle = nullptr;
}
UTestbed2NestedStruct3InterfaceJniAdapter::UTestbed2NestedStruct3InterfaceJniAdapter()
{
}

void UTestbed2NestedStruct3InterfaceJniAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
	gUTestbed2NestedStruct3InterfaceJniAdapterHandle = this;
#if PLATFORM_ANDROID
#if USE_ANDROID_JNI
    m_javaJniServiceClass =  FAndroidApplication::FindJavaClassGlobalRef("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService");
    auto Env = FAndroidApplication::GetJavaEnv();
    jclass BridgeClass = FAndroidApplication::FindJavaClassGlobalRef("testbed2/testbed2jniservice/NestedStruct3InterfaceJniServiceStarter");
    if (BridgeClass == nullptr)
    {
		UE_LOG(LogTemp, Warning, TEXT("Testbed2JavaServiceStarter:start; CLASS not found"));
        return;
    }
	auto functionSignature = "(Landroid/content/Context;)Ltestbed2/testbed2_api/INestedStruct3Interface;";
	jmethodID StartMethod = Env->GetStaticMethodID(BridgeClass, "start", functionSignature);
    if (StartMethod == nullptr)
    {
		UE_LOG(LogTemp, Warning, TEXT( "Testbed2JavaServiceStarter:start; method not found"));
		return;
    }
    jobject Activity = FJavaWrapper::GameActivityThis;
	jobject localRef = FJavaWrapper::CallStaticObjectMethod(Env, BridgeClass, StartMethod, Activity);

    m_javaJniServiceInstance = Env->NewGlobalRef(localRef);
    Env->DeleteLocalRef(localRef);
#endif
#endif
}

void UTestbed2NestedStruct3InterfaceJniAdapter::Deinitialize()
{
	callJniServiceReady(false);
	gUTestbed2NestedStruct3InterfaceJniAdapterHandle = nullptr;
#if PLATFORM_ANDROID
#if USE_ANDROID_JNI
    m_javaJniServiceClass = nullptr;
    if (m_javaJniServiceInstance)
    {
        FAndroidApplication::GetJavaEnv()->DeleteGlobalRef(m_javaJniServiceInstance);
        m_javaJniServiceInstance = nullptr;
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();

    jclass BridgeClass = FAndroidApplication::FindJavaClassGlobalRef("testbed2/testbed2jniservice/NestedStruct3InterfaceJniServiceStarter");
    if (BridgeClass != nullptr)
    {
        jmethodID StopMethod = Env->GetStaticMethodID(BridgeClass, "stop", "(Landroid/content/Context;)V");
        if (StopMethod != nullptr)
        {
            jobject Activity = FJavaWrapper::GameActivityThis; // Unreal’s activity
            FJavaWrapper::CallStaticVoidMethod(Env, BridgeClass, StopMethod, Activity);
        }
        else
        {
            UE_LOG(LogTemp, Warning, TEXT("Testbed2JavaServiceStarter:stop; method not found, failed to stop service"));
            return;
        }
    }
    else
    {
        UE_LOG(LogTemp, Warning, TEXT( "Testbed2JavaServiceStarter:stop; CLASS not found, failed to stop service"));
    }
#endif
#endif
	Super::Deinitialize();
}

void UTestbed2NestedStruct3InterfaceJniAdapter::setBackendService(TScriptInterface<ITestbed2NestedStruct3InterfaceInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTestbed2NestedStruct3InterfacePublisher* BackendPublisher = BackendService->_GetPublisher();
		checkf(BackendPublisher, TEXT("Cannot unsubscribe from delegates from backend service Testbed2NestedStruct3Interface"));
		BackendPublisher->Unsubscribe(TWeakInterfacePtr<ITestbed2NestedStruct3InterfaceSubscriberInterface>(this));
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface Testbed2NestedStruct3Interface is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTestbed2NestedStruct3InterfacePublisher* BackendPublisher = BackendService->_GetPublisher();
	checkf(BackendPublisher, TEXT("Cannot subscribe to delegates from backend service Testbed2NestedStruct3Interface"));
	// connect property changed signals or simple events
	BackendPublisher->Subscribe(TWeakInterfacePtr<ITestbed2NestedStruct3InterfaceSubscriberInterface>(this));

	callJniServiceReady(true);
}

TScriptInterface<ITestbed2NestedStruct3InterfaceInterface> UTestbed2NestedStruct3InterfaceJniAdapter::getBackendService()
{
	return BackendService;
}

void UTestbed2NestedStruct3InterfaceJniAdapter::callJniServiceReady(bool isServiceReady)
{
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("UTestbed2NestedStruct3InterfaceJniAdapter call nativeServiceReady the service function "));
    
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (!m_javaJniServiceClass || !m_javaJniServiceInstance )
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService:nativeServiceReady(Z)V CLASS not found"));
            return;
        }

        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "nativeServiceReady", "(Z)V");

        if (MethodID != nullptr)
        {
            FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, isServiceReady);
        }
        else
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService:nativeServiceReady(Z)V not found "));
        }
    }
#endif 
}

void UTestbed2NestedStruct3InterfaceJniAdapter::OnSig1Signal(const FTestbed2NestedStruct1& Param1)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Notify java jni UTestbed2NestedStruct3InterfaceJniAdapter::onSig1 "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr || m_javaJniServiceInstance == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService:onSig1 (Ltestbed2/testbed2_api/NestedStruct1;)V CLASS not found"));
            return;
        }
        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onSig1", "(Ltestbed2/testbed2_api/NestedStruct1;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService:onSig1 (Ltestbed2/testbed2_api/NestedStruct1;)V not found"));
            return;
        }
        jobject jlocal_Param1 = Testbed2DataJavaConverter::makeJavaNestedStruct1(Env, Param1);

        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_Param1);
        Env->DeleteLocalRef(jlocal_Param1);
    }
#endif
}

void UTestbed2NestedStruct3InterfaceJniAdapter::OnSig2Signal(const FTestbed2NestedStruct1& Param1, const FTestbed2NestedStruct2& Param2)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Notify java jni UTestbed2NestedStruct3InterfaceJniAdapter::onSig2 "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr || m_javaJniServiceInstance == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService:onSig2 (Ltestbed2/testbed2_api/NestedStruct1;Ltestbed2/testbed2_api/NestedStruct2;)V CLASS not found"));
            return;
        }
        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onSig2", "(Ltestbed2/testbed2_api/NestedStruct1;Ltestbed2/testbed2_api/NestedStruct2;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService:onSig2 (Ltestbed2/testbed2_api/NestedStruct1;Ltestbed2/testbed2_api/NestedStruct2;)V not found"));
            return;
        }
        jobject jlocal_Param1 = Testbed2DataJavaConverter::makeJavaNestedStruct1(Env, Param1);
        jobject jlocal_Param2 = Testbed2DataJavaConverter::makeJavaNestedStruct2(Env, Param2);

        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_Param1,  jlocal_Param2);
        Env->DeleteLocalRef(jlocal_Param1);
        Env->DeleteLocalRef(jlocal_Param2);
    }
#endif
}

void UTestbed2NestedStruct3InterfaceJniAdapter::OnSig3Signal(const FTestbed2NestedStruct1& Param1, const FTestbed2NestedStruct2& Param2, const FTestbed2NestedStruct3& Param3)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Notify java jni UTestbed2NestedStruct3InterfaceJniAdapter::onSig3 "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr || m_javaJniServiceInstance == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService:onSig3 (Ltestbed2/testbed2_api/NestedStruct1;Ltestbed2/testbed2_api/NestedStruct2;Ltestbed2/testbed2_api/NestedStruct3;)V CLASS not found"));
            return;
        }
        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onSig3", "(Ltestbed2/testbed2_api/NestedStruct1;Ltestbed2/testbed2_api/NestedStruct2;Ltestbed2/testbed2_api/NestedStruct3;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService:onSig3 (Ltestbed2/testbed2_api/NestedStruct1;Ltestbed2/testbed2_api/NestedStruct2;Ltestbed2/testbed2_api/NestedStruct3;)V not found"));
            return;
        }
        jobject jlocal_Param1 = Testbed2DataJavaConverter::makeJavaNestedStruct1(Env, Param1);
        jobject jlocal_Param2 = Testbed2DataJavaConverter::makeJavaNestedStruct2(Env, Param2);
        jobject jlocal_Param3 = Testbed2DataJavaConverter::makeJavaNestedStruct3(Env, Param3);

        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_Param1,  jlocal_Param2,  jlocal_Param3);
        Env->DeleteLocalRef(jlocal_Param1);
        Env->DeleteLocalRef(jlocal_Param2);
        Env->DeleteLocalRef(jlocal_Param3);
    }
#endif
}
void UTestbed2NestedStruct3InterfaceJniAdapter::OnProp1Changed(const FTestbed2NestedStruct1& Prop1)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Notify java jni UTestbed2NestedStruct3InterfaceJniAdapter::OnProp1 "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService::onProp1Changed(Ltestbed2/testbed2_api/NestedStruct1;)V CLASS not found"));
            return;
        }

        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onProp1Changed","(Ltestbed2/testbed2_api/NestedStruct1;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService:onProp1Changed(Ltestbed2/testbed2_api/NestedStruct1;)V not found"));
            return;
        }
        
        jobject jlocal_Prop1 = Testbed2DataJavaConverter::makeJavaNestedStruct1(Env, Prop1);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_Prop1);
        Env->DeleteLocalRef(jlocal_Prop1);

    }
#endif
}
void UTestbed2NestedStruct3InterfaceJniAdapter::OnProp2Changed(const FTestbed2NestedStruct2& Prop2)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Notify java jni UTestbed2NestedStruct3InterfaceJniAdapter::OnProp2 "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService::onProp2Changed(Ltestbed2/testbed2_api/NestedStruct2;)V CLASS not found"));
            return;
        }

        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onProp2Changed","(Ltestbed2/testbed2_api/NestedStruct2;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService:onProp2Changed(Ltestbed2/testbed2_api/NestedStruct2;)V not found"));
            return;
        }
        
        jobject jlocal_Prop2 = Testbed2DataJavaConverter::makeJavaNestedStruct2(Env, Prop2);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_Prop2);
        Env->DeleteLocalRef(jlocal_Prop2);

    }
#endif
}
void UTestbed2NestedStruct3InterfaceJniAdapter::OnProp3Changed(const FTestbed2NestedStruct3& Prop3)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Notify java jni UTestbed2NestedStruct3InterfaceJniAdapter::OnProp3 "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService::onProp3Changed(Ltestbed2/testbed2_api/NestedStruct3;)V CLASS not found"));
            return;
        }

        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onProp3Changed","(Ltestbed2/testbed2_api/NestedStruct3;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("testbed2/testbed2jniservice/NestedStruct3InterfaceJniService:onProp3Changed(Ltestbed2/testbed2_api/NestedStruct3;)V not found"));
            return;
        }
        
        jobject jlocal_Prop3 = Testbed2DataJavaConverter::makeJavaNestedStruct3(Env, Prop3);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_Prop3);
        Env->DeleteLocalRef(jlocal_Prop3);

    }
#endif
}


#if PLATFORM_ANDROID && USE_ANDROID_JNI
JNI_METHOD jobject Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeFunc1(JNIEnv* Env, jclass Clazz, jobject param1)
{
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeFunc1"));
    if (gUTestbed2NestedStruct3InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeFunc1: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    FTestbed2NestedStruct1 local_param1 = FTestbed2NestedStruct1();
    Testbed2DataJavaConverter::fillNestedStruct1(Env, param1, local_param1);

    auto service = gUTestbed2NestedStruct3InterfaceJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto result = service->Func1( local_param1);
        jobject jresult = Testbed2DataJavaConverter::makeJavaNestedStruct1(Env, result);
        return jresult;
    }
    else
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("service not valid"));
        return nullptr;
    }
}
JNI_METHOD jobject Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeFunc2(JNIEnv* Env, jclass Clazz, jobject param1, jobject param2)
{
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeFunc2"));
    if (gUTestbed2NestedStruct3InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeFunc2: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    FTestbed2NestedStruct1 local_param1 = FTestbed2NestedStruct1();
    Testbed2DataJavaConverter::fillNestedStruct1(Env, param1, local_param1);
    FTestbed2NestedStruct2 local_param2 = FTestbed2NestedStruct2();
    Testbed2DataJavaConverter::fillNestedStruct2(Env, param2, local_param2);

    auto service = gUTestbed2NestedStruct3InterfaceJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto result = service->Func2( local_param1,  local_param2);
        jobject jresult = Testbed2DataJavaConverter::makeJavaNestedStruct1(Env, result);
        return jresult;
    }
    else
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("service not valid"));
        return nullptr;
    }
}
JNI_METHOD jobject Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeFunc3(JNIEnv* Env, jclass Clazz, jobject param1, jobject param2, jobject param3)
{
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeFunc3"));
    if (gUTestbed2NestedStruct3InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeFunc3: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    FTestbed2NestedStruct1 local_param1 = FTestbed2NestedStruct1();
    Testbed2DataJavaConverter::fillNestedStruct1(Env, param1, local_param1);
    FTestbed2NestedStruct2 local_param2 = FTestbed2NestedStruct2();
    Testbed2DataJavaConverter::fillNestedStruct2(Env, param2, local_param2);
    FTestbed2NestedStruct3 local_param3 = FTestbed2NestedStruct3();
    Testbed2DataJavaConverter::fillNestedStruct3(Env, param3, local_param3);

    auto service = gUTestbed2NestedStruct3InterfaceJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto result = service->Func3( local_param1,  local_param2,  local_param3);
        jobject jresult = Testbed2DataJavaConverter::makeJavaNestedStruct1(Env, result);
        return jresult;
    }
    else
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("service not valid"));
        return nullptr;
    }
}
JNI_METHOD void Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeSetProp1(JNIEnv* Env, jclass Clazz, jobject prop1)
{
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeSetProp1"));
    if (gUTestbed2NestedStruct3InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeSetProp1: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    
    FTestbed2NestedStruct1 local_prop1 = FTestbed2NestedStruct1();
    Testbed2DataJavaConverter::fillNestedStruct1(Env, prop1, local_prop1);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop1= MoveTemp(local_prop1)]()
    {
        auto service = gUTestbed2NestedStruct3InterfaceJniAdapterHandle->getBackendService();
        if (service != nullptr)
        {
            service->SetProp1(plocal_prop1);
        }
        else
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("service not valid, cannot set value for prop1"));
        }
    });
}

JNI_METHOD jobject Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeGetProp1(JNIEnv* Env, jclass Clazz)
{
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeGetProp1"));
    if (gUTestbed2NestedStruct3InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeGetProp1: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    auto service = gUTestbed2NestedStruct3InterfaceJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto Prop1 = service->GetProp1();
        
        jobject jlocal_Prop1 = Testbed2DataJavaConverter::makeJavaNestedStruct1(Env, Prop1);
        return jlocal_Prop1;
    }
    else
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("service not available, try setting a backend service "));
        return nullptr;
    }
}
JNI_METHOD void Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeSetProp2(JNIEnv* Env, jclass Clazz, jobject prop2)
{
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeSetProp2"));
    if (gUTestbed2NestedStruct3InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeSetProp2: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    
    FTestbed2NestedStruct2 local_prop2 = FTestbed2NestedStruct2();
    Testbed2DataJavaConverter::fillNestedStruct2(Env, prop2, local_prop2);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop2= MoveTemp(local_prop2)]()
    {
        auto service = gUTestbed2NestedStruct3InterfaceJniAdapterHandle->getBackendService();
        if (service != nullptr)
        {
            service->SetProp2(plocal_prop2);
        }
        else
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("service not valid, cannot set value for prop2"));
        }
    });
}

JNI_METHOD jobject Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeGetProp2(JNIEnv* Env, jclass Clazz)
{
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeGetProp2"));
    if (gUTestbed2NestedStruct3InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeGetProp2: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    auto service = gUTestbed2NestedStruct3InterfaceJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto Prop2 = service->GetProp2();
        
        jobject jlocal_Prop2 = Testbed2DataJavaConverter::makeJavaNestedStruct2(Env, Prop2);
        return jlocal_Prop2;
    }
    else
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("service not available, try setting a backend service "));
        return nullptr;
    }
}
JNI_METHOD void Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeSetProp3(JNIEnv* Env, jclass Clazz, jobject prop3)
{
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeSetProp3"));
    if (gUTestbed2NestedStruct3InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeSetProp3: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    
    FTestbed2NestedStruct3 local_prop3 = FTestbed2NestedStruct3();
    Testbed2DataJavaConverter::fillNestedStruct3(Env, prop3, local_prop3);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop3= MoveTemp(local_prop3)]()
    {
        auto service = gUTestbed2NestedStruct3InterfaceJniAdapterHandle->getBackendService();
        if (service != nullptr)
        {
            service->SetProp3(plocal_prop3);
        }
        else
        {
            UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("service not valid, cannot set value for prop3"));
        }
    });
}

JNI_METHOD jobject Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeGetProp3(JNIEnv* Env, jclass Clazz)
{
    UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Verbose, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeGetProp3"));
    if (gUTestbed2NestedStruct3InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("Java_testbed2_testbed2jniservice_NestedStruct3InterfaceJniService_nativeGetProp3: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    auto service = gUTestbed2NestedStruct3InterfaceJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto Prop3 = service->GetProp3();
        
        jobject jlocal_Prop3 = Testbed2DataJavaConverter::makeJavaNestedStruct3(Env, Prop3);
        return jlocal_Prop3;
    }
    else
    {
        UE_LOG(LogTestbed2NestedStruct3Interface_JNI, Warning, TEXT("service not available, try setting a backend service "));
        return nullptr;
    }
}
#endif
