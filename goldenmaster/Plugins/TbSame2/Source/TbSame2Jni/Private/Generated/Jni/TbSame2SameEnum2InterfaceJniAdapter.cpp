/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbSame2/Generated/Jni/TbSame2SameEnum2InterfaceJniAdapter.h"
#include "TbSame2/Generated/Jni/TbSame2DataJavaConverter.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
#include "HAL/Platform.h"
#include "TbSame2/Generated/api/TbSame2_data.h"


#if PLATFORM_ANDROID

#include "Engine/Engine.h"
#include "Android/AndroidJNI.h"
#include "Android/AndroidApplication.h"

#if USE_ANDROID_JNI
#include <jni.h>
#endif
#endif

DEFINE_LOG_CATEGORY(LogTbSame2SameEnum2Interface_JNI);


namespace 
{
	UTbSame2SameEnum2InterfaceJniAdapter* gUTbSame2SameEnum2InterfaceJniAdapterHandle = nullptr;
}
UTbSame2SameEnum2InterfaceJniAdapter::UTbSame2SameEnum2InterfaceJniAdapter()
{
}

void UTbSame2SameEnum2InterfaceJniAdapter::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);
	gUTbSame2SameEnum2InterfaceJniAdapterHandle = this;
#if PLATFORM_ANDROID
#if USE_ANDROID_JNI
    m_javaJniServiceClass =  FAndroidApplication::FindJavaClassGlobalRef("tbSame2/tbSame2jniservice/SameEnum2InterfaceJniService");
    auto Env = FAndroidApplication::GetJavaEnv();
    jclass BridgeClass = FAndroidApplication::FindJavaClassGlobalRef("tbSame2/tbSame2jniservice/SameEnum2InterfaceJniServiceStarter");
    if (BridgeClass == nullptr)
    {
		UE_LOG(LogTemp, Warning, TEXT("TbSame2JavaServiceStarter:start; CLASS not found"));
        return;
    }
	auto functionSignature = "(Landroid/content/Context;)LtbSame2/tbSame2_api/ISameEnum2Interface;";
	jmethodID StartMethod = Env->GetStaticMethodID(BridgeClass, "start", functionSignature);
    if (StartMethod == nullptr)
    {
		UE_LOG(LogTemp, Warning, TEXT( "TbSame2JavaServiceStarter:start; method not found"));
		return;
    }
    jobject Activity = FJavaWrapper::GameActivityThis;
	jobject localRef = FJavaWrapper::CallStaticObjectMethod(Env, BridgeClass, StartMethod, Activity);

    m_javaJniServiceInstance = Env->NewGlobalRef(localRef);
    Env->DeleteLocalRef(localRef);
#endif
#endif
}

void UTbSame2SameEnum2InterfaceJniAdapter::Deinitialize()
{
	callJniServiceReady(false);
	gUTbSame2SameEnum2InterfaceJniAdapterHandle = nullptr;
#if PLATFORM_ANDROID
#if USE_ANDROID_JNI
    m_javaJniServiceClass = nullptr;
    if (m_javaJniServiceInstance)
    {
        FAndroidApplication::GetJavaEnv()->DeleteGlobalRef(m_javaJniServiceInstance);
        m_javaJniServiceInstance = nullptr;
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();

    jclass BridgeClass = FAndroidApplication::FindJavaClassGlobalRef("tbSame2/tbSame2jniservice/SameEnum2InterfaceJniServiceStarter");
    if (BridgeClass != nullptr)
    {
        jmethodID StopMethod = Env->GetStaticMethodID(BridgeClass, "stop", "(Landroid/content/Context;)V");
        if (StopMethod != nullptr)
        {
            jobject Activity = FJavaWrapper::GameActivityThis; // Unreal’s activity
            FJavaWrapper::CallStaticVoidMethod(Env, BridgeClass, StopMethod, Activity);
        }
        else
        {
            UE_LOG(LogTemp, Warning, TEXT("TbSame2JavaServiceStarter:stop; method not found, failed to stop service"));
            return;
        }
    }
    else
    {
        UE_LOG(LogTemp, Warning, TEXT( "TbSame2JavaServiceStarter:stop; CLASS not found, failed to stop service"));
    }
#endif
#endif
	Super::Deinitialize();
}

void UTbSame2SameEnum2InterfaceJniAdapter::setBackendService(TScriptInterface<ITbSame2SameEnum2InterfaceInterface> InService)
{
	// unsubscribe from old backend
	if (BackendService != nullptr)
	{
		UTbSame2SameEnum2InterfacePublisher* BackendPublisher = BackendService->_GetPublisher();
		checkf(BackendPublisher, TEXT("Cannot unsubscribe from delegates from backend service TbSame2SameEnum2Interface"));
		BackendPublisher->Unsubscribe(TWeakInterfacePtr<ITbSame2SameEnum2InterfaceSubscriberInterface>(this));
	}

	// only set if interface is implemented
	checkf(InService.GetInterface() != nullptr, TEXT("Cannot set backend service - interface TbSame2SameEnum2Interface is not fully implemented"));

	// subscribe to new backend
	BackendService = InService;
	UTbSame2SameEnum2InterfacePublisher* BackendPublisher = BackendService->_GetPublisher();
	checkf(BackendPublisher, TEXT("Cannot subscribe to delegates from backend service TbSame2SameEnum2Interface"));
	// connect property changed signals or simple events
	BackendPublisher->Subscribe(TWeakInterfacePtr<ITbSame2SameEnum2InterfaceSubscriberInterface>(this));

	callJniServiceReady(true);
}

TScriptInterface<ITbSame2SameEnum2InterfaceInterface> UTbSame2SameEnum2InterfaceJniAdapter::getBackendService()
{
	return BackendService;
}

void UTbSame2SameEnum2InterfaceJniAdapter::callJniServiceReady(bool isServiceReady)
{
    UE_LOG(LogTbSame2SameEnum2Interface_JNI, Verbose, TEXT("UTbSame2SameEnum2InterfaceJniAdapter call nativeServiceReady the service function "));
    
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (!m_javaJniServiceClass || !m_javaJniServiceInstance )
        {
            UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("tbSame2/tbSame2jniservice/SameEnum2InterfaceJniService:nativeServiceReady(Z)V CLASS not found"));
            return;
        }

        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "nativeServiceReady", "(Z)V");

        if (MethodID != nullptr)
        {
            FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, isServiceReady);
        }
        else
        {
            UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("tbSame2/tbSame2jniservice/SameEnum2InterfaceJniService:nativeServiceReady(Z)V not found "));
        }
    }
#endif 
}

void UTbSame2SameEnum2InterfaceJniAdapter::OnSig1Signal(ETbSame2Enum1 Param1)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTbSame2SameEnum2Interface_JNI, Verbose, TEXT("Notify java jni UTbSame2SameEnum2InterfaceJniAdapter::onSig1 "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr || m_javaJniServiceInstance == nullptr)
        {
            UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("tbSame2/tbSame2jniservice/SameEnum2InterfaceJniService:onSig1 (LtbSame2/tbSame2_api/Enum1;)V CLASS not found"));
            return;
        }
        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onSig1", "(LtbSame2/tbSame2_api/Enum1;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("tbSame2/tbSame2jniservice/SameEnum2InterfaceJniService:onSig1 (LtbSame2/tbSame2_api/Enum1;)V not found"));
            return;
        }
        jobject jlocal_Param1 = TbSame2DataJavaConverter::makeJavaEnum1(Env, Param1);

        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_Param1);
        Env->DeleteLocalRef(jlocal_Param1);
    }
#endif
}

void UTbSame2SameEnum2InterfaceJniAdapter::OnSig2Signal(ETbSame2Enum1 Param1, ETbSame2Enum2 Param2)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTbSame2SameEnum2Interface_JNI, Verbose, TEXT("Notify java jni UTbSame2SameEnum2InterfaceJniAdapter::onSig2 "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr || m_javaJniServiceInstance == nullptr)
        {
            UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("tbSame2/tbSame2jniservice/SameEnum2InterfaceJniService:onSig2 (LtbSame2/tbSame2_api/Enum1;LtbSame2/tbSame2_api/Enum2;)V CLASS not found"));
            return;
        }
        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onSig2", "(LtbSame2/tbSame2_api/Enum1;LtbSame2/tbSame2_api/Enum2;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("tbSame2/tbSame2jniservice/SameEnum2InterfaceJniService:onSig2 (LtbSame2/tbSame2_api/Enum1;LtbSame2/tbSame2_api/Enum2;)V not found"));
            return;
        }
        jobject jlocal_Param1 = TbSame2DataJavaConverter::makeJavaEnum1(Env, Param1);
        jobject jlocal_Param2 = TbSame2DataJavaConverter::makeJavaEnum2(Env, Param2);

        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_Param1,  jlocal_Param2);
        Env->DeleteLocalRef(jlocal_Param1);
        Env->DeleteLocalRef(jlocal_Param2);
    }
#endif
}
void UTbSame2SameEnum2InterfaceJniAdapter::OnProp1Changed(ETbSame2Enum1 Prop1)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTbSame2SameEnum2Interface_JNI, Verbose, TEXT("Notify java jni UTbSame2SameEnum2InterfaceJniAdapter::OnProp1 "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr)
        {
            UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("tbSame2/tbSame2jniservice/SameEnum2InterfaceJniService::onProp1Changed(LtbSame2/tbSame2_api/Enum1;)V CLASS not found"));
            return;
        }

        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onProp1Changed","(LtbSame2/tbSame2_api/Enum1;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("tbSame2/tbSame2jniservice/SameEnum2InterfaceJniService:onProp1Changed(LtbSame2/tbSame2_api/Enum1;)V not found"));
            return;
        }
        
        jobject jlocal_Prop1 = TbSame2DataJavaConverter::makeJavaEnum1(Env, Prop1);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_Prop1);

    }
#endif
}
void UTbSame2SameEnum2InterfaceJniAdapter::OnProp2Changed(ETbSame2Enum2 Prop2)
{
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    UE_LOG(LogTbSame2SameEnum2Interface_JNI, Verbose, TEXT("Notify java jni UTbSame2SameEnum2InterfaceJniAdapter::OnProp2 "));
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniServiceClass == nullptr)
        {
            UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("tbSame2/tbSame2jniservice/SameEnum2InterfaceJniService::onProp2Changed(LtbSame2/tbSame2_api/Enum2;)V CLASS not found"));
            return;
        }

        static const jmethodID MethodID = Env->GetMethodID(m_javaJniServiceClass, "onProp2Changed","(LtbSame2/tbSame2_api/Enum2;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("tbSame2/tbSame2jniservice/SameEnum2InterfaceJniService:onProp2Changed(LtbSame2/tbSame2_api/Enum2;)V not found"));
            return;
        }
        
        jobject jlocal_Prop2 = TbSame2DataJavaConverter::makeJavaEnum2(Env, Prop2);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniServiceInstance, MethodID, jlocal_Prop2);

    }
#endif
}


#if PLATFORM_ANDROID && USE_ANDROID_JNI
JNI_METHOD jobject Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeFunc1(JNIEnv* Env, jclass Clazz, jobject param1)
{
    UE_LOG(LogTbSame2SameEnum2Interface_JNI, Verbose, TEXT("Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeFunc1"));
    if (gUTbSame2SameEnum2InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeFunc1: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    ETbSame2Enum1 local_param1 = TbSame2DataJavaConverter::getEnum1Value(Env, param1);

    auto service = gUTbSame2SameEnum2InterfaceJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto result = service->Func1( local_param1);
        jobject jresult = TbSame2DataJavaConverter::makeJavaEnum1(Env, result);
        return jresult;
    }
    else
    {
        UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("service not valid"));
        return nullptr;
    }
}
JNI_METHOD jobject Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeFunc2(JNIEnv* Env, jclass Clazz, jobject param1, jobject param2)
{
    UE_LOG(LogTbSame2SameEnum2Interface_JNI, Verbose, TEXT("Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeFunc2"));
    if (gUTbSame2SameEnum2InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeFunc2: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    ETbSame2Enum1 local_param1 = TbSame2DataJavaConverter::getEnum1Value(Env, param1);
    ETbSame2Enum2 local_param2 = TbSame2DataJavaConverter::getEnum2Value(Env, param2);

    auto service = gUTbSame2SameEnum2InterfaceJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto result = service->Func2( local_param1,  local_param2);
        jobject jresult = TbSame2DataJavaConverter::makeJavaEnum1(Env, result);
        return jresult;
    }
    else
    {
        UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("service not valid"));
        return nullptr;
    }
}
JNI_METHOD void Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeSetProp1(JNIEnv* Env, jclass Clazz, jobject prop1)
{
    UE_LOG(LogTbSame2SameEnum2Interface_JNI, Verbose, TEXT("Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeSetProp1"));
    if (gUTbSame2SameEnum2InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeSetProp1: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    
    ETbSame2Enum1 local_prop1 = TbSame2DataJavaConverter::getEnum1Value(Env, prop1);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop1= MoveTemp(local_prop1)]()
    {
        auto service = gUTbSame2SameEnum2InterfaceJniAdapterHandle->getBackendService();
        if (service != nullptr)
        {
            service->SetProp1(plocal_prop1);
        }
        else
        {
            UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("service not valid, cannot set value for prop1"));
        }
    });
}

JNI_METHOD jobject Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeGetProp1(JNIEnv* Env, jclass Clazz)
{
    UE_LOG(LogTbSame2SameEnum2Interface_JNI, Verbose, TEXT("Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeGetProp1"));
    if (gUTbSame2SameEnum2InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeGetProp1: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    auto service = gUTbSame2SameEnum2InterfaceJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto Prop1 = service->GetProp1();
        
        jobject jlocal_Prop1 = TbSame2DataJavaConverter::makeJavaEnum1(Env, Prop1);
        return jlocal_Prop1;
    }
    else
    {
        UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("service not available, try setting a backend service "));
        return nullptr;
    }
}
JNI_METHOD void Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeSetProp2(JNIEnv* Env, jclass Clazz, jobject prop2)
{
    UE_LOG(LogTbSame2SameEnum2Interface_JNI, Verbose, TEXT("Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeSetProp2"));
    if (gUTbSame2SameEnum2InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeSetProp2: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    
    ETbSame2Enum2 local_prop2 = TbSame2DataJavaConverter::getEnum2Value(Env, prop2);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop2= MoveTemp(local_prop2)]()
    {
        auto service = gUTbSame2SameEnum2InterfaceJniAdapterHandle->getBackendService();
        if (service != nullptr)
        {
            service->SetProp2(plocal_prop2);
        }
        else
        {
            UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("service not valid, cannot set value for prop2"));
        }
    });
}

JNI_METHOD jobject Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeGetProp2(JNIEnv* Env, jclass Clazz)
{
    UE_LOG(LogTbSame2SameEnum2Interface_JNI, Verbose, TEXT("Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeGetProp2"));
    if (gUTbSame2SameEnum2InterfaceJniAdapterHandle == nullptr)
    {
        UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("Java_tbSame2_tbSame2jniservice_SameEnum2InterfaceJniService_nativeGetProp2: JNI SERVICE ADAPTER NOT FOUND "));
        return nullptr;
    }
    auto service = gUTbSame2SameEnum2InterfaceJniAdapterHandle->getBackendService();
    if (service != nullptr)
    {
        auto Prop2 = service->GetProp2();
        
        jobject jlocal_Prop2 = TbSame2DataJavaConverter::makeJavaEnum2(Env, Prop2);
        return jlocal_Prop2;
    }
    else
    {
        UE_LOG(LogTbSame2SameEnum2Interface_JNI, Warning, TEXT("service not available, try setting a backend service "));
        return nullptr;
    }
}
#endif
