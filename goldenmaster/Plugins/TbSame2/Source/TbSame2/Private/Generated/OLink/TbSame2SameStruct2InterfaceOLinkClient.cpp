/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/OLink/TbSame2SameStruct2InterfaceOLinkClient.h"
#include "ApiGearSettings.h"
#include "Async/Async.h"
#include "Generated/api/TbSame2.json.adapter.h"
#include "unrealolink.h"
#include "unrealolinksink.h"
#include "Engine/Engine.h"
#include "ApiGear/Public/ApiGearConnectionManager.h"
#include "Misc/DateTime.h"
THIRD_PARTY_INCLUDES_START
#include "olink/clientnode.h"
#include "olink/iobjectsink.h"
THIRD_PARTY_INCLUDES_END

namespace
{
bool IsTbSame2SameStruct2InterfaceLogEnabled()
{
	UApiGearSettings* settings = GetMutableDefault<UApiGearSettings>();
	return settings->OLINK_EnableDebugLog;
}
} // namespace

/**
   \brief data structure to hold the last sent property values
*/
struct TbSame2SameStruct2InterfacePropertiesData
{
	FTbSame2Struct2 Prop1{FTbSame2Struct2()};
	FTbSame2Struct2 Prop2{FTbSame2Struct2()};
};

UTbSame2SameStruct2InterfaceOLinkClient::UTbSame2SameStruct2InterfaceOLinkClient()
	: UAbstractTbSame2SameStruct2Interface()
	, _SentData(MakePimpl<TbSame2SameStruct2InterfacePropertiesData>())
{
	m_sink = std::make_shared<FUnrealOLinkSink>("tb.same2.SameStruct2Interface");
}

void UTbSame2SameStruct2InterfaceOLinkClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetOLinkConnection()->Connect();
		AGCM->GetOLinkConnection()->node()->registry().addSink(m_sink);
		AGCM->GetOLinkConnection()->linkObjectSource(m_sink->olinkObjectName());
	}

	FUnrealOLinkSink::FPropertyChangedFunc PropertyChangedFunc = [this](const nlohmann::json& props)
	{
		this->applyState(props);
	};
	m_sink->setOnPropertyChangedCallback(PropertyChangedFunc);

	FUnrealOLinkSink::FSignalEmittedFunc SignalEmittedFunc = [this](const std::string& signalName, const nlohmann::json& args)
	{
		this->emitSignal(signalName, args);
	};
	m_sink->setOnSignalEmittedCallback(SignalEmittedFunc);
}

void UTbSame2SameStruct2InterfaceOLinkClient::Deinitialize()
{
	// tell the sink that we are gone and should not try to be invoked
	m_sink->resetOnPropertyChangedCallback();
	m_sink->resetOnSignalEmittedCallback();

	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetOLinkConnection()->unlinkObjectSource(m_sink->olinkObjectName());
		AGCM->GetOLinkConnection()->node()->registry().removeSink(m_sink->olinkObjectName());
	}

	Super::Deinitialize();
}

FTbSame2Struct2 UTbSame2SameStruct2InterfaceOLinkClient::GetProp1_Implementation() const
{
	return Prop1;
}

void UTbSame2SameStruct2InterfaceOLinkClient::SetProp1_Implementation(const FTbSame2Struct2& InProp1)
{
	if (!m_sink->IsReady())
	{
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetProp1_Implementation() == InProp1)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->Prop1 == InProp1)
	{
		return;
	}
	m_sink->GetNode()->setRemoteProperty(ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "prop1"), InProp1);
	_SentData->Prop1 = InProp1;
}

FTbSame2Struct2 UTbSame2SameStruct2InterfaceOLinkClient::GetProp2_Implementation() const
{
	return Prop2;
}

void UTbSame2SameStruct2InterfaceOLinkClient::SetProp2_Implementation(const FTbSame2Struct2& InProp2)
{
	if (!m_sink->IsReady())
	{
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetProp2_Implementation() == InProp2)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->Prop2 == InProp2)
	{
		return;
	}
	m_sink->GetNode()->setRemoteProperty(ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "prop2"), InProp2);
	_SentData->Prop2 = InProp2;
}

FTbSame2Struct1 UTbSame2SameStruct2InterfaceOLinkClient::Func1_Implementation(const FTbSame2Struct1& Param1)
{
	if (!m_sink->IsReady())
	{
		if (IsTbSame2SameStruct2InterfaceLogEnabled())
		{
			UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		}

		return FTbSame2Struct1();
	}
	TPromise<FTbSame2Struct1> Promise;
	Async(EAsyncExecution::Thread,
		[Param1, &Promise, this]()
		{
			ApiGear::ObjectLink::InvokeReplyFunc GetSameStruct2InterfaceStateFunc = [&Promise](ApiGear::ObjectLink::InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<FTbSame2Struct1>()); };
			m_sink->GetNode()->invokeRemote(ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "func1"), {Param1}, GetSameStruct2InterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

FTbSame2Struct1 UTbSame2SameStruct2InterfaceOLinkClient::Func2_Implementation(const FTbSame2Struct1& Param1, const FTbSame2Struct2& Param2)
{
	if (!m_sink->IsReady())
	{
		if (IsTbSame2SameStruct2InterfaceLogEnabled())
		{
			UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		}

		return FTbSame2Struct1();
	}
	TPromise<FTbSame2Struct1> Promise;
	Async(EAsyncExecution::Thread,
		[Param1, Param2, &Promise, this]()
		{
			ApiGear::ObjectLink::InvokeReplyFunc GetSameStruct2InterfaceStateFunc = [&Promise](ApiGear::ObjectLink::InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<FTbSame2Struct1>()); };
			m_sink->GetNode()->invokeRemote(ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "func2"), {Param1, Param2}, GetSameStruct2InterfaceStateFunc);
		});

	return Promise.GetFuture().Get();
}

void UTbSame2SameStruct2InterfaceOLinkClient::applyState(const nlohmann::json& fields)
{
	const bool bProp1Changed = fields.contains("prop1") && (Prop1 != fields["prop1"].get<FTbSame2Struct2>());
	if (bProp1Changed)
	{
		Prop1 = fields["prop1"].get<FTbSame2Struct2>();
		Execute_BroadcastProp1Changed(this, Prop1);
	}

	const bool bProp2Changed = fields.contains("prop2") && (Prop2 != fields["prop2"].get<FTbSame2Struct2>());
	if (bProp2Changed)
	{
		Prop2 = fields["prop2"].get<FTbSame2Struct2>();
		Execute_BroadcastProp2Changed(this, Prop2);
	}
}

void UTbSame2SameStruct2InterfaceOLinkClient::emitSignal(const std::string& signalName, const nlohmann::json& args)
{
	if (signalName == "sig1")
	{
		const FTbSame2Struct1& Param1 = args[0].get<FTbSame2Struct1>();
		Execute_BroadcastSig1(this, Param1);
		return;
	}

	if (signalName == "sig2")
	{
		const FTbSame2Struct1& Param1 = args[0].get<FTbSame2Struct1>();
		const FTbSame2Struct2& Param2 = args[1].get<FTbSame2Struct2>();
		Execute_BroadcastSig2(this, Param1, Param2);
		return;
	}
}
