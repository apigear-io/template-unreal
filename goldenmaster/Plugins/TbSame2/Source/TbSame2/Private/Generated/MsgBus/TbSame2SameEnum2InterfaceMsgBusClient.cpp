/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Generated/MsgBus/TbSame2SameEnum2InterfaceMsgBusClient.h"
#include "Generated/MsgBus/TbSame2SameEnum2InterfaceMsgBusMessages.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
#include "MessageEndpointBuilder.h"
#include "MessageEndpoint.h"
#include <atomic>

/**
   \brief data structure to hold the last sent property values
*/
struct TbSame2SameEnum2InterfacePropertiesMsgBusData
{
	std::atomic<ETbSame2Enum1> Prop1{ETbSame2Enum1::TS2E1_VALUE1};
	std::atomic<ETbSame2Enum2> Prop2{ETbSame2Enum2::TS2E2_VALUE1};
};
DEFINE_LOG_CATEGORY(LogTbSame2SameEnum2InterfaceMsgBusClient);

UTbSame2SameEnum2InterfaceMsgBusClient::UTbSame2SameEnum2InterfaceMsgBusClient()
	: UAbstractTbSame2SameEnum2Interface()
	, _SentData(MakePimpl<TbSame2SameEnum2InterfacePropertiesMsgBusData>())
{
	/* m_sink = std::make_shared<FOLinkSink>("tb.same2.SameEnum2Interface"); */
}

UTbSame2SameEnum2InterfaceMsgBusClient::~UTbSame2SameEnum2InterfaceMsgBusClient() = default;

void UTbSame2SameEnum2InterfaceMsgBusClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	Connect();
}

void UTbSame2SameEnum2InterfaceMsgBusClient::Deinitialize()
{
	Disconnect();

	Super::Deinitialize();
}

void UTbSame2SameEnum2InterfaceMsgBusClient::Connect()
{
	if (IsConnected())
	{
		return;
	}

	if (TbSame2SameEnum2InterfaceMsgBusEndpoint.IsValid() && !ServiceAddress.IsValid())
	{
		DiscoverService();
		return;
	}

	// clang-format off
	TbSame2SameEnum2InterfaceMsgBusEndpoint = FMessageEndpoint::Builder("ApiGear/TbSame2/SameEnum2Interface/Client")
		.Handling<FTbSame2SameEnum2InterfaceInitMessage>(this, &UTbSame2SameEnum2InterfaceMsgBusClient::OnConnectionInit)
		.Handling<FTbSame2SameEnum2InterfaceServiceDisconnectMessage>(this, &UTbSame2SameEnum2InterfaceMsgBusClient::OnServiceClosedConnection)
		.Handling<FTbSame2SameEnum2InterfaceSig1SignalMessage>(this, &UTbSame2SameEnum2InterfaceMsgBusClient::OnSig1)

		.Handling<FTbSame2SameEnum2InterfaceSig2SignalMessage>(this, &UTbSame2SameEnum2InterfaceMsgBusClient::OnSig2)
		.Handling<FTbSame2SameEnum2InterfaceProp1ChangedMessage>(this, &UTbSame2SameEnum2InterfaceMsgBusClient::OnProp1Changed)

		.Handling<FTbSame2SameEnum2InterfaceProp2ChangedMessage>(this, &UTbSame2SameEnum2InterfaceMsgBusClient::OnProp2Changed)
		.Handling<FTbSame2SameEnum2InterfaceFunc1ReplyMessage>(this, &UTbSame2SameEnum2InterfaceMsgBusClient::OnFunc1Reply)
		.Handling<FTbSame2SameEnum2InterfaceFunc2ReplyMessage>(this, &UTbSame2SameEnum2InterfaceMsgBusClient::OnFunc2Reply)
		.Build();
	// clang-format on

	DiscoverService();
}

void UTbSame2SameEnum2InterfaceMsgBusClient::Disconnect()
{
	if (!IsConnected())
	{
		return;
	}

	auto msg = new FTbSame2SameEnum2InterfaceClientDisconnectMessage();

	if (TbSame2SameEnum2InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame2SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame2SameEnum2InterfaceClientDisconnectMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
	}

	TbSame2SameEnum2InterfaceMsgBusEndpoint.Reset();
	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

void UTbSame2SameEnum2InterfaceMsgBusClient::DiscoverService()
{
	if (TbSame2SameEnum2InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame2SameEnum2InterfaceMsgBusEndpoint->Publish<FTbSame2SameEnum2InterfaceDiscoveryMessage>(new FTbSame2SameEnum2InterfaceDiscoveryMessage());
	}
}

bool UTbSame2SameEnum2InterfaceMsgBusClient::IsConnected() const
{
	return TbSame2SameEnum2InterfaceMsgBusEndpoint.IsValid() && ServiceAddress.IsValid();
}

void UTbSame2SameEnum2InterfaceMsgBusClient::OnConnectionInit(const FTbSame2SameEnum2InterfaceInitMessage& InInitMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (!ServiceAddress.IsValid())
	{
		ServiceAddress = Context->GetSender();
		const bool bProp1Changed = InInitMessage.Prop1 != Prop1;
		if (bProp1Changed)
		{
			Prop1 = InInitMessage.Prop1;
			Execute__GetSignals(this)->OnProp1Changed.Broadcast(Prop1);
		}

		const bool bProp2Changed = InInitMessage.Prop2 != Prop2;
		if (bProp2Changed)
		{
			Prop2 = InInitMessage.Prop2;
			Execute__GetSignals(this)->OnProp2Changed.Broadcast(Prop2);
		}

		_ConnectionStatusChanged.Broadcast(true);
	}
	else
	{
		UE_LOG(LogTbSame2SameEnum2InterfaceMsgBusClient, Error, TEXT("Got a second init message - should not happen"));
	}
}

void UTbSame2SameEnum2InterfaceMsgBusClient::OnServiceClosedConnection(const FTbSame2SameEnum2InterfaceServiceDisconnectMessage& /*InMessage*/, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		return;
	}

	ServiceAddress.Invalidate();
	_ConnectionStatusChanged.Broadcast(false);
}

ETbSame2Enum1 UTbSame2SameEnum2InterfaceMsgBusClient::GetProp1_Implementation() const
{
	return Prop1;
}

void UTbSame2SameEnum2InterfaceMsgBusClient::SetProp1_Implementation(ETbSame2Enum1 InProp1)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSame2SameEnum2InterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetProp1_Implementation() == InProp1)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->Prop1 == InProp1)
	{
		return;
	}

	auto msg = new FTbSame2SameEnum2InterfaceSetProp1RequestMessage();
	msg->Prop1 = InProp1;

	if (TbSame2SameEnum2InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame2SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame2SameEnum2InterfaceSetProp1RequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		_SentData->Prop1 = InProp1;
	}
}

ETbSame2Enum2 UTbSame2SameEnum2InterfaceMsgBusClient::GetProp2_Implementation() const
{
	return Prop2;
}

void UTbSame2SameEnum2InterfaceMsgBusClient::SetProp2_Implementation(ETbSame2Enum2 InProp2)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSame2SameEnum2InterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetProp2_Implementation() == InProp2)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	if (_SentData->Prop2 == InProp2)
	{
		return;
	}

	auto msg = new FTbSame2SameEnum2InterfaceSetProp2RequestMessage();
	msg->Prop2 = InProp2;

	if (TbSame2SameEnum2InterfaceMsgBusEndpoint.IsValid())
	{
		TbSame2SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame2SameEnum2InterfaceSetProp2RequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());
		_SentData->Prop2 = InProp2;
	}
}

ETbSame2Enum1 UTbSame2SameEnum2InterfaceMsgBusClient::Func1_Implementation(ETbSame2Enum1 InParam1)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSame2SameEnum2InterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return ETbSame2Enum1::TS2E1_VALUE1;
	}

	auto msg = new FTbSame2SameEnum2InterfaceFunc1RequestMessage();
	msg->RepsonseId = FGuid::NewGuid();
	msg->Param1 = InParam1;

	if (TbSame2SameEnum2InterfaceMsgBusEndpoint.IsValid())
	{
		TPromise<ETbSame2Enum1> Promise;
		StorePromise(msg->RepsonseId, Promise);

		TbSame2SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame2SameEnum2InterfaceFunc1RequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return Promise.GetFuture().Get();
	}

	return ETbSame2Enum1::TS2E1_VALUE1;
}

void UTbSame2SameEnum2InterfaceMsgBusClient::OnFunc1Reply(const FTbSame2SameEnum2InterfaceFunc1ReplyMessage& InFunc1ReplyMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InFunc1ReplyMessage.RepsonseId, InFunc1ReplyMessage.Result);
}

ETbSame2Enum1 UTbSame2SameEnum2InterfaceMsgBusClient::Func2_Implementation(ETbSame2Enum1 InParam1, ETbSame2Enum2 InParam2)
{
	if (!IsConnected())
	{
		UE_LOG(LogTbSame2SameEnum2InterfaceMsgBusClient, Error, TEXT("Client has no connection to service."));

		return ETbSame2Enum1::TS2E1_VALUE1;
	}

	auto msg = new FTbSame2SameEnum2InterfaceFunc2RequestMessage();
	msg->RepsonseId = FGuid::NewGuid();
	msg->Param1 = InParam1;
	msg->Param2 = InParam2;

	if (TbSame2SameEnum2InterfaceMsgBusEndpoint.IsValid())
	{
		TPromise<ETbSame2Enum1> Promise;
		StorePromise(msg->RepsonseId, Promise);

		TbSame2SameEnum2InterfaceMsgBusEndpoint->Send<FTbSame2SameEnum2InterfaceFunc2RequestMessage>(msg, EMessageFlags::Reliable,
			nullptr,
			TArrayBuilder<FMessageAddress>().Add(ServiceAddress),
			FTimespan::Zero(),
			FDateTime::MaxValue());

		return Promise.GetFuture().Get();
	}

	return ETbSame2Enum1::TS2E1_VALUE1;
}

void UTbSame2SameEnum2InterfaceMsgBusClient::OnFunc2Reply(const FTbSame2SameEnum2InterfaceFunc2ReplyMessage& InFunc2ReplyMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	FulfillPromise(InFunc2ReplyMessage.RepsonseId, InFunc2ReplyMessage.Result);
}

void UTbSame2SameEnum2InterfaceMsgBusClient::OnSig1(const FTbSame2SameEnum2InterfaceSig1SignalMessage& InSig1Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSame2SameEnum2InterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSig1Signal.Broadcast(InSig1Message.Param1);
	return;
}

void UTbSame2SameEnum2InterfaceMsgBusClient::OnSig2(const FTbSame2SameEnum2InterfaceSig2SignalMessage& InSig2Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSame2SameEnum2InterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	Execute__GetSignals(this)->OnSig2Signal.Broadcast(InSig2Message.Param1, InSig2Message.Param2);
	return;
}

void UTbSame2SameEnum2InterfaceMsgBusClient::OnProp1Changed(const FTbSame2SameEnum2InterfaceProp1ChangedMessage& InProp1Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSame2SameEnum2InterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bProp1Changed = InProp1Message.Prop1 != Prop1;
	if (bProp1Changed)
	{
		Prop1 = InProp1Message.Prop1;
		Execute__GetSignals(this)->OnProp1Changed.Broadcast(Prop1);
	}
}

void UTbSame2SameEnum2InterfaceMsgBusClient::OnProp2Changed(const FTbSame2SameEnum2InterfaceProp2ChangedMessage& InProp2Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)
{
	if (ServiceAddress != Context->GetSender())
	{
		UE_LOG(LogTbSame2SameEnum2InterfaceMsgBusClient, Error, TEXT("Got a message from wrong service(%s) instead of %s"), *Context->GetSender().ToString(), *ServiceAddress.ToString());
		return;
	}

	const bool bProp2Changed = InProp2Message.Prop2 != Prop2;
	if (bProp2Changed)
	{
		Prop2 = InProp2Message.Prop2;
		Execute__GetSignals(this)->OnProp2Changed.Broadcast(Prop2);
	}
}

template <typename ResultType>
bool UTbSame2SameEnum2InterfaceMsgBusClient::StorePromise(const FGuid& Id, TPromise<ResultType>& Promise)
{
	FScopeLock Lock(&ReplyPromisesMapCS);
	return ReplyPromisesMap.Add(Id, &Promise) != nullptr;
}

template <typename ResultType>
bool UTbSame2SameEnum2InterfaceMsgBusClient::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
	TPromise<ResultType>* PromisePtr = nullptr;

	{
		FScopeLock Lock(&ReplyPromisesMapCS);
		if (auto** Found = ReplyPromisesMap.Find(Id))
		{
			PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
			ReplyPromisesMap.Remove(Id);
		}
	}

	if (PromisePtr)
	{
		PromisePtr->SetValue(Value);
		return true;
	}
	return false;
}

template bool UTbSame2SameEnum2InterfaceMsgBusClient::StorePromise<ETbSame2Enum1>(const FGuid& Id, TPromise<ETbSame2Enum1>& Promise);
template bool UTbSame2SameEnum2InterfaceMsgBusClient::FulfillPromise<ETbSame2Enum1>(const FGuid& Id, const ETbSame2Enum1& Value);
