/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */




#include "TbEnum/Generated/Jni/TbEnumEnumInterfaceJniClient.h"
#include "TbEnum/Generated/Jni/TbEnumDataJavaConverter.h"
#include "TbEnum/Generated/api/TbEnum_data.h"

#include "Async/Async.h"
#include "Engine/Engine.h"

#if PLATFORM_ANDROID

#include "Engine/Engine.h"
 #include "Android/AndroidJNI.h"
 #include "Android/AndroidApplication.h"

 #if USE_ANDROID_JNI
 #include <jni.h>
 #endif
#endif

#include <atomic>
#include "HAL/CriticalSection.h"
#include "GenericPlatform/GenericPlatformMisc.h"

/**
   \brief data structure to hold the last sent property values
*/


class UTbEnumEnumInterfaceJniClientMethodHelper
{
public:
    template <typename ResultType>
    FGuid StorePromise(TPromise<ResultType>& Promise);

    template <typename ResultType>
    bool FulfillPromise(const FGuid& Id, const ResultType& Value);
private:
    TMap<FGuid, void*> ReplyPromisesMap;
    FCriticalSection ReplyPromisesMapCS;

};

namespace {

    UTbEnumEnumInterfaceJniClient* gUTbEnumEnumInterfaceJniClientHandle = nullptr;
    TFunction<void(bool)> gUTbEnumEnumInterfaceJniClientnotifyIsReady = [](bool value) { (void)value; UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("notifyIsReady used but not set ")); };
    TFunction<void(ETbEnumEnum0)> gUTbEnumEnumInterfaceJniClientOnProp0ChangedEmpty = [](ETbEnumEnum0 value) { (void)value; UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("onProp0Changed used but not set ")); };
    TFunction<void(ETbEnumEnum0)> gUTbEnumEnumInterfaceJniClientOnProp0Changed = gUTbEnumEnumInterfaceJniClientOnProp0ChangedEmpty;
    TFunction<void(ETbEnumEnum1)> gUTbEnumEnumInterfaceJniClientOnProp1ChangedEmpty = [](ETbEnumEnum1 value) { (void)value; UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("onProp1Changed used but not set ")); };
    TFunction<void(ETbEnumEnum1)> gUTbEnumEnumInterfaceJniClientOnProp1Changed = gUTbEnumEnumInterfaceJniClientOnProp1ChangedEmpty;
    TFunction<void(ETbEnumEnum2)> gUTbEnumEnumInterfaceJniClientOnProp2ChangedEmpty = [](ETbEnumEnum2 value) { (void)value; UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("onProp2Changed used but not set ")); };
    TFunction<void(ETbEnumEnum2)> gUTbEnumEnumInterfaceJniClientOnProp2Changed = gUTbEnumEnumInterfaceJniClientOnProp2ChangedEmpty;
    TFunction<void(ETbEnumEnum3)> gUTbEnumEnumInterfaceJniClientOnProp3ChangedEmpty = [](ETbEnumEnum3 value) { (void)value; UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("onProp3Changed used but not set ")); };
    TFunction<void(ETbEnumEnum3)> gUTbEnumEnumInterfaceJniClientOnProp3Changed = gUTbEnumEnumInterfaceJniClientOnProp3ChangedEmpty;

    UTbEnumEnumInterfaceJniClientMethodHelper  gUTbEnumEnumInterfaceJniClientmethodHelper;

}


DEFINE_LOG_CATEGORY(LogTbEnumEnumInterfaceClient_JNI);

UTbEnumEnumInterfaceJniClient::UTbEnumEnumInterfaceJniClient()
{
#if !(PLATFORM_ANDROID && USE_ANDROID_JNI)
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("This is class that adapts the usage with android and jni, but seems to be used on different target. Make sure  you are using it with Android"));
#endif
}

UTbEnumEnumInterfaceJniClient::UTbEnumEnumInterfaceJniClient(FVTableHelper& Helper)
    : Super(Helper)
{
}
UTbEnumEnumInterfaceJniClient::~UTbEnumEnumInterfaceJniClient() = default;

void UTbEnumEnumInterfaceJniClient::Initialize(FSubsystemCollectionBase& Collection)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Init"));
    Super::Initialize(Collection);

    gUTbEnumEnumInterfaceJniClientHandle = this;
    gUTbEnumEnumInterfaceJniClientnotifyIsReady = [this](bool value) {
         b_isReady = value;
         AsyncTask(ENamedThreads::GameThread, [this]()
             {
                 _ConnectionStatusChangedBP.Broadcast(b_isReady);
                 _ConnectionStatusChanged.Broadcast(b_isReady);
             });
        };
	gUTbEnumEnumInterfaceJniClientOnProp0Changed = [this](ETbEnumEnum0 InProp0)
    {
         Prop0 = InProp0;
         _GetPublisher()->BroadcastProp0Changed(Prop0);
    };
	gUTbEnumEnumInterfaceJniClientOnProp1Changed = [this](ETbEnumEnum1 InProp1)
    {
         Prop1 = InProp1;
         _GetPublisher()->BroadcastProp1Changed(Prop1);
    };
	gUTbEnumEnumInterfaceJniClientOnProp2Changed = [this](ETbEnumEnum2 InProp2)
    {
         Prop2 = InProp2;
         _GetPublisher()->BroadcastProp2Changed(Prop2);
    };
	gUTbEnumEnumInterfaceJniClientOnProp3Changed = [this](ETbEnumEnum3 InProp3)
    {
         Prop3 = InProp3;
         _GetPublisher()->BroadcastProp3Changed(Prop3);
    };

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    m_javaJniClientClass = FAndroidApplication::FindJavaClassGlobalRef("tbEnum/tbEnumjniclient/EnumInterfaceJniClient");
    jmethodID constructor = Env->GetMethodID(m_javaJniClientClass, "<init>", "()V");
    jobject localRef = Env->NewObject(m_javaJniClientClass, constructor);
    m_javaJniClientInstance = Env->NewGlobalRef(localRef);
    FAndroidApplication::GetJavaEnv()->DeleteLocalRef(localRef);
#endif
}

void UTbEnumEnumInterfaceJniClient::Deinitialize()
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("deinit"));
    _unbind();
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    Env->DeleteGlobalRef(m_javaJniClientInstance);
    m_javaJniClientClass = nullptr;
    m_javaJniClientInstance = nullptr;
#endif

    gUTbEnumEnumInterfaceJniClientnotifyIsReady = [](bool value){(void)value; UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("notifyIsReady used but not set "));};
    gUTbEnumEnumInterfaceJniClientOnProp0Changed = gUTbEnumEnumInterfaceJniClientOnProp0ChangedEmpty;
    gUTbEnumEnumInterfaceJniClientOnProp1Changed = gUTbEnumEnumInterfaceJniClientOnProp1ChangedEmpty;
    gUTbEnumEnumInterfaceJniClientOnProp2Changed = gUTbEnumEnumInterfaceJniClientOnProp2ChangedEmpty;
    gUTbEnumEnumInterfaceJniClientOnProp3Changed = gUTbEnumEnumInterfaceJniClientOnProp3ChangedEmpty;

    gUTbEnumEnumInterfaceJniClientHandle = nullptr;
    Super::Deinitialize();
}
ETbEnumEnum0 UTbEnumEnumInterfaceJniClient::GetProp0() const
{
    return Prop0;
}
void UTbEnumEnumInterfaceJniClient::SetProp0(ETbEnumEnum0 InProp0)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:setProp0"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetProp0() == InProp0 )
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Property prop0 to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:setProp0 (LtbEnum/tbEnum_api/Enum0;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setProp0", "(LtbEnum/tbEnum_api/Enum0;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:setProp0 (LtbEnum/tbEnum_api/Enum0;)V not found"));
            return;
        }
        
        jobject jlocal_Prop0 = TbEnumDataJavaConverter::makeJavaEnum0(Env, InProp0);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_Prop0);
        Env->DeleteLocalRef(jlocal_Prop0);
    }
#endif

}
ETbEnumEnum1 UTbEnumEnumInterfaceJniClient::GetProp1() const
{
    return Prop1;
}
void UTbEnumEnumInterfaceJniClient::SetProp1(ETbEnumEnum1 InProp1)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:setProp1"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetProp1() == InProp1 )
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Property prop1 to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:setProp1 (LtbEnum/tbEnum_api/Enum1;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setProp1", "(LtbEnum/tbEnum_api/Enum1;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:setProp1 (LtbEnum/tbEnum_api/Enum1;)V not found"));
            return;
        }
        
        jobject jlocal_Prop1 = TbEnumDataJavaConverter::makeJavaEnum1(Env, InProp1);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_Prop1);
        Env->DeleteLocalRef(jlocal_Prop1);
    }
#endif

}
ETbEnumEnum2 UTbEnumEnumInterfaceJniClient::GetProp2() const
{
    return Prop2;
}
void UTbEnumEnumInterfaceJniClient::SetProp2(ETbEnumEnum2 InProp2)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:setProp2"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetProp2() == InProp2 )
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Property prop2 to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:setProp2 (LtbEnum/tbEnum_api/Enum2;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setProp2", "(LtbEnum/tbEnum_api/Enum2;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:setProp2 (LtbEnum/tbEnum_api/Enum2;)V not found"));
            return;
        }
        
        jobject jlocal_Prop2 = TbEnumDataJavaConverter::makeJavaEnum2(Env, InProp2);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_Prop2);
        Env->DeleteLocalRef(jlocal_Prop2);
    }
#endif

}
ETbEnumEnum3 UTbEnumEnumInterfaceJniClient::GetProp3() const
{
    return Prop3;
}
void UTbEnumEnumInterfaceJniClient::SetProp3(ETbEnumEnum3 InProp3)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:setProp3"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetProp3() == InProp3 )
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Property prop3 to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:setProp3 (LtbEnum/tbEnum_api/Enum3;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setProp3", "(LtbEnum/tbEnum_api/Enum3;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:setProp3 (LtbEnum/tbEnum_api/Enum3;)V not found"));
            return;
        }
        
        jobject jlocal_Prop3 = TbEnumDataJavaConverter::makeJavaEnum3(Env, InProp3);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_Prop3);
        Env->DeleteLocalRef(jlocal_Prop3);
    }
#endif

}
ETbEnumEnum0 UTbEnumEnumInterfaceJniClient::Func0(ETbEnumEnum0 InParam0)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:func0 "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return ETbEnumEnum0::TEE0_Value0;
    }
    TPromise<ETbEnumEnum0> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:func0Async:(Ljava/lang/String;LtbEnum/tbEnum_api/Enum0;)V CLASS not found"));
        return ETbEnumEnum0::TEE0_Value0;
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "func0Async", "(Ljava/lang/String;LtbEnum/tbEnum_api/Enum0;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbEnumEnumInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobject jlocal_Param0 = TbEnumDataJavaConverter::makeJavaEnum0(Env, InParam0);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_Param0);
        Env->DeleteLocalRef(jlocal_Param0);
    }
    else
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:func0Async (Ljava/lang/String;LtbEnum/tbEnum_api/Enum0;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
ETbEnumEnum1 UTbEnumEnumInterfaceJniClient::Func1(ETbEnumEnum1 InParam1)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:func1 "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return ETbEnumEnum1::TEE1_Value1;
    }
    TPromise<ETbEnumEnum1> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:func1Async:(Ljava/lang/String;LtbEnum/tbEnum_api/Enum1;)V CLASS not found"));
        return ETbEnumEnum1::TEE1_Value1;
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "func1Async", "(Ljava/lang/String;LtbEnum/tbEnum_api/Enum1;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbEnumEnumInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobject jlocal_Param1 = TbEnumDataJavaConverter::makeJavaEnum1(Env, InParam1);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_Param1);
        Env->DeleteLocalRef(jlocal_Param1);
    }
    else
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:func1Async (Ljava/lang/String;LtbEnum/tbEnum_api/Enum1;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
ETbEnumEnum2 UTbEnumEnumInterfaceJniClient::Func2(ETbEnumEnum2 InParam2)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:func2 "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return ETbEnumEnum2::TEE2_Value2;
    }
    TPromise<ETbEnumEnum2> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:func2Async:(Ljava/lang/String;LtbEnum/tbEnum_api/Enum2;)V CLASS not found"));
        return ETbEnumEnum2::TEE2_Value2;
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "func2Async", "(Ljava/lang/String;LtbEnum/tbEnum_api/Enum2;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbEnumEnumInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobject jlocal_Param2 = TbEnumDataJavaConverter::makeJavaEnum2(Env, InParam2);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_Param2);
        Env->DeleteLocalRef(jlocal_Param2);
    }
    else
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:func2Async (Ljava/lang/String;LtbEnum/tbEnum_api/Enum2;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
ETbEnumEnum3 UTbEnumEnumInterfaceJniClient::Func3(ETbEnumEnum3 InParam3)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:func3 "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return ETbEnumEnum3::TEE3_Value3;
    }
    TPromise<ETbEnumEnum3> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:func3Async:(Ljava/lang/String;LtbEnum/tbEnum_api/Enum3;)V CLASS not found"));
        return ETbEnumEnum3::TEE3_Value3;
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "func3Async", "(Ljava/lang/String;LtbEnum/tbEnum_api/Enum3;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTbEnumEnumInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobject jlocal_Param3 = TbEnumDataJavaConverter::makeJavaEnum3(Env, InParam3);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_Param3);
        Env->DeleteLocalRef(jlocal_Param3);
    }
    else
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:func3Async (Ljava/lang/String;LtbEnum/tbEnum_api/Enum3;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}

bool UTbEnumEnumInterfaceJniClient::_bindToService(FString servicePackage, FString connectionId)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Request JNI connection to %s"), *servicePackage);
    if (b_isReady)
    {
        if (servicePackage == m_lastBoundServicePackage && connectionId == m_lastConnectionId)
        {
            UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("Already bound"));
            return true;
        }
        else
        {
            _unbind();
        }
    }
    m_lastBoundServicePackage = servicePackage;
    m_lastConnectionId = connectionId;
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:bind:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z CLASS not found"));
        return false;
    }
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "bind", "(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z");
    if (MethodID != nullptr)
    {
        jobject Activity = FJavaWrapper::GameActivityThis;
        auto jPackage = FJavaHelper::ToJavaString(Env, servicePackage);
        auto jConnId = FJavaHelper::ToJavaString(Env, connectionId);
        auto res = FJavaWrapper::CallBooleanMethod(Env, m_javaJniClientInstance, MethodID, Activity, *jPackage, *jConnId);
        return res;
    }
    else
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:bind (Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z not found"));
    }
#endif
    return false;
}

void UTbEnumEnumInterfaceJniClient::_unbind()
{

    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Request JNI unbind"));

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:unbind:()V CLASS not found"));
        return;
    }
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "unbind", "()V");
    if (MethodID != nullptr)
    {
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID);
    }
    else
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("tbEnum/tbEnumjniclient/EnumInterfaceJniClient:unbind ()V not found"));
    }
#endif
}

bool UTbEnumEnumInterfaceJniClient::_IsReady() const
{
    return b_isReady;
}

#if PLATFORM_ANDROID && USE_ANDROID_JNI
JNI_METHOD void Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnProp0Changed(JNIEnv* Env, jclass Clazz,jobject prop0)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnProp0Changed"));
    if (gUTbEnumEnumInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnProp0Changed: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    ETbEnumEnum0 local_prop0 = TbEnumDataJavaConverter::getEnum0Value(Env, prop0);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop0= MoveTemp(local_prop0)]()
    {
        gUTbEnumEnumInterfaceJniClientOnProp0Changed(plocal_prop0);
    });
}
JNI_METHOD void Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnProp1Changed(JNIEnv* Env, jclass Clazz,jobject prop1)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnProp1Changed"));
    if (gUTbEnumEnumInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnProp1Changed: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    ETbEnumEnum1 local_prop1 = TbEnumDataJavaConverter::getEnum1Value(Env, prop1);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop1= MoveTemp(local_prop1)]()
    {
        gUTbEnumEnumInterfaceJniClientOnProp1Changed(plocal_prop1);
    });
}
JNI_METHOD void Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnProp2Changed(JNIEnv* Env, jclass Clazz,jobject prop2)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnProp2Changed"));
    if (gUTbEnumEnumInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnProp2Changed: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    ETbEnumEnum2 local_prop2 = TbEnumDataJavaConverter::getEnum2Value(Env, prop2);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop2= MoveTemp(local_prop2)]()
    {
        gUTbEnumEnumInterfaceJniClientOnProp2Changed(plocal_prop2);
    });
}
JNI_METHOD void Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnProp3Changed(JNIEnv* Env, jclass Clazz,jobject prop3)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnProp3Changed"));
    if (gUTbEnumEnumInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnProp3Changed: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    ETbEnumEnum3 local_prop3 = TbEnumDataJavaConverter::getEnum3Value(Env, prop3);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop3= MoveTemp(local_prop3)]()
    {
        gUTbEnumEnumInterfaceJniClientOnProp3Changed(plocal_prop3);
    });
}

JNI_METHOD void Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig0(JNIEnv* Env, jclass Clazz, jobject param0)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig0"));
    if (gUTbEnumEnumInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig0: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    ETbEnumEnum0 local_param0 = TbEnumDataJavaConverter::getEnum0Value(Env, param0);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param0= MoveTemp(local_param0)]()
        {
            if (gUTbEnumEnumInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig0: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbEnumEnumInterfaceJniClientHandle->_GetPublisher()->BroadcastSig0Signal( plocal_param0);
        });
}

JNI_METHOD void Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig1(JNIEnv* Env, jclass Clazz, jobject param1)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig1"));
    if (gUTbEnumEnumInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig1: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    ETbEnumEnum1 local_param1 = TbEnumDataJavaConverter::getEnum1Value(Env, param1);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param1= MoveTemp(local_param1)]()
        {
            if (gUTbEnumEnumInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig1: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbEnumEnumInterfaceJniClientHandle->_GetPublisher()->BroadcastSig1Signal( plocal_param1);
        });
}

JNI_METHOD void Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig2(JNIEnv* Env, jclass Clazz, jobject param2)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig2"));
    if (gUTbEnumEnumInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig2: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    ETbEnumEnum2 local_param2 = TbEnumDataJavaConverter::getEnum2Value(Env, param2);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param2= MoveTemp(local_param2)]()
        {
            if (gUTbEnumEnumInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig2: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbEnumEnumInterfaceJniClientHandle->_GetPublisher()->BroadcastSig2Signal( plocal_param2);
        });
}

JNI_METHOD void Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig3(JNIEnv* Env, jclass Clazz, jobject param3)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig3"));
    if (gUTbEnumEnumInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig3: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    ETbEnumEnum3 local_param3 = TbEnumDataJavaConverter::getEnum3Value(Env, param3);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param3= MoveTemp(local_param3)]()
        {
            if (gUTbEnumEnumInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Warning, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnSig3: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTbEnumEnumInterfaceJniClientHandle->_GetPublisher()->BroadcastSig3Signal( plocal_param3);
        });
}

JNI_METHOD void Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnFunc0Result(JNIEnv* Env, jclass Clazz, jobject result, jstring callId)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnFunc0Result"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    ETbEnumEnum0 cpp_result = TbEnumDataJavaConverter::getEnum0Value(Env, result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbEnumEnumInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnFunc1Result(JNIEnv* Env, jclass Clazz, jobject result, jstring callId)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnFunc1Result"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    ETbEnumEnum1 cpp_result = TbEnumDataJavaConverter::getEnum1Value(Env, result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbEnumEnumInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnFunc2Result(JNIEnv* Env, jclass Clazz, jobject result, jstring callId)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnFunc2Result"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    ETbEnumEnum2 cpp_result = TbEnumDataJavaConverter::getEnum2Value(Env, result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbEnumEnumInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnFunc3Result(JNIEnv* Env, jclass Clazz, jobject result, jstring callId)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT("Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeOnFunc3Result"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    ETbEnumEnum3 cpp_result = TbEnumDataJavaConverter::getEnum3Value(Env, result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTbEnumEnumInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_tbEnum_tbEnumjniclient_EnumInterfaceJniClient_nativeIsReady(JNIEnv* Env, jclass Clazz, jboolean value)
{
    AsyncTask(ENamedThreads::GameThread, [value]()
        {
            gUTbEnumEnumInterfaceJniClientnotifyIsReady(value);
        });
}
#endif


template <typename ResultType>
FGuid UTbEnumEnumInterfaceJniClientMethodHelper::StorePromise(TPromise<ResultType>& Promise)
{
    FGuid Id = FGuid::NewGuid();
    FScopeLock Lock(&ReplyPromisesMapCS);
    ReplyPromisesMap.Add(Id, &Promise);
    //TODO invalid id if sth goes wrong + log + checking
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT(" method store id %s"), *(Id.ToString(EGuidFormats::Digits)));
    return Id;
}

template <typename ResultType>
bool UTbEnumEnumInterfaceJniClientMethodHelper::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
    UE_LOG(LogTbEnumEnumInterfaceClient_JNI, Verbose, TEXT(" method resolving id %s"), *(Id.ToString(EGuidFormats::Digits)));
    TPromise<ResultType>* PromisePtr = nullptr;

    {
        FScopeLock Lock(&ReplyPromisesMapCS);
        if (auto** Found = ReplyPromisesMap.Find(Id))
        {
            PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
            ReplyPromisesMap.Remove(Id);
        }
    }

    if (PromisePtr)
    {
        AsyncTask(ENamedThreads::GameThread, [Value, PromisePtr]()
            {
                PromisePtr->SetValue(Value);
            });
        return true;

    }
    return false;
}
template FGuid UTbEnumEnumInterfaceJniClientMethodHelper::StorePromise<ETbEnumEnum0>(TPromise<ETbEnumEnum0>& Promise);
template bool UTbEnumEnumInterfaceJniClientMethodHelper::FulfillPromise<ETbEnumEnum0>(const FGuid& Id, const ETbEnumEnum0& Value);
template FGuid UTbEnumEnumInterfaceJniClientMethodHelper::StorePromise<ETbEnumEnum1>(TPromise<ETbEnumEnum1>& Promise);
template bool UTbEnumEnumInterfaceJniClientMethodHelper::FulfillPromise<ETbEnumEnum1>(const FGuid& Id, const ETbEnumEnum1& Value);
template FGuid UTbEnumEnumInterfaceJniClientMethodHelper::StorePromise<ETbEnumEnum2>(TPromise<ETbEnumEnum2>& Promise);
template bool UTbEnumEnumInterfaceJniClientMethodHelper::FulfillPromise<ETbEnumEnum2>(const FGuid& Id, const ETbEnumEnum2& Value);
template FGuid UTbEnumEnumInterfaceJniClientMethodHelper::StorePromise<ETbEnumEnum3>(TPromise<ETbEnumEnum3>& Promise);
template bool UTbEnumEnumInterfaceJniClientMethodHelper::FulfillPromise<ETbEnumEnum3>(const FGuid& Id, const ETbEnumEnum3& Value);

