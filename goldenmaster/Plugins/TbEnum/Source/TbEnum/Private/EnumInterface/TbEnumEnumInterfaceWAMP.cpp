
/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "TbEnumEnumInterfaceWAMP.h"
#include "apig/TbEnum.json.adapter.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "unrealwamp.h"

using namespace ApiGear::WAMP;

namespace TbEnum {
namespace EnumInterface {
namespace Private {
WAMPService::WAMPService()
: ITbEnumEnumInterfaceInterface()
, Prop0(ETbEnumEnum0::VALUE0)
, Prop1(ETbEnumEnum1::VALUE1)
, Prop2(ETbEnumEnum2::VALUE2)
, Prop3(ETbEnumEnum3::VALUE3)
{
    EventFunc EnumInterfaceStateChangedFunc = [this](EventArg arg)
    {
        const json fields = arg.kwargs;
        if(fields.contains("prop0")) {
            if(Prop0 != fields["prop0"].get<ETbEnumEnum0>())
            {
                Prop0 = fields["prop0"].get<ETbEnumEnum0>();
                Prop0Changed.Broadcast(Prop0);
            }
        }
        if(fields.contains("prop1")) {
            if(Prop1 != fields["prop1"].get<ETbEnumEnum1>())
            {
                Prop1 = fields["prop1"].get<ETbEnumEnum1>();
                Prop1Changed.Broadcast(Prop1);
            }
        }
        if(fields.contains("prop2")) {
            if(Prop2 != fields["prop2"].get<ETbEnumEnum2>())
            {
                Prop2 = fields["prop2"].get<ETbEnumEnum2>();
                Prop2Changed.Broadcast(Prop2);
            }
        }
        if(fields.contains("prop3")) {
            if(Prop3 != fields["prop3"].get<ETbEnumEnum3>())
            {
                Prop3 = fields["prop3"].get<ETbEnumEnum3>();
                Prop3Changed.Broadcast(Prop3);
            }
        }
    };
    UnrealWamp::instance()->doSubscribe("tb.enum.EnumInterface", EnumInterfaceStateChangedFunc);

    ResponseFunc GetEnumInterfaceStateFunc = [this](ResponseArg arg)
    {
        if(arg.args.size() != 1) {
          return;
        }
        const json fields = arg.args[0];
        if(fields.contains("prop0")) {
            if(Prop0 != fields["prop0"].get<ETbEnumEnum0>())
            {
                Prop0 = fields["prop0"].get<ETbEnumEnum0>();
                Prop0Changed.Broadcast(Prop0);
            }
        }
        if(fields.contains("prop1")) {
            if(Prop1 != fields["prop1"].get<ETbEnumEnum1>())
            {
                Prop1 = fields["prop1"].get<ETbEnumEnum1>();
                Prop1Changed.Broadcast(Prop1);
            }
        }
        if(fields.contains("prop2")) {
            if(Prop2 != fields["prop2"].get<ETbEnumEnum2>())
            {
                Prop2 = fields["prop2"].get<ETbEnumEnum2>();
                Prop2Changed.Broadcast(Prop2);
            }
        }
        if(fields.contains("prop3")) {
            if(Prop3 != fields["prop3"].get<ETbEnumEnum3>())
            {
                Prop3 = fields["prop3"].get<ETbEnumEnum3>();
                Prop3Changed.Broadcast(Prop3);
            }
        }
    };
    UnrealWamp::instance()->doCall("tb.enum.EnumInterface._get", Arguments(), ArgumentsKw(), GetEnumInterfaceStateFunc);

    EventFunc sig0Func = [this](EventArg arg)
    {
        if(arg.args.size() == 1)
        {
            Sig0Signal.Broadcast(arg.args[0].get<ETbEnumEnum0>());
        }
    };
    UnrealWamp::instance()->doSubscribe("tb.enum.EnumInterface.sig0", sig0Func);
    
    EventFunc sig1Func = [this](EventArg arg)
    {
        if(arg.args.size() == 1)
        {
            Sig1Signal.Broadcast(arg.args[0].get<ETbEnumEnum1>());
        }
    };
    UnrealWamp::instance()->doSubscribe("tb.enum.EnumInterface.sig1", sig1Func);
    
    EventFunc sig2Func = [this](EventArg arg)
    {
        if(arg.args.size() == 1)
        {
            Sig2Signal.Broadcast(arg.args[0].get<ETbEnumEnum2>());
        }
    };
    UnrealWamp::instance()->doSubscribe("tb.enum.EnumInterface.sig2", sig2Func);
    
    EventFunc sig3Func = [this](EventArg arg)
    {
        if(arg.args.size() == 1)
        {
            Sig3Signal.Broadcast(arg.args[0].get<ETbEnumEnum3>());
        }
    };
    UnrealWamp::instance()->doSubscribe("tb.enum.EnumInterface.sig3", sig3Func);
    
}

WAMPService::~WAMPService()
{
    UnrealWamp::instance()->doUnSubscribe("tb.enum.EnumInterface");
    UnrealWamp::instance()->doUnSubscribe("tb.enum.EnumInterface.sig0");
    UnrealWamp::instance()->doUnSubscribe("tb.enum.EnumInterface.sig1");
    UnrealWamp::instance()->doUnSubscribe("tb.enum.EnumInterface.sig2");
    UnrealWamp::instance()->doUnSubscribe("tb.enum.EnumInterface.sig3");
}

FTbEnumEnumInterfaceSig0Delegate& WAMPService::GetSig0SignalDelegate()
{
    return Sig0Signal;
}

FTbEnumEnumInterfaceSig1Delegate& WAMPService::GetSig1SignalDelegate()
{
    return Sig1Signal;
}

FTbEnumEnumInterfaceSig2Delegate& WAMPService::GetSig2SignalDelegate()
{
    return Sig2Signal;
}

FTbEnumEnumInterfaceSig3Delegate& WAMPService::GetSig3SignalDelegate()
{
    return Sig3Signal;
}

ETbEnumEnum0 WAMPService::GetProp0() const
{
    return Prop0;
}

void WAMPService::SetProp0(const ETbEnumEnum0& InProp0)
{
    ArgumentsKw fields_;
    fields_["prop0"] = InProp0;
    UnrealWamp::instance()->doCall("tb.enum.EnumInterface._set", Arguments(), fields_);
}

FTbEnumEnumInterfaceProp0ChangedDelegate& WAMPService::GetProp0ChangedDelegate()
{
    return Prop0Changed;
}

ETbEnumEnum1 WAMPService::GetProp1() const
{
    return Prop1;
}

void WAMPService::SetProp1(const ETbEnumEnum1& InProp1)
{
    ArgumentsKw fields_;
    fields_["prop1"] = InProp1;
    UnrealWamp::instance()->doCall("tb.enum.EnumInterface._set", Arguments(), fields_);
}

FTbEnumEnumInterfaceProp1ChangedDelegate& WAMPService::GetProp1ChangedDelegate()
{
    return Prop1Changed;
}

ETbEnumEnum2 WAMPService::GetProp2() const
{
    return Prop2;
}

void WAMPService::SetProp2(const ETbEnumEnum2& InProp2)
{
    ArgumentsKw fields_;
    fields_["prop2"] = InProp2;
    UnrealWamp::instance()->doCall("tb.enum.EnumInterface._set", Arguments(), fields_);
}

FTbEnumEnumInterfaceProp2ChangedDelegate& WAMPService::GetProp2ChangedDelegate()
{
    return Prop2Changed;
}

ETbEnumEnum3 WAMPService::GetProp3() const
{
    return Prop3;
}

void WAMPService::SetProp3(const ETbEnumEnum3& InProp3)
{
    ArgumentsKw fields_;
    fields_["prop3"] = InProp3;
    UnrealWamp::instance()->doCall("tb.enum.EnumInterface._set", Arguments(), fields_);
}

FTbEnumEnumInterfaceProp3ChangedDelegate& WAMPService::GetProp3ChangedDelegate()
{
    return Prop3Changed;
}


ETbEnumEnum0 WAMPService::Func0(const ETbEnumEnum0& Param0)
{
    TPromise<ETbEnumEnum0> Promise;
    Async(EAsyncExecution::Thread, [Param0,&Promise]()
    {
        ResponseFunc GetEnumInterfaceStateFunc = [&Promise](ResponseArg arg)
        {
            if(arg.args.size() != 1) {
              return;
            }
            Promise.SetValue(arg.args[0].get<ETbEnumEnum0>());
        };
        UnrealWamp::instance()->doCall("tb.enum.EnumInterface.func0", {Param0}, ArgumentsKw(), GetEnumInterfaceStateFunc);
    });

    return Promise.GetFuture().Get();
}

ETbEnumEnum1 WAMPService::Func1(const ETbEnumEnum1& Param1)
{
    TPromise<ETbEnumEnum1> Promise;
    Async(EAsyncExecution::Thread, [Param1,&Promise]()
    {
        ResponseFunc GetEnumInterfaceStateFunc = [&Promise](ResponseArg arg)
        {
            if(arg.args.size() != 1) {
              return;
            }
            Promise.SetValue(arg.args[0].get<ETbEnumEnum1>());
        };
        UnrealWamp::instance()->doCall("tb.enum.EnumInterface.func1", {Param1}, ArgumentsKw(), GetEnumInterfaceStateFunc);
    });

    return Promise.GetFuture().Get();
}

ETbEnumEnum2 WAMPService::Func2(const ETbEnumEnum2& Param2)
{
    TPromise<ETbEnumEnum2> Promise;
    Async(EAsyncExecution::Thread, [Param2,&Promise]()
    {
        ResponseFunc GetEnumInterfaceStateFunc = [&Promise](ResponseArg arg)
        {
            if(arg.args.size() != 1) {
              return;
            }
            Promise.SetValue(arg.args[0].get<ETbEnumEnum2>());
        };
        UnrealWamp::instance()->doCall("tb.enum.EnumInterface.func2", {Param2}, ArgumentsKw(), GetEnumInterfaceStateFunc);
    });

    return Promise.GetFuture().Get();
}

ETbEnumEnum3 WAMPService::Func3(const ETbEnumEnum3& Param3)
{
    TPromise<ETbEnumEnum3> Promise;
    Async(EAsyncExecution::Thread, [Param3,&Promise]()
    {
        ResponseFunc GetEnumInterfaceStateFunc = [&Promise](ResponseArg arg)
        {
            if(arg.args.size() != 1) {
              return;
            }
            Promise.SetValue(arg.args[0].get<ETbEnumEnum3>());
        };
        UnrealWamp::instance()->doCall("tb.enum.EnumInterface.func3", {Param3}, ArgumentsKw(), GetEnumInterfaceStateFunc);
    });

    return Promise.GetFuture().Get();
}


} // namespace Private
} // namespace EnumInterface
} // namespace TbEnum
