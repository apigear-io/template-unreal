/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Testbed1StructArrayInterfaceOLink.h"
#include "Async/Future.h"
#include "Async/Async.h"
#include "apig/Testbed1.json.adapter.h"
#include "unrealolink.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "ApiGear/Public/ApiGearConnectionManager.h"
#include "Misc/DateTime.h"

using namespace ApiGear::ObjectLink;
UTestbed1StructArrayInterfaceOLinkService::UTestbed1StructArrayInterfaceOLinkService()
	: ITestbed1StructArrayInterfaceInterface()
	, m_node(nullptr)
	, m_isReady(false)
	, PropBool(TArray<FTestbed1StructBool>())
	, PropInt(TArray<FTestbed1StructInt>())
	, PropFloat(TArray<FTestbed1StructFloat>())
	, PropString(TArray<FTestbed1StructString>())
{
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetOLinkConnection()->Connect();
		AGCM->GetOLinkConnection()->linkObjectSource(olinkObjectName());
	}
	m_node = ClientRegistry::get().addObjectSink(this);
}

UTestbed1StructArrayInterfaceOLinkService::~UTestbed1StructArrayInterfaceOLinkService()
{
	ClientRegistry::get().removeObjectSink(this);
	if (GEngine != nullptr)
	{
		UApiGearConnectionManager* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionManager>();
		AGCM->GetOLinkConnection()->unlinkObjectSource(olinkObjectName());
	}
	m_isReady = false;
	m_node = nullptr;
}

FTestbed1StructArrayInterfaceSigBoolDelegate& UTestbed1StructArrayInterfaceOLinkService::GetSigBoolSignalDelegate()
{
	return SigBoolSignal;
}

FTestbed1StructArrayInterfaceSigIntDelegate& UTestbed1StructArrayInterfaceOLinkService::GetSigIntSignalDelegate()
{
	return SigIntSignal;
}

FTestbed1StructArrayInterfaceSigFloatDelegate& UTestbed1StructArrayInterfaceOLinkService::GetSigFloatSignalDelegate()
{
	return SigFloatSignal;
}

FTestbed1StructArrayInterfaceSigStringDelegate& UTestbed1StructArrayInterfaceOLinkService::GetSigStringSignalDelegate()
{
	return SigStringSignal;
}

void UTestbed1StructArrayInterfaceOLinkService::GetPropBool_Implementation(TArray<FTestbed1StructBool>& ReturnValue) const
{
	ReturnValue = PropBool;
}

void UTestbed1StructArrayInterfaceOLinkService::SetPropBool_Implementation(const TArray<FTestbed1StructBool>& InPropBool)
{
	if (!m_node)
	{
		return;
	}
	m_node->setRemoteProperty("testbed1.StructArrayInterface/propBool", InPropBool);
}

FTestbed1StructArrayInterfacePropBoolChangedDelegate& UTestbed1StructArrayInterfaceOLinkService::GetPropBoolChangedDelegate()
{
	return PropBoolChanged;
}
void UTestbed1StructArrayInterfaceOLinkService::GetPropInt_Implementation(TArray<FTestbed1StructInt>& ReturnValue) const
{
	ReturnValue = PropInt;
}

void UTestbed1StructArrayInterfaceOLinkService::SetPropInt_Implementation(const TArray<FTestbed1StructInt>& InPropInt)
{
	if (!m_node)
	{
		return;
	}
	m_node->setRemoteProperty("testbed1.StructArrayInterface/propInt", InPropInt);
}

FTestbed1StructArrayInterfacePropIntChangedDelegate& UTestbed1StructArrayInterfaceOLinkService::GetPropIntChangedDelegate()
{
	return PropIntChanged;
}
void UTestbed1StructArrayInterfaceOLinkService::GetPropFloat_Implementation(TArray<FTestbed1StructFloat>& ReturnValue) const
{
	ReturnValue = PropFloat;
}

void UTestbed1StructArrayInterfaceOLinkService::SetPropFloat_Implementation(const TArray<FTestbed1StructFloat>& InPropFloat)
{
	if (!m_node)
	{
		return;
	}
	m_node->setRemoteProperty("testbed1.StructArrayInterface/propFloat", InPropFloat);
}

FTestbed1StructArrayInterfacePropFloatChangedDelegate& UTestbed1StructArrayInterfaceOLinkService::GetPropFloatChangedDelegate()
{
	return PropFloatChanged;
}
void UTestbed1StructArrayInterfaceOLinkService::GetPropString_Implementation(TArray<FTestbed1StructString>& ReturnValue) const
{
	ReturnValue = PropString;
}

void UTestbed1StructArrayInterfaceOLinkService::SetPropString_Implementation(const TArray<FTestbed1StructString>& InPropString)
{
	if (!m_node)
	{
		return;
	}
	m_node->setRemoteProperty("testbed1.StructArrayInterface/propString", InPropString);
}

FTestbed1StructArrayInterfacePropStringChangedDelegate& UTestbed1StructArrayInterfaceOLinkService::GetPropStringChangedDelegate()
{
	return PropStringChanged;
}

void UTestbed1StructArrayInterfaceOLinkService::FuncBool_Implementation(FTestbed1StructBool& Result, const TArray<FTestbed1StructBool>& ParamBool)
{
	if (!m_node)
	{
		UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
		Result = FTestbed1StructBool();
		return;
	}
	TPromise<FTestbed1StructBool> Promise;
	Async(EAsyncExecution::Thread,
		[ParamBool, &Promise, this]()
		{
			InvokeReplyFunc GetStructArrayInterfaceStateFunc = [&Promise](InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<FTestbed1StructBool>()); };
			m_node->invokeRemote("testbed1.StructArrayInterface/funcBool", {ParamBool}, GetStructArrayInterfaceStateFunc);
		});

	Result = Promise.GetFuture().Get();
}

void UTestbed1StructArrayInterfaceOLinkService::FuncInt_Implementation(FTestbed1StructBool& Result, const TArray<FTestbed1StructInt>& ParamInt)
{
	if (!m_node)
	{
		UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
		Result = FTestbed1StructBool();
		return;
	}
	TPromise<FTestbed1StructBool> Promise;
	Async(EAsyncExecution::Thread,
		[ParamInt, &Promise, this]()
		{
			InvokeReplyFunc GetStructArrayInterfaceStateFunc = [&Promise](InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<FTestbed1StructBool>()); };
			m_node->invokeRemote("testbed1.StructArrayInterface/funcInt", {ParamInt}, GetStructArrayInterfaceStateFunc);
		});

	Result = Promise.GetFuture().Get();
}

void UTestbed1StructArrayInterfaceOLinkService::FuncFloat_Implementation(FTestbed1StructBool& Result, const TArray<FTestbed1StructFloat>& ParamFloat)
{
	if (!m_node)
	{
		UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
		Result = FTestbed1StructBool();
		return;
	}
	TPromise<FTestbed1StructBool> Promise;
	Async(EAsyncExecution::Thread,
		[ParamFloat, &Promise, this]()
		{
			InvokeReplyFunc GetStructArrayInterfaceStateFunc = [&Promise](InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<FTestbed1StructBool>()); };
			m_node->invokeRemote("testbed1.StructArrayInterface/funcFloat", {ParamFloat}, GetStructArrayInterfaceStateFunc);
		});

	Result = Promise.GetFuture().Get();
}

void UTestbed1StructArrayInterfaceOLinkService::FuncString_Implementation(FTestbed1StructBool& Result, const TArray<FTestbed1StructString>& ParamString)
{
	if (!m_node)
	{
		UE_LOG(LogTemp, Warning, TEXT("%s has no node"), UTF8_TO_TCHAR(olinkObjectName().c_str()));
		Result = FTestbed1StructBool();
		return;
	}
	TPromise<FTestbed1StructBool> Promise;
	Async(EAsyncExecution::Thread,
		[ParamString, &Promise, this]()
		{
			InvokeReplyFunc GetStructArrayInterfaceStateFunc = [&Promise](InvokeReplyArg arg)
			{ Promise.SetValue(arg.value.get<FTestbed1StructBool>()); };
			m_node->invokeRemote("testbed1.StructArrayInterface/funcString", {ParamString}, GetStructArrayInterfaceStateFunc);
		});

	Result = Promise.GetFuture().Get();
}

void UTestbed1StructArrayInterfaceOLinkService::applyState(const nlohmann::json& fields)
{
	if (fields.contains("propBool"))
	{
		if (PropBool != fields["propBool"].get<TArray<FTestbed1StructBool>>())
		{
			PropBool = fields["propBool"].get<TArray<FTestbed1StructBool>>();
			PropBoolChanged.Broadcast(PropBool);
		}
	}
	if (fields.contains("propInt"))
	{
		if (PropInt != fields["propInt"].get<TArray<FTestbed1StructInt>>())
		{
			PropInt = fields["propInt"].get<TArray<FTestbed1StructInt>>();
			PropIntChanged.Broadcast(PropInt);
		}
	}
	if (fields.contains("propFloat"))
	{
		if (PropFloat != fields["propFloat"].get<TArray<FTestbed1StructFloat>>())
		{
			PropFloat = fields["propFloat"].get<TArray<FTestbed1StructFloat>>();
			PropFloatChanged.Broadcast(PropFloat);
		}
	}
	if (fields.contains("propString"))
	{
		if (PropString != fields["propString"].get<TArray<FTestbed1StructString>>())
		{
			PropString = fields["propString"].get<TArray<FTestbed1StructString>>();
			PropStringChanged.Broadcast(PropString);
		}
	}
}

std::string UTestbed1StructArrayInterfaceOLinkService::olinkObjectName()
{
	return "testbed1.StructArrayInterface";
}

void UTestbed1StructArrayInterfaceOLinkService::olinkOnSignal(std::string name, nlohmann::json args)
{
	std::string path = Name::pathFromName(name);
	if (path == "sigBool")
	{
		SigBoolSignal.Broadcast(args[0].get<TArray<FTestbed1StructBool>>());
		return;
	}
	if (path == "sigInt")
	{
		SigIntSignal.Broadcast(args[0].get<TArray<FTestbed1StructInt>>());
		return;
	}
	if (path == "sigFloat")
	{
		SigFloatSignal.Broadcast(args[0].get<TArray<FTestbed1StructFloat>>());
		return;
	}
	if (path == "sigString")
	{
		SigStringSignal.Broadcast(args[0].get<TArray<FTestbed1StructString>>());
		return;
	}
}

void UTestbed1StructArrayInterfaceOLinkService::olinkOnPropertyChanged(std::string name, nlohmann::json value)
{
	std::string path = Name::pathFromName(name);
	applyState({{path, value}});
}

void UTestbed1StructArrayInterfaceOLinkService::olinkOnInit(std::string name, nlohmann::json props, IClientNode* node)
{
	m_isReady = true;
	m_node = node;
	applyState(props);
	// call isReady();
}

void UTestbed1StructArrayInterfaceOLinkService::olinkOnRelease()
{
	m_isReady = false;
	m_node = nullptr;
}
