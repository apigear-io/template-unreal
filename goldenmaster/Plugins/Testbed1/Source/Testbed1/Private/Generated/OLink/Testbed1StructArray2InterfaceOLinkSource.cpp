/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Testbed1StructArray2InterfaceOLinkSource.h"
#include "HAL/Platform.h"
#include "OLinkCommon.h"
#if !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
#include "Async/Future.h"
#include "Async/Async.h"
#include "Generated/api/Testbed1.json.adapter.h"
#include "OLinkClientConnection.h"
#include "Async/Async.h"
#include "Engine/Engine.h"
#include "Misc/DateTime.h"
THIRD_PARTY_INCLUDES_START
#include "olink/iobjectsource.h"
THIRD_PARTY_INCLUDES_END

using namespace ApiGear::ObjectLink;

namespace
{
static const std::string Testbed1StructArray2InterfaceIdentifier{"testbed1.StructArray2Interface"};
}

DEFINE_LOG_CATEGORY(LogTestbed1StructArray2InterfaceOLinkSource);
Testbed1StructArray2InterfaceOLinkSource::Testbed1StructArray2InterfaceOLinkSource()
	: Host(nullptr)
{
}

void Testbed1StructArray2InterfaceOLinkSource::setBackendService(TScriptInterface<ITestbed1StructArray2InterfaceInterface> InService)
{
	// only set if interface is implemented
	if (InService.GetInterface() == nullptr)
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkSource, Error, TEXT("Cannot set backend service - interface Testbed1StructArray2Interface is not fully implemented"));
		return;
	}

	BackendService = InService;
}
void Testbed1StructArray2InterfaceOLinkSource::OnSigBool(const FTestbed1StructBoolWithArray& ParamBool)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "sigBool");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {ParamBool};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void Testbed1StructArray2InterfaceOLinkSource::OnSigInt(const FTestbed1StructIntWithArray& ParamInt)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "sigInt");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {ParamInt};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void Testbed1StructArray2InterfaceOLinkSource::OnSigFloat(const FTestbed1StructFloatWithArray& ParamFloat)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "sigFloat");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {ParamFloat};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void Testbed1StructArray2InterfaceOLinkSource::OnSigString(const FTestbed1StructStringWithArray& ParamString)
{
	static const auto& signalId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "sigString");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(signalId);
	const nlohmann::json& args = {ParamString};
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifySignal(signalId, args);
		}
	}
}

void Testbed1StructArray2InterfaceOLinkSource::OnPropBoolChanged(const FTestbed1StructBoolWithArray& InPropBool)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "propBool");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InPropBool);
		}
	}
}

void Testbed1StructArray2InterfaceOLinkSource::OnPropIntChanged(const FTestbed1StructIntWithArray& InPropInt)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "propInt");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InPropInt);
		}
	}
}

void Testbed1StructArray2InterfaceOLinkSource::OnPropFloatChanged(const FTestbed1StructFloatWithArray& InPropFloat)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "propFloat");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InPropFloat);
		}
	}
}

void Testbed1StructArray2InterfaceOLinkSource::OnPropStringChanged(const FTestbed1StructStringWithArray& InPropString)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "propString");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InPropString);
		}
	}
}

void Testbed1StructArray2InterfaceOLinkSource::OnPropEnumChanged(const FTestbed1StructEnumWithArray& InPropEnum)
{
	static const auto& propertyId = ApiGear::ObjectLink::Name::createMemberId(olinkObjectName(), "propEnum");
	static const auto& objectId = ApiGear::ObjectLink::Name::getObjectId(propertyId);
	for (auto node : Host->GetOLinkRegistry()->getNodes(objectId))
	{
		auto lockedNode = node.lock();
		if (lockedNode)
		{
			lockedNode->notifyPropertyChange(propertyId, InPropEnum);
		}
	}
}

void Testbed1StructArray2InterfaceOLinkSource::setOLinkHost(TSoftObjectPtr<UOLinkHost> InHost)
{
	Host = InHost.Get();
}

//
// IObjectSource interface
//

std::string Testbed1StructArray2InterfaceOLinkSource::olinkObjectName()
{
	return Testbed1StructArray2InterfaceIdentifier;
}

nlohmann::json Testbed1StructArray2InterfaceOLinkSource::olinkInvoke(const std::string& methodId, const nlohmann::json& args)
{
	if (!BackendService)
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter Testbed1StructArray2InterfaceOLinkAdapter which implements the Testbed1StructArray2Interface interface"));
		return nlohmann::json();
	}

	const std::string path = Name::getMemberName(methodId);
	if (path == "funcBool")
	{
		FTestbed1StructBoolWithArray ParamBool = args.at(0).get<FTestbed1StructBoolWithArray>();
		TArray<FTestbed1StructBool> result = BackendService->Execute_FuncBool(BackendService.GetObject(), ParamBool);
		return result;
	}
	if (path == "funcInt")
	{
		FTestbed1StructIntWithArray ParamInt = args.at(0).get<FTestbed1StructIntWithArray>();
		TArray<FTestbed1StructInt> result = BackendService->Execute_FuncInt(BackendService.GetObject(), ParamInt);
		return result;
	}
	if (path == "funcFloat")
	{
		FTestbed1StructFloatWithArray ParamFloat = args.at(0).get<FTestbed1StructFloatWithArray>();
		TArray<FTestbed1StructFloat> result = BackendService->Execute_FuncFloat(BackendService.GetObject(), ParamFloat);
		return result;
	}
	if (path == "funcString")
	{
		FTestbed1StructStringWithArray ParamString = args.at(0).get<FTestbed1StructStringWithArray>();
		TArray<FTestbed1StructString> result = BackendService->Execute_FuncString(BackendService.GetObject(), ParamString);
		return result;
	}
	if (path == "funcEnum")
	{
		FTestbed1StructEnumWithArray ParamEnum = args.at(0).get<FTestbed1StructEnumWithArray>();
		TArray<ETestbed1Enum0> result = BackendService->Execute_FuncEnum(BackendService.GetObject(), ParamEnum);
		return result;
	}
	return nlohmann::json();
}

void Testbed1StructArray2InterfaceOLinkSource::olinkSetProperty(const std::string& propertyId, const nlohmann::json& value)
{
	if (!BackendService)
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter Testbed1StructArray2InterfaceOLinkAdapter which implements the Testbed1StructArray2Interface interface"));
		return;
	}

	const std::string path = Name::getMemberName(propertyId);
	if (path == "propBool")
	{
		FTestbed1StructBoolWithArray PropBool = value.get<FTestbed1StructBoolWithArray>();
		BackendService->Execute_SetPropBool(BackendService.GetObject(), PropBool);
	}
	if (path == "propInt")
	{
		FTestbed1StructIntWithArray PropInt = value.get<FTestbed1StructIntWithArray>();
		BackendService->Execute_SetPropInt(BackendService.GetObject(), PropInt);
	}
	if (path == "propFloat")
	{
		FTestbed1StructFloatWithArray PropFloat = value.get<FTestbed1StructFloatWithArray>();
		BackendService->Execute_SetPropFloat(BackendService.GetObject(), PropFloat);
	}
	if (path == "propString")
	{
		FTestbed1StructStringWithArray PropString = value.get<FTestbed1StructStringWithArray>();
		BackendService->Execute_SetPropString(BackendService.GetObject(), PropString);
	}
	if (path == "propEnum")
	{
		FTestbed1StructEnumWithArray PropEnum = value.get<FTestbed1StructEnumWithArray>();
		BackendService->Execute_SetPropEnum(BackendService.GetObject(), PropEnum);
	}
}

nlohmann::json Testbed1StructArray2InterfaceOLinkSource::olinkCollectProperties()
{
	if (!BackendService)
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkSource, Error, TEXT("No backend service set - please specify a service in the adapter Testbed1StructArray2InterfaceOLinkAdapter which implements the Testbed1StructArray2Interface interface"));
		return nlohmann::json();
	}

	return nlohmann::json::object({

		{"propBool", BackendService->Execute_GetPropBool(BackendService.GetObject())},
		{"propInt", BackendService->Execute_GetPropInt(BackendService.GetObject())},
		{"propFloat", BackendService->Execute_GetPropFloat(BackendService.GetObject())},
		{"propString", BackendService->Execute_GetPropString(BackendService.GetObject())},
		{"propEnum", BackendService->Execute_GetPropEnum(BackendService.GetObject())}});
}
#endif // !(PLATFORM_IOS || PLATFORM_ANDROID || PLATFORM_QNX)
