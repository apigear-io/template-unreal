/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

#include "Testbed1/Generated/OLink/Testbed1StructArray2InterfaceOLinkClient.h"
#include "ApiGearSettings.h"
#include "ApiGearOLink.h"
#include "Async/Async.h"
#include "Testbed1/Generated/api/Testbed1.json.adapter.h"
#include "OLinkClientConnection.h"
#include "OLinkSink.h"
#include "Engine/Engine.h"
#include "ApiGear/Public/ApiGearConnectionsStore.h"
#include "Misc/DateTime.h"
#include "Testbed1Settings.h"
THIRD_PARTY_INCLUDES_START
#include "olink/clientnode.h"
#include "olink/iobjectsink.h"
THIRD_PARTY_INCLUDES_END
#include "HAL/CriticalSection.h"

/**
   \brief data structure to hold the last sent property values
*/
struct Testbed1StructArray2InterfacePropertiesData
{
	FCriticalSection PropBoolMutex;
	FTestbed1StructBoolWithArray PropBool{FTestbed1StructBoolWithArray()};
	FCriticalSection PropIntMutex;
	FTestbed1StructIntWithArray PropInt{FTestbed1StructIntWithArray()};
	FCriticalSection PropFloatMutex;
	FTestbed1StructFloatWithArray PropFloat{FTestbed1StructFloatWithArray()};
	FCriticalSection PropStringMutex;
	FTestbed1StructStringWithArray PropString{FTestbed1StructStringWithArray()};
	FCriticalSection PropEnumMutex;
	FTestbed1StructEnumWithArray PropEnum{FTestbed1StructEnumWithArray()};
};
DEFINE_LOG_CATEGORY(LogTestbed1StructArray2InterfaceOLinkClient);

UTestbed1StructArray2InterfaceOLinkClient::UTestbed1StructArray2InterfaceOLinkClient()
	: UAbstractTestbed1StructArray2Interface()
	, _SentData(MakePimpl<Testbed1StructArray2InterfacePropertiesData>())
{
	m_sink = std::make_shared<FOLinkSink>("testbed1.StructArray2Interface");
}

UTestbed1StructArray2InterfaceOLinkClient::UTestbed1StructArray2InterfaceOLinkClient(FVTableHelper& Helper)
	: Super(Helper)
{
}
UTestbed1StructArray2InterfaceOLinkClient::~UTestbed1StructArray2InterfaceOLinkClient() = default;

void UTestbed1StructArray2InterfaceOLinkClient::Initialize(FSubsystemCollectionBase& Collection)
{
	Super::Initialize(Collection);

	m_sink->setOnInitCallback([this]()
		{
		_SubscriptionStatusChanged.Broadcast(true);
		_SubscriptionStatusChangedBP.Broadcast(true);
	});
	m_sink->setOnReleaseCallback([this]()
		{
		_SubscriptionStatusChanged.Broadcast(false);
		_SubscriptionStatusChangedBP.Broadcast(false);
	});

	FOLinkSink::FPropertyChangedFunc PropertyChangedFunc = [this](const nlohmann::json& props)
	{
		this->applyState(props);
	};
	m_sink->setOnPropertyChangedCallback(PropertyChangedFunc);

	FOLinkSink::FSignalEmittedFunc SignalEmittedFunc = [this](const std::string& signalName, const nlohmann::json& args)
	{
		this->emitSignal(signalName, args);
	};
	m_sink->setOnSignalEmittedCallback(SignalEmittedFunc);

	check(GEngine);
	UTestbed1Settings* settings = GetMutableDefault<UTestbed1Settings>();

	UApiGearConnectionsStore* AGCM = GEngine->GetEngineSubsystem<UApiGearConnectionsStore>();

	TScriptInterface<IApiGearConnection> OLinkConnection = AGCM->GetConnection(settings->OLinkConnectionIdentifier);

	if (!OLinkConnection.GetInterface())
	{
		return;
	}
	UseConnection(OLinkConnection);
	OLinkConnection->Connect();
}

void UTestbed1StructArray2InterfaceOLinkClient::Deinitialize()
{
	// tell the sink that we are gone and should not try to be invoked
	m_sink->resetOnPropertyChangedCallback();
	m_sink->resetOnSignalEmittedCallback();
	m_sink->resetOnInitCallback();
	m_sink->resetOnReleaseCallback();

	if (Connection.GetObject())
	{
		UOLinkClientConnection* UnrealOLinkConnection = Cast<UOLinkClientConnection>(Connection.GetObject());
		UnrealOLinkConnection->unlinkObjectSource(m_sink->olinkObjectName());
		UnrealOLinkConnection->node()->registry().removeSink(m_sink->olinkObjectName());
	}

	Super::Deinitialize();
}

void UTestbed1StructArray2InterfaceOLinkClient::UseConnection(TScriptInterface<IApiGearConnection> InConnection)
{
	if (!InConnection.GetInterface())
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkClient, Error, TEXT("The olink connection for the %s client does not implement the connection interface."), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only accept connections of type olink
	checkf(InConnection->GetConnectionProtocolIdentifier() == ApiGearOLinkProtocolIdentifier, TEXT("Cannot use connection - must be of type olink"));

	UOLinkClientConnection* UnrealOLinkConnection = nullptr;
	// remove old connection
	if (Connection.GetObject())
	{
		UnrealOLinkConnection = Cast<UOLinkClientConnection>(Connection.GetObject());
		UnrealOLinkConnection->unlinkObjectSource(m_sink->olinkObjectName());
		UnrealOLinkConnection->node()->registry().removeSink(m_sink->olinkObjectName());
		UnrealOLinkConnection = nullptr;
	}

	// set up new connection
	UnrealOLinkConnection = Cast<UOLinkClientConnection>(InConnection.GetObject());
	UnrealOLinkConnection->node()->registry().addSink(m_sink);
	UnrealOLinkConnection->linkObjectSource(m_sink->olinkObjectName());

	Connection = InConnection;
}

FTestbed1StructBoolWithArray UTestbed1StructArray2InterfaceOLinkClient::GetPropBool() const
{
	return PropBool;
}

void UTestbed1StructArray2InterfaceOLinkClient::SetPropBool(const FTestbed1StructBoolWithArray& InPropBool)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear Testbed1 plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropBool() == InPropBool)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->PropBoolMutex));
		if (_SentData->PropBool == InPropBool)
		{
			return;
		}
	}
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "propBool");
	m_sink->GetNode()->setRemoteProperty(memberId, InPropBool);
	FScopeLock Lock(&(_SentData->PropBoolMutex));
	_SentData->PropBool = InPropBool;
}

FTestbed1StructIntWithArray UTestbed1StructArray2InterfaceOLinkClient::GetPropInt() const
{
	return PropInt;
}

void UTestbed1StructArray2InterfaceOLinkClient::SetPropInt(const FTestbed1StructIntWithArray& InPropInt)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear Testbed1 plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropInt() == InPropInt)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->PropIntMutex));
		if (_SentData->PropInt == InPropInt)
		{
			return;
		}
	}
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "propInt");
	m_sink->GetNode()->setRemoteProperty(memberId, InPropInt);
	FScopeLock Lock(&(_SentData->PropIntMutex));
	_SentData->PropInt = InPropInt;
}

FTestbed1StructFloatWithArray UTestbed1StructArray2InterfaceOLinkClient::GetPropFloat() const
{
	return PropFloat;
}

void UTestbed1StructArray2InterfaceOLinkClient::SetPropFloat(const FTestbed1StructFloatWithArray& InPropFloat)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear Testbed1 plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropFloat() == InPropFloat)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->PropFloatMutex));
		if (_SentData->PropFloat == InPropFloat)
		{
			return;
		}
	}
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "propFloat");
	m_sink->GetNode()->setRemoteProperty(memberId, InPropFloat);
	FScopeLock Lock(&(_SentData->PropFloatMutex));
	_SentData->PropFloat = InPropFloat;
}

FTestbed1StructStringWithArray UTestbed1StructArray2InterfaceOLinkClient::GetPropString() const
{
	return PropString;
}

void UTestbed1StructArray2InterfaceOLinkClient::SetPropString(const FTestbed1StructStringWithArray& InPropString)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear Testbed1 plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropString() == InPropString)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->PropStringMutex));
		if (_SentData->PropString == InPropString)
		{
			return;
		}
	}
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "propString");
	m_sink->GetNode()->setRemoteProperty(memberId, InPropString);
	FScopeLock Lock(&(_SentData->PropStringMutex));
	_SentData->PropString = InPropString;
}

FTestbed1StructEnumWithArray UTestbed1StructArray2InterfaceOLinkClient::GetPropEnum() const
{
	return PropEnum;
}

void UTestbed1StructArray2InterfaceOLinkClient::SetPropEnum(const FTestbed1StructEnumWithArray& InPropEnum)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear Testbed1 plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));
		return;
	}

	// only send change requests if the value changed -> reduce network load
	if (GetPropEnum() == InPropEnum)
	{
		return;
	}

	// only send change requests if the value wasn't already sent -> reduce network load
	{
		FScopeLock Lock(&(_SentData->PropEnumMutex));
		if (_SentData->PropEnum == InPropEnum)
		{
			return;
		}
	}
	static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "propEnum");
	m_sink->GetNode()->setRemoteProperty(memberId, InPropEnum);
	FScopeLock Lock(&(_SentData->PropEnumMutex));
	_SentData->PropEnum = InPropEnum;
}

TArray<FTestbed1StructBool> UTestbed1StructArray2InterfaceOLinkClient::FuncBool(const FTestbed1StructBoolWithArray& ParamBool)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear Testbed1 plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));

		return TArray<FTestbed1StructBool>();
	}
	TPromise<TArray<FTestbed1StructBool>> Promise;
	Async(EAsyncExecution::ThreadPool,
		[ParamBool, &Promise, this]()
		{
		ApiGear::ObjectLink::InvokeReplyFunc GetStructArray2InterfaceStateFunc = [&Promise](ApiGear::ObjectLink::InvokeReplyArg arg)
		{
			Promise.SetValue(arg.value.get<TArray<FTestbed1StructBool>>());
		};
		static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "funcBool");
		m_sink->GetNode()->invokeRemote(memberId, {ParamBool}, GetStructArray2InterfaceStateFunc);
	});

	return Promise.GetFuture().Get();
}

TArray<FTestbed1StructInt> UTestbed1StructArray2InterfaceOLinkClient::FuncInt(const FTestbed1StructIntWithArray& ParamInt)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear Testbed1 plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));

		return TArray<FTestbed1StructInt>();
	}
	TPromise<TArray<FTestbed1StructInt>> Promise;
	Async(EAsyncExecution::ThreadPool,
		[ParamInt, &Promise, this]()
		{
		ApiGear::ObjectLink::InvokeReplyFunc GetStructArray2InterfaceStateFunc = [&Promise](ApiGear::ObjectLink::InvokeReplyArg arg)
		{
			Promise.SetValue(arg.value.get<TArray<FTestbed1StructInt>>());
		};
		static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "funcInt");
		m_sink->GetNode()->invokeRemote(memberId, {ParamInt}, GetStructArray2InterfaceStateFunc);
	});

	return Promise.GetFuture().Get();
}

TArray<FTestbed1StructFloat> UTestbed1StructArray2InterfaceOLinkClient::FuncFloat(const FTestbed1StructFloatWithArray& ParamFloat)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear Testbed1 plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));

		return TArray<FTestbed1StructFloat>();
	}
	TPromise<TArray<FTestbed1StructFloat>> Promise;
	Async(EAsyncExecution::ThreadPool,
		[ParamFloat, &Promise, this]()
		{
		ApiGear::ObjectLink::InvokeReplyFunc GetStructArray2InterfaceStateFunc = [&Promise](ApiGear::ObjectLink::InvokeReplyArg arg)
		{
			Promise.SetValue(arg.value.get<TArray<FTestbed1StructFloat>>());
		};
		static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "funcFloat");
		m_sink->GetNode()->invokeRemote(memberId, {ParamFloat}, GetStructArray2InterfaceStateFunc);
	});

	return Promise.GetFuture().Get();
}

TArray<FTestbed1StructString> UTestbed1StructArray2InterfaceOLinkClient::FuncString(const FTestbed1StructStringWithArray& ParamString)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear Testbed1 plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));

		return TArray<FTestbed1StructString>();
	}
	TPromise<TArray<FTestbed1StructString>> Promise;
	Async(EAsyncExecution::ThreadPool,
		[ParamString, &Promise, this]()
		{
		ApiGear::ObjectLink::InvokeReplyFunc GetStructArray2InterfaceStateFunc = [&Promise](ApiGear::ObjectLink::InvokeReplyArg arg)
		{
			Promise.SetValue(arg.value.get<TArray<FTestbed1StructString>>());
		};
		static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "funcString");
		m_sink->GetNode()->invokeRemote(memberId, {ParamString}, GetStructArray2InterfaceStateFunc);
	});

	return Promise.GetFuture().Get();
}

TArray<ETestbed1Enum0> UTestbed1StructArray2InterfaceOLinkClient::FuncEnum(const FTestbed1StructEnumWithArray& ParamEnum)
{
	if (!m_sink->IsReady())
	{
		UE_LOG(LogTestbed1StructArray2InterfaceOLinkClient, Error, TEXT("%s has no node. Probably no valid connection or service. Are the ApiGear Testbed1 plugin settings correct? Service set up correctly?"), UTF8_TO_TCHAR(m_sink->olinkObjectName().c_str()));

		return TArray<ETestbed1Enum0>();
	}
	TPromise<TArray<ETestbed1Enum0>> Promise;
	Async(EAsyncExecution::ThreadPool,
		[ParamEnum, &Promise, this]()
		{
		ApiGear::ObjectLink::InvokeReplyFunc GetStructArray2InterfaceStateFunc = [&Promise](ApiGear::ObjectLink::InvokeReplyArg arg)
		{
			Promise.SetValue(arg.value.get<TArray<ETestbed1Enum0>>());
		};
		static const auto memberId = ApiGear::ObjectLink::Name::createMemberId(m_sink->olinkObjectName(), "funcEnum");
		m_sink->GetNode()->invokeRemote(memberId, {ParamEnum}, GetStructArray2InterfaceStateFunc);
	});

	return Promise.GetFuture().Get();
}

bool UTestbed1StructArray2InterfaceOLinkClient::_IsSubscribed() const
{
	return m_sink->IsReady();
}

void UTestbed1StructArray2InterfaceOLinkClient::applyState(const nlohmann::json& fields)
{
	const bool bPropBoolChanged = fields.contains("propBool") && (PropBool != fields["propBool"].get<FTestbed1StructBoolWithArray>());
	if (bPropBoolChanged)
	{
		PropBool = fields["propBool"].get<FTestbed1StructBoolWithArray>();
		_GetSignals()->BroadcastPropBoolChanged(PropBool);
	}

	const bool bPropIntChanged = fields.contains("propInt") && (PropInt != fields["propInt"].get<FTestbed1StructIntWithArray>());
	if (bPropIntChanged)
	{
		PropInt = fields["propInt"].get<FTestbed1StructIntWithArray>();
		_GetSignals()->BroadcastPropIntChanged(PropInt);
	}

	const bool bPropFloatChanged = fields.contains("propFloat") && (PropFloat != fields["propFloat"].get<FTestbed1StructFloatWithArray>());
	if (bPropFloatChanged)
	{
		PropFloat = fields["propFloat"].get<FTestbed1StructFloatWithArray>();
		_GetSignals()->BroadcastPropFloatChanged(PropFloat);
	}

	const bool bPropStringChanged = fields.contains("propString") && (PropString != fields["propString"].get<FTestbed1StructStringWithArray>());
	if (bPropStringChanged)
	{
		PropString = fields["propString"].get<FTestbed1StructStringWithArray>();
		_GetSignals()->BroadcastPropStringChanged(PropString);
	}

	const bool bPropEnumChanged = fields.contains("propEnum") && (PropEnum != fields["propEnum"].get<FTestbed1StructEnumWithArray>());
	if (bPropEnumChanged)
	{
		PropEnum = fields["propEnum"].get<FTestbed1StructEnumWithArray>();
		_GetSignals()->BroadcastPropEnumChanged(PropEnum);
	}
}

void UTestbed1StructArray2InterfaceOLinkClient::emitSignal(const std::string& signalName, const nlohmann::json& args)
{
	if (signalName == "sigBool")
	{
		const FTestbed1StructBoolWithArray& outParamBool = args[0].get<FTestbed1StructBoolWithArray>();
		_GetSignals()->BroadcastSigBoolSignal(outParamBool);
		return;
	}

	if (signalName == "sigInt")
	{
		const FTestbed1StructIntWithArray& outParamInt = args[0].get<FTestbed1StructIntWithArray>();
		_GetSignals()->BroadcastSigIntSignal(outParamInt);
		return;
	}

	if (signalName == "sigFloat")
	{
		const FTestbed1StructFloatWithArray& outParamFloat = args[0].get<FTestbed1StructFloatWithArray>();
		_GetSignals()->BroadcastSigFloatSignal(outParamFloat);
		return;
	}

	if (signalName == "sigString")
	{
		const FTestbed1StructStringWithArray& outParamString = args[0].get<FTestbed1StructStringWithArray>();
		_GetSignals()->BroadcastSigStringSignal(outParamString);
		return;
	}
}
