/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */




#include "Testbed1/Generated/Jni/Testbed1StructArray2InterfaceJniClient.h"
#include "Testbed1/Generated/Jni/Testbed1DataJavaConverter.h"
#include "Testbed1/Generated/api/Testbed1_data.h"

#include "Async/Async.h"
#include "Engine/Engine.h"

#if PLATFORM_ANDROID

#include "Engine/Engine.h"
 #include "Android/AndroidJNI.h"
 #include "Android/AndroidApplication.h"

 #if USE_ANDROID_JNI
 #include <jni.h>
 #endif
#endif

#include <atomic>
#include "HAL/CriticalSection.h"
#include "GenericPlatform/GenericPlatformMisc.h"

/**
   \brief data structure to hold the last sent property values
*/


class UTestbed1StructArray2InterfaceJniClientMethodHelper
{
public:
    template <typename ResultType>
    FGuid StorePromise(TPromise<ResultType>& Promise);

    template <typename ResultType>
    bool FulfillPromise(const FGuid& Id, const ResultType& Value);
private:
    TMap<FGuid, void*> ReplyPromisesMap;
    FCriticalSection ReplyPromisesMapCS;

};

namespace {

    UTestbed1StructArray2InterfaceJniClient* gUTestbed1StructArray2InterfaceJniClientHandle = nullptr;
    TFunction<void(bool)> gUTestbed1StructArray2InterfaceJniClientnotifyIsReady = [](bool value) { (void)value; UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("notifyIsReady used but not set ")); };
    TFunction<void(FTestbed1StructBoolWithArray)> gUTestbed1StructArray2InterfaceJniClientOnPropBoolChangedEmpty = [](FTestbed1StructBoolWithArray value) { (void)value; UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("onPropBoolChanged used but not set ")); };
    TFunction<void(FTestbed1StructBoolWithArray)> gUTestbed1StructArray2InterfaceJniClientOnPropBoolChanged = gUTestbed1StructArray2InterfaceJniClientOnPropBoolChangedEmpty;
    TFunction<void(FTestbed1StructIntWithArray)> gUTestbed1StructArray2InterfaceJniClientOnPropIntChangedEmpty = [](FTestbed1StructIntWithArray value) { (void)value; UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("onPropIntChanged used but not set ")); };
    TFunction<void(FTestbed1StructIntWithArray)> gUTestbed1StructArray2InterfaceJniClientOnPropIntChanged = gUTestbed1StructArray2InterfaceJniClientOnPropIntChangedEmpty;
    TFunction<void(FTestbed1StructFloatWithArray)> gUTestbed1StructArray2InterfaceJniClientOnPropFloatChangedEmpty = [](FTestbed1StructFloatWithArray value) { (void)value; UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("onPropFloatChanged used but not set ")); };
    TFunction<void(FTestbed1StructFloatWithArray)> gUTestbed1StructArray2InterfaceJniClientOnPropFloatChanged = gUTestbed1StructArray2InterfaceJniClientOnPropFloatChangedEmpty;
    TFunction<void(FTestbed1StructStringWithArray)> gUTestbed1StructArray2InterfaceJniClientOnPropStringChangedEmpty = [](FTestbed1StructStringWithArray value) { (void)value; UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("onPropStringChanged used but not set ")); };
    TFunction<void(FTestbed1StructStringWithArray)> gUTestbed1StructArray2InterfaceJniClientOnPropStringChanged = gUTestbed1StructArray2InterfaceJniClientOnPropStringChangedEmpty;
    TFunction<void(FTestbed1StructEnumWithArray)> gUTestbed1StructArray2InterfaceJniClientOnPropEnumChangedEmpty = [](FTestbed1StructEnumWithArray value) { (void)value; UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("onPropEnumChanged used but not set ")); };
    TFunction<void(FTestbed1StructEnumWithArray)> gUTestbed1StructArray2InterfaceJniClientOnPropEnumChanged = gUTestbed1StructArray2InterfaceJniClientOnPropEnumChangedEmpty;

    UTestbed1StructArray2InterfaceJniClientMethodHelper  gUTestbed1StructArray2InterfaceJniClientmethodHelper;

}


DEFINE_LOG_CATEGORY(LogTestbed1StructArray2InterfaceClient_JNI);

UTestbed1StructArray2InterfaceJniClient::UTestbed1StructArray2InterfaceJniClient()
{
#if !(PLATFORM_ANDROID && USE_ANDROID_JNI)
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("This is class that adapts the usage with android and jni, but seems to be used on different target. Make sure  you are using it with Android"));
#endif
}

UTestbed1StructArray2InterfaceJniClient::UTestbed1StructArray2InterfaceJniClient(FVTableHelper& Helper)
    : Super(Helper)
{
}
UTestbed1StructArray2InterfaceJniClient::~UTestbed1StructArray2InterfaceJniClient() = default;

void UTestbed1StructArray2InterfaceJniClient::Initialize(FSubsystemCollectionBase& Collection)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Init"));
    Super::Initialize(Collection);

    gUTestbed1StructArray2InterfaceJniClientHandle = this;
    gUTestbed1StructArray2InterfaceJniClientnotifyIsReady = [this](bool value) {
         b_isReady = value;
         AsyncTask(ENamedThreads::GameThread, [this]()
             {
                 _ConnectionStatusChangedBP.Broadcast(b_isReady);
                 _ConnectionStatusChanged.Broadcast(b_isReady);
             });
        };
	gUTestbed1StructArray2InterfaceJniClientOnPropBoolChanged = [this](const FTestbed1StructBoolWithArray& InPropBool)
    {
         PropBool = InPropBool;
         _GetPublisher()->BroadcastPropBoolChanged(PropBool);
    };
	gUTestbed1StructArray2InterfaceJniClientOnPropIntChanged = [this](const FTestbed1StructIntWithArray& InPropInt)
    {
         PropInt = InPropInt;
         _GetPublisher()->BroadcastPropIntChanged(PropInt);
    };
	gUTestbed1StructArray2InterfaceJniClientOnPropFloatChanged = [this](const FTestbed1StructFloatWithArray& InPropFloat)
    {
         PropFloat = InPropFloat;
         _GetPublisher()->BroadcastPropFloatChanged(PropFloat);
    };
	gUTestbed1StructArray2InterfaceJniClientOnPropStringChanged = [this](const FTestbed1StructStringWithArray& InPropString)
    {
         PropString = InPropString;
         _GetPublisher()->BroadcastPropStringChanged(PropString);
    };
	gUTestbed1StructArray2InterfaceJniClientOnPropEnumChanged = [this](const FTestbed1StructEnumWithArray& InPropEnum)
    {
         PropEnum = InPropEnum;
         _GetPublisher()->BroadcastPropEnumChanged(PropEnum);
    };

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    m_javaJniClientClass = FAndroidApplication::FindJavaClassGlobalRef("testbed1/testbed1jniclient/StructArray2InterfaceJniClient");
    jmethodID constructor = Env->GetMethodID(m_javaJniClientClass, "<init>", "()V");
    jobject localRef = Env->NewObject(m_javaJniClientClass, constructor);
    m_javaJniClientInstance = Env->NewGlobalRef(localRef);
    FAndroidApplication::GetJavaEnv()->DeleteLocalRef(localRef);
#endif
}

void UTestbed1StructArray2InterfaceJniClient::Deinitialize()
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("deinit"));
    _unbind();
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    Env->DeleteGlobalRef(m_javaJniClientInstance);
    m_javaJniClientClass = nullptr;
    m_javaJniClientInstance = nullptr;
#endif

    gUTestbed1StructArray2InterfaceJniClientnotifyIsReady = [](bool value){(void)value; UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("notifyIsReady used but not set "));};
    gUTestbed1StructArray2InterfaceJniClientOnPropBoolChanged = gUTestbed1StructArray2InterfaceJniClientOnPropBoolChangedEmpty;
    gUTestbed1StructArray2InterfaceJniClientOnPropIntChanged = gUTestbed1StructArray2InterfaceJniClientOnPropIntChangedEmpty;
    gUTestbed1StructArray2InterfaceJniClientOnPropFloatChanged = gUTestbed1StructArray2InterfaceJniClientOnPropFloatChangedEmpty;
    gUTestbed1StructArray2InterfaceJniClientOnPropStringChanged = gUTestbed1StructArray2InterfaceJniClientOnPropStringChangedEmpty;
    gUTestbed1StructArray2InterfaceJniClientOnPropEnumChanged = gUTestbed1StructArray2InterfaceJniClientOnPropEnumChangedEmpty;

    gUTestbed1StructArray2InterfaceJniClientHandle = nullptr;
    Super::Deinitialize();
}
FTestbed1StructBoolWithArray UTestbed1StructArray2InterfaceJniClient::GetPropBool() const
{
    return PropBool;
}
void UTestbed1StructArray2InterfaceJniClient::SetPropBool(const FTestbed1StructBoolWithArray& InPropBool)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropBool"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropBool() == InPropBool )
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Property propBool to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropBool (Ltestbed1/testbed1_api/StructBoolWithArray;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropBool", "(Ltestbed1/testbed1_api/StructBoolWithArray;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropBool (Ltestbed1/testbed1_api/StructBoolWithArray;)V not found"));
            return;
        }
        
        jobject jlocal_PropBool = Testbed1DataJavaConverter::makeJavaStructBoolWithArray(Env, InPropBool);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropBool);
        Env->DeleteLocalRef(jlocal_PropBool);
    }
#endif

}
FTestbed1StructIntWithArray UTestbed1StructArray2InterfaceJniClient::GetPropInt() const
{
    return PropInt;
}
void UTestbed1StructArray2InterfaceJniClient::SetPropInt(const FTestbed1StructIntWithArray& InPropInt)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropInt"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropInt() == InPropInt )
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Property propInt to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropInt (Ltestbed1/testbed1_api/StructIntWithArray;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropInt", "(Ltestbed1/testbed1_api/StructIntWithArray;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropInt (Ltestbed1/testbed1_api/StructIntWithArray;)V not found"));
            return;
        }
        
        jobject jlocal_PropInt = Testbed1DataJavaConverter::makeJavaStructIntWithArray(Env, InPropInt);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropInt);
        Env->DeleteLocalRef(jlocal_PropInt);
    }
#endif

}
FTestbed1StructFloatWithArray UTestbed1StructArray2InterfaceJniClient::GetPropFloat() const
{
    return PropFloat;
}
void UTestbed1StructArray2InterfaceJniClient::SetPropFloat(const FTestbed1StructFloatWithArray& InPropFloat)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropFloat"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropFloat() == InPropFloat )
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Property propFloat to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropFloat (Ltestbed1/testbed1_api/StructFloatWithArray;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropFloat", "(Ltestbed1/testbed1_api/StructFloatWithArray;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropFloat (Ltestbed1/testbed1_api/StructFloatWithArray;)V not found"));
            return;
        }
        
        jobject jlocal_PropFloat = Testbed1DataJavaConverter::makeJavaStructFloatWithArray(Env, InPropFloat);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropFloat);
        Env->DeleteLocalRef(jlocal_PropFloat);
    }
#endif

}
FTestbed1StructStringWithArray UTestbed1StructArray2InterfaceJniClient::GetPropString() const
{
    return PropString;
}
void UTestbed1StructArray2InterfaceJniClient::SetPropString(const FTestbed1StructStringWithArray& InPropString)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropString"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropString() == InPropString )
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Property propString to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropString (Ltestbed1/testbed1_api/StructStringWithArray;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropString", "(Ltestbed1/testbed1_api/StructStringWithArray;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropString (Ltestbed1/testbed1_api/StructStringWithArray;)V not found"));
            return;
        }
        
        jobject jlocal_PropString = Testbed1DataJavaConverter::makeJavaStructStringWithArray(Env, InPropString);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropString);
        Env->DeleteLocalRef(jlocal_PropString);
    }
#endif

}
FTestbed1StructEnumWithArray UTestbed1StructArray2InterfaceJniClient::GetPropEnum() const
{
    return PropEnum;
}
void UTestbed1StructArray2InterfaceJniClient::SetPropEnum(const FTestbed1StructEnumWithArray& InPropEnum)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropEnum"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropEnum() == InPropEnum )
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Property propEnum to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropEnum (Ltestbed1/testbed1_api/StructEnumWithArray;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropEnum", "(Ltestbed1/testbed1_api/StructEnumWithArray;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:setPropEnum (Ltestbed1/testbed1_api/StructEnumWithArray;)V not found"));
            return;
        }
        
        jobject jlocal_PropEnum = Testbed1DataJavaConverter::makeJavaStructEnumWithArray(Env, InPropEnum);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropEnum);
        Env->DeleteLocalRef(jlocal_PropEnum);
    }
#endif

}
TArray<FTestbed1StructBool> UTestbed1StructArray2InterfaceJniClient::FuncBool(const FTestbed1StructBoolWithArray& InParamBool)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcBool "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<FTestbed1StructBool>();
    }
    TPromise<TArray<FTestbed1StructBool>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcBoolAsync:(Ljava/lang/String;Ltestbed1/testbed1_api/StructBoolWithArray;)V CLASS not found"));
        return TArray<FTestbed1StructBool>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcBoolAsync", "(Ljava/lang/String;Ltestbed1/testbed1_api/StructBoolWithArray;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTestbed1StructArray2InterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobject jlocal_ParamBool = Testbed1DataJavaConverter::makeJavaStructBoolWithArray(Env, InParamBool);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamBool);
        Env->DeleteLocalRef(jlocal_ParamBool);
    }
    else
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcBoolAsync (Ljava/lang/String;Ltestbed1/testbed1_api/StructBoolWithArray;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<FTestbed1StructInt> UTestbed1StructArray2InterfaceJniClient::FuncInt(const FTestbed1StructIntWithArray& InParamInt)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcInt "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<FTestbed1StructInt>();
    }
    TPromise<TArray<FTestbed1StructInt>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcIntAsync:(Ljava/lang/String;Ltestbed1/testbed1_api/StructIntWithArray;)V CLASS not found"));
        return TArray<FTestbed1StructInt>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcIntAsync", "(Ljava/lang/String;Ltestbed1/testbed1_api/StructIntWithArray;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTestbed1StructArray2InterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobject jlocal_ParamInt = Testbed1DataJavaConverter::makeJavaStructIntWithArray(Env, InParamInt);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamInt);
        Env->DeleteLocalRef(jlocal_ParamInt);
    }
    else
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcIntAsync (Ljava/lang/String;Ltestbed1/testbed1_api/StructIntWithArray;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<FTestbed1StructFloat> UTestbed1StructArray2InterfaceJniClient::FuncFloat(const FTestbed1StructFloatWithArray& InParamFloat)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcFloat "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<FTestbed1StructFloat>();
    }
    TPromise<TArray<FTestbed1StructFloat>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcFloatAsync:(Ljava/lang/String;Ltestbed1/testbed1_api/StructFloatWithArray;)V CLASS not found"));
        return TArray<FTestbed1StructFloat>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcFloatAsync", "(Ljava/lang/String;Ltestbed1/testbed1_api/StructFloatWithArray;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTestbed1StructArray2InterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobject jlocal_ParamFloat = Testbed1DataJavaConverter::makeJavaStructFloatWithArray(Env, InParamFloat);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamFloat);
        Env->DeleteLocalRef(jlocal_ParamFloat);
    }
    else
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcFloatAsync (Ljava/lang/String;Ltestbed1/testbed1_api/StructFloatWithArray;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<FTestbed1StructString> UTestbed1StructArray2InterfaceJniClient::FuncString(const FTestbed1StructStringWithArray& InParamString)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcString "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<FTestbed1StructString>();
    }
    TPromise<TArray<FTestbed1StructString>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcStringAsync:(Ljava/lang/String;Ltestbed1/testbed1_api/StructStringWithArray;)V CLASS not found"));
        return TArray<FTestbed1StructString>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcStringAsync", "(Ljava/lang/String;Ltestbed1/testbed1_api/StructStringWithArray;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTestbed1StructArray2InterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobject jlocal_ParamString = Testbed1DataJavaConverter::makeJavaStructStringWithArray(Env, InParamString);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamString);
        Env->DeleteLocalRef(jlocal_ParamString);
    }
    else
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcStringAsync (Ljava/lang/String;Ltestbed1/testbed1_api/StructStringWithArray;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<ETestbed1Enum0> UTestbed1StructArray2InterfaceJniClient::FuncEnum(const FTestbed1StructEnumWithArray& InParamEnum)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcEnum "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<ETestbed1Enum0>();
    }
    TPromise<TArray<ETestbed1Enum0>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcEnumAsync:(Ljava/lang/String;Ltestbed1/testbed1_api/StructEnumWithArray;)V CLASS not found"));
        return TArray<ETestbed1Enum0>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcEnumAsync", "(Ljava/lang/String;Ltestbed1/testbed1_api/StructEnumWithArray;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTestbed1StructArray2InterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobject jlocal_ParamEnum = Testbed1DataJavaConverter::makeJavaStructEnumWithArray(Env, InParamEnum);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamEnum);
        Env->DeleteLocalRef(jlocal_ParamEnum);
    }
    else
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:funcEnumAsync (Ljava/lang/String;Ltestbed1/testbed1_api/StructEnumWithArray;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}

bool UTestbed1StructArray2InterfaceJniClient::_bindToService(FString servicePackage, FString connectionId)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Request JNI connection to %s"), *servicePackage);
    if (b_isReady)
    {
        if (servicePackage == m_lastBoundServicePackage && connectionId == m_lastConnectionId)
        {
            UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("Already bound"));
            return true;
        }
        else
        {
            _unbind();
        }
    }
    m_lastBoundServicePackage = servicePackage;
    m_lastConnectionId = connectionId;
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:bind:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z CLASS not found"));
        return false;
    }
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "bind", "(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z");
    if (MethodID != nullptr)
    {
        jobject Activity = FJavaWrapper::GameActivityThis;
        auto jPackage = FJavaHelper::ToJavaString(Env, servicePackage);
        auto jConnId = FJavaHelper::ToJavaString(Env, connectionId);
        auto res = FJavaWrapper::CallBooleanMethod(Env, m_javaJniClientInstance, MethodID, Activity, *jPackage, *jConnId);
        return res;
    }
    else
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:bind (Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z not found"));
    }
#endif
    return false;
}

void UTestbed1StructArray2InterfaceJniClient::_unbind()
{

    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Request JNI unbind"));

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:unbind:()V CLASS not found"));
        return;
    }
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "unbind", "()V");
    if (MethodID != nullptr)
    {
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID);
    }
    else
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArray2InterfaceJniClient:unbind ()V not found"));
    }
#endif
}

bool UTestbed1StructArray2InterfaceJniClient::_IsReady() const
{
    return b_isReady;
}

#if PLATFORM_ANDROID && USE_ANDROID_JNI
JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropBoolChanged(JNIEnv* Env, jclass Clazz,jobject propBool)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropBoolChanged"));
    if (gUTestbed1StructArray2InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropBoolChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed1StructBoolWithArray local_prop_bool = FTestbed1StructBoolWithArray();
    Testbed1DataJavaConverter::fillStructBoolWithArray(Env, propBool, local_prop_bool);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_bool= MoveTemp(local_prop_bool)]()
    {
        gUTestbed1StructArray2InterfaceJniClientOnPropBoolChanged(plocal_prop_bool);
    });
}
JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropIntChanged(JNIEnv* Env, jclass Clazz,jobject propInt)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropIntChanged"));
    if (gUTestbed1StructArray2InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropIntChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed1StructIntWithArray local_prop_int = FTestbed1StructIntWithArray();
    Testbed1DataJavaConverter::fillStructIntWithArray(Env, propInt, local_prop_int);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_int= MoveTemp(local_prop_int)]()
    {
        gUTestbed1StructArray2InterfaceJniClientOnPropIntChanged(plocal_prop_int);
    });
}
JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropFloatChanged(JNIEnv* Env, jclass Clazz,jobject propFloat)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropFloatChanged"));
    if (gUTestbed1StructArray2InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropFloatChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed1StructFloatWithArray local_prop_float = FTestbed1StructFloatWithArray();
    Testbed1DataJavaConverter::fillStructFloatWithArray(Env, propFloat, local_prop_float);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_float= MoveTemp(local_prop_float)]()
    {
        gUTestbed1StructArray2InterfaceJniClientOnPropFloatChanged(plocal_prop_float);
    });
}
JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropStringChanged(JNIEnv* Env, jclass Clazz,jobject propString)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropStringChanged"));
    if (gUTestbed1StructArray2InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropStringChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed1StructStringWithArray local_prop_string = FTestbed1StructStringWithArray();
    Testbed1DataJavaConverter::fillStructStringWithArray(Env, propString, local_prop_string);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_string= MoveTemp(local_prop_string)]()
    {
        gUTestbed1StructArray2InterfaceJniClientOnPropStringChanged(plocal_prop_string);
    });
}
JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropEnumChanged(JNIEnv* Env, jclass Clazz,jobject propEnum)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropEnumChanged"));
    if (gUTestbed1StructArray2InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnPropEnumChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed1StructEnumWithArray local_prop_enum = FTestbed1StructEnumWithArray();
    Testbed1DataJavaConverter::fillStructEnumWithArray(Env, propEnum, local_prop_enum);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_enum= MoveTemp(local_prop_enum)]()
    {
        gUTestbed1StructArray2InterfaceJniClientOnPropEnumChanged(plocal_prop_enum);
    });
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigBool(JNIEnv* Env, jclass Clazz, jobject paramBool)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigBool"));
    if (gUTestbed1StructArray2InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigBool: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed1StructBoolWithArray local_param_bool = FTestbed1StructBoolWithArray();
    Testbed1DataJavaConverter::fillStructBoolWithArray(Env, paramBool, local_param_bool);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_bool= MoveTemp(local_param_bool)]()
        {
            if (gUTestbed1StructArray2InterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigBool: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTestbed1StructArray2InterfaceJniClientHandle->_GetPublisher()->BroadcastSigBoolSignal( plocal_param_bool);
        });
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigInt(JNIEnv* Env, jclass Clazz, jobject paramInt)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigInt"));
    if (gUTestbed1StructArray2InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigInt: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed1StructIntWithArray local_param_int = FTestbed1StructIntWithArray();
    Testbed1DataJavaConverter::fillStructIntWithArray(Env, paramInt, local_param_int);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_int= MoveTemp(local_param_int)]()
        {
            if (gUTestbed1StructArray2InterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigInt: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTestbed1StructArray2InterfaceJniClientHandle->_GetPublisher()->BroadcastSigIntSignal( plocal_param_int);
        });
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigFloat(JNIEnv* Env, jclass Clazz, jobject paramFloat)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigFloat"));
    if (gUTestbed1StructArray2InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigFloat: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed1StructFloatWithArray local_param_float = FTestbed1StructFloatWithArray();
    Testbed1DataJavaConverter::fillStructFloatWithArray(Env, paramFloat, local_param_float);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_float= MoveTemp(local_param_float)]()
        {
            if (gUTestbed1StructArray2InterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigFloat: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTestbed1StructArray2InterfaceJniClientHandle->_GetPublisher()->BroadcastSigFloatSignal( plocal_param_float);
        });
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigString(JNIEnv* Env, jclass Clazz, jobject paramString)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigString"));
    if (gUTestbed1StructArray2InterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigString: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    FTestbed1StructStringWithArray local_param_string = FTestbed1StructStringWithArray();
    Testbed1DataJavaConverter::fillStructStringWithArray(Env, paramString, local_param_string);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_string= MoveTemp(local_param_string)]()
        {
            if (gUTestbed1StructArray2InterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnSigString: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTestbed1StructArray2InterfaceJniClientHandle->_GetPublisher()->BroadcastSigStringSignal( plocal_param_string);
        });
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnFuncBoolResult(JNIEnv* Env, jclass Clazz, jobjectArray result, jstring callId)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnFuncBoolResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<FTestbed1StructBool> cpp_result = TArray<FTestbed1StructBool>();
    Testbed1DataJavaConverter::fillStructBoolArray(Env, result, cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTestbed1StructArray2InterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnFuncIntResult(JNIEnv* Env, jclass Clazz, jobjectArray result, jstring callId)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnFuncIntResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<FTestbed1StructInt> cpp_result = TArray<FTestbed1StructInt>();
    Testbed1DataJavaConverter::fillStructIntArray(Env, result, cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTestbed1StructArray2InterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnFuncFloatResult(JNIEnv* Env, jclass Clazz, jobjectArray result, jstring callId)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnFuncFloatResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<FTestbed1StructFloat> cpp_result = TArray<FTestbed1StructFloat>();
    Testbed1DataJavaConverter::fillStructFloatArray(Env, result, cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTestbed1StructArray2InterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnFuncStringResult(JNIEnv* Env, jclass Clazz, jobjectArray result, jstring callId)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnFuncStringResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<FTestbed1StructString> cpp_result = TArray<FTestbed1StructString>();
    Testbed1DataJavaConverter::fillStructStringArray(Env, result, cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTestbed1StructArray2InterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnFuncEnumResult(JNIEnv* Env, jclass Clazz, jobjectArray result, jstring callId)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeOnFuncEnumResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<ETestbed1Enum0> cpp_result = TArray<ETestbed1Enum0>();
    Testbed1DataJavaConverter::fillEnum0Array(Env, result, cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTestbed1StructArray2InterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArray2InterfaceJniClient_nativeIsReady(JNIEnv* Env, jclass Clazz, jboolean value)
{
    AsyncTask(ENamedThreads::GameThread, [value]()
        {
            gUTestbed1StructArray2InterfaceJniClientnotifyIsReady(value);
        });
}
#endif


template <typename ResultType>
FGuid UTestbed1StructArray2InterfaceJniClientMethodHelper::StorePromise(TPromise<ResultType>& Promise)
{
    FGuid Id = FGuid::NewGuid();
    FScopeLock Lock(&ReplyPromisesMapCS);
    ReplyPromisesMap.Add(Id, &Promise);
    //TODO invalid id if sth goes wrong + log + checking
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT(" method store id %s"), *(Id.ToString(EGuidFormats::Digits)));
    return Id;
}

template <typename ResultType>
bool UTestbed1StructArray2InterfaceJniClientMethodHelper::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
    UE_LOG(LogTestbed1StructArray2InterfaceClient_JNI, Verbose, TEXT(" method resolving id %s"), *(Id.ToString(EGuidFormats::Digits)));
    TPromise<ResultType>* PromisePtr = nullptr;

    {
        FScopeLock Lock(&ReplyPromisesMapCS);
        if (auto** Found = ReplyPromisesMap.Find(Id))
        {
            PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
            ReplyPromisesMap.Remove(Id);
        }
    }

    if (PromisePtr)
    {
        AsyncTask(ENamedThreads::GameThread, [Value, PromisePtr]()
            {
                PromisePtr->SetValue(Value);
            });
        return true;

    }
    return false;
}
template FGuid UTestbed1StructArray2InterfaceJniClientMethodHelper::StorePromise<TArray<ETestbed1Enum0>>(TPromise<TArray<ETestbed1Enum0>>& Promise);
template bool UTestbed1StructArray2InterfaceJniClientMethodHelper::FulfillPromise<TArray<ETestbed1Enum0>>(const FGuid& Id, const TArray<ETestbed1Enum0>& Value);
template FGuid UTestbed1StructArray2InterfaceJniClientMethodHelper::StorePromise<TArray<FTestbed1StructBool>>(TPromise<TArray<FTestbed1StructBool>>& Promise);
template bool UTestbed1StructArray2InterfaceJniClientMethodHelper::FulfillPromise<TArray<FTestbed1StructBool>>(const FGuid& Id, const TArray<FTestbed1StructBool>& Value);
template FGuid UTestbed1StructArray2InterfaceJniClientMethodHelper::StorePromise<TArray<FTestbed1StructFloat>>(TPromise<TArray<FTestbed1StructFloat>>& Promise);
template bool UTestbed1StructArray2InterfaceJniClientMethodHelper::FulfillPromise<TArray<FTestbed1StructFloat>>(const FGuid& Id, const TArray<FTestbed1StructFloat>& Value);
template FGuid UTestbed1StructArray2InterfaceJniClientMethodHelper::StorePromise<TArray<FTestbed1StructInt>>(TPromise<TArray<FTestbed1StructInt>>& Promise);
template bool UTestbed1StructArray2InterfaceJniClientMethodHelper::FulfillPromise<TArray<FTestbed1StructInt>>(const FGuid& Id, const TArray<FTestbed1StructInt>& Value);
template FGuid UTestbed1StructArray2InterfaceJniClientMethodHelper::StorePromise<TArray<FTestbed1StructString>>(TPromise<TArray<FTestbed1StructString>>& Promise);
template bool UTestbed1StructArray2InterfaceJniClientMethodHelper::FulfillPromise<TArray<FTestbed1StructString>>(const FGuid& Id, const TArray<FTestbed1StructString>& Value);

