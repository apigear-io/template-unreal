/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

////////////////////////////////
// WARNING AUTOGENERATED
// DO NOT MODIFY
///////////////////////////////

/**
Copyright 2021 ApiGear UG
Copyright 2021 Epic Games, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */




#include "Testbed1/Generated/Jni/Testbed1StructArrayInterfaceJniClient.h"
#include "Testbed1/Generated/Jni/Testbed1DataJavaConverter.h"
#include "Testbed1/Generated/api/Testbed1_data.h"

#include "Async/Async.h"
#include "Engine/Engine.h"

#if PLATFORM_ANDROID

#include "Engine/Engine.h"
 #include "Android/AndroidJNI.h"
 #include "Android/AndroidApplication.h"

 #if USE_ANDROID_JNI
 #include <jni.h>
 #endif
#endif

#include <atomic>
#include "HAL/CriticalSection.h"
#include "GenericPlatform/GenericPlatformMisc.h"

/**
   \brief data structure to hold the last sent property values
*/


class UTestbed1StructArrayInterfaceJniClientMethodHelper
{
public:
    template <typename ResultType>
    FGuid StorePromise(TPromise<ResultType>& Promise);

    template <typename ResultType>
    bool FulfillPromise(const FGuid& Id, const ResultType& Value);
private:
    TMap<FGuid, void*> ReplyPromisesMap;
    FCriticalSection ReplyPromisesMapCS;

};

namespace {

    UTestbed1StructArrayInterfaceJniClient* gUTestbed1StructArrayInterfaceJniClientHandle = nullptr;
    TFunction<void(bool)> gUTestbed1StructArrayInterfaceJniClientnotifyIsReady = [](bool value) { (void)value; UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("notifyIsReady used but not set ")); };
    TFunction<void(TArray<FTestbed1StructBool>)> gUTestbed1StructArrayInterfaceJniClientOnPropBoolChangedEmpty = [](TArray<FTestbed1StructBool> value) { (void)value; UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("onPropBoolChanged used but not set ")); };
    TFunction<void(TArray<FTestbed1StructBool>)> gUTestbed1StructArrayInterfaceJniClientOnPropBoolChanged = gUTestbed1StructArrayInterfaceJniClientOnPropBoolChangedEmpty;
    TFunction<void(TArray<FTestbed1StructInt>)> gUTestbed1StructArrayInterfaceJniClientOnPropIntChangedEmpty = [](TArray<FTestbed1StructInt> value) { (void)value; UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("onPropIntChanged used but not set ")); };
    TFunction<void(TArray<FTestbed1StructInt>)> gUTestbed1StructArrayInterfaceJniClientOnPropIntChanged = gUTestbed1StructArrayInterfaceJniClientOnPropIntChangedEmpty;
    TFunction<void(TArray<FTestbed1StructFloat>)> gUTestbed1StructArrayInterfaceJniClientOnPropFloatChangedEmpty = [](TArray<FTestbed1StructFloat> value) { (void)value; UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("onPropFloatChanged used but not set ")); };
    TFunction<void(TArray<FTestbed1StructFloat>)> gUTestbed1StructArrayInterfaceJniClientOnPropFloatChanged = gUTestbed1StructArrayInterfaceJniClientOnPropFloatChangedEmpty;
    TFunction<void(TArray<FTestbed1StructString>)> gUTestbed1StructArrayInterfaceJniClientOnPropStringChangedEmpty = [](TArray<FTestbed1StructString> value) { (void)value; UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("onPropStringChanged used but not set ")); };
    TFunction<void(TArray<FTestbed1StructString>)> gUTestbed1StructArrayInterfaceJniClientOnPropStringChanged = gUTestbed1StructArrayInterfaceJniClientOnPropStringChangedEmpty;
    TFunction<void(TArray<ETestbed1Enum0>)> gUTestbed1StructArrayInterfaceJniClientOnPropEnumChangedEmpty = [](TArray<ETestbed1Enum0> value) { (void)value; UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("onPropEnumChanged used but not set ")); };
    TFunction<void(TArray<ETestbed1Enum0>)> gUTestbed1StructArrayInterfaceJniClientOnPropEnumChanged = gUTestbed1StructArrayInterfaceJniClientOnPropEnumChangedEmpty;

    UTestbed1StructArrayInterfaceJniClientMethodHelper  gUTestbed1StructArrayInterfaceJniClientmethodHelper;

}


DEFINE_LOG_CATEGORY(LogTestbed1StructArrayInterfaceClient_JNI);

UTestbed1StructArrayInterfaceJniClient::UTestbed1StructArrayInterfaceJniClient()
{
#if !(PLATFORM_ANDROID && USE_ANDROID_JNI)
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("This is class that adapts the usage with android and jni, but seems to be used on different target. Make sure  you are using it with Android"));
#endif
}

UTestbed1StructArrayInterfaceJniClient::UTestbed1StructArrayInterfaceJniClient(FVTableHelper& Helper)
    : Super(Helper)
{
}
UTestbed1StructArrayInterfaceJniClient::~UTestbed1StructArrayInterfaceJniClient() = default;

void UTestbed1StructArrayInterfaceJniClient::Initialize(FSubsystemCollectionBase& Collection)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Init"));
    Super::Initialize(Collection);

    gUTestbed1StructArrayInterfaceJniClientHandle = this;
    gUTestbed1StructArrayInterfaceJniClientnotifyIsReady = [this](bool value) {
         b_isReady = value;
         AsyncTask(ENamedThreads::GameThread, [this]()
             {
                 _ConnectionStatusChangedBP.Broadcast(b_isReady);
                 _ConnectionStatusChanged.Broadcast(b_isReady);
             });
        };
	gUTestbed1StructArrayInterfaceJniClientOnPropBoolChanged = [this](const TArray<FTestbed1StructBool>& InPropBool)
    {
         PropBool = InPropBool;
         _GetPublisher()->BroadcastPropBoolChanged(PropBool);
    };
	gUTestbed1StructArrayInterfaceJniClientOnPropIntChanged = [this](const TArray<FTestbed1StructInt>& InPropInt)
    {
         PropInt = InPropInt;
         _GetPublisher()->BroadcastPropIntChanged(PropInt);
    };
	gUTestbed1StructArrayInterfaceJniClientOnPropFloatChanged = [this](const TArray<FTestbed1StructFloat>& InPropFloat)
    {
         PropFloat = InPropFloat;
         _GetPublisher()->BroadcastPropFloatChanged(PropFloat);
    };
	gUTestbed1StructArrayInterfaceJniClientOnPropStringChanged = [this](const TArray<FTestbed1StructString>& InPropString)
    {
         PropString = InPropString;
         _GetPublisher()->BroadcastPropStringChanged(PropString);
    };
	gUTestbed1StructArrayInterfaceJniClientOnPropEnumChanged = [this](const TArray<ETestbed1Enum0>& InPropEnum)
    {
         PropEnum = InPropEnum;
         _GetPublisher()->BroadcastPropEnumChanged(PropEnum);
    };

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    m_javaJniClientClass = FAndroidApplication::FindJavaClassGlobalRef("testbed1/testbed1jniclient/StructArrayInterfaceJniClient");
    jmethodID constructor = Env->GetMethodID(m_javaJniClientClass, "<init>", "()V");
    jobject localRef = Env->NewObject(m_javaJniClientClass, constructor);
    m_javaJniClientInstance = Env->NewGlobalRef(localRef);
    FAndroidApplication::GetJavaEnv()->DeleteLocalRef(localRef);
#endif
}

void UTestbed1StructArrayInterfaceJniClient::Deinitialize()
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("deinit"));
    _unbind();
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    Env->DeleteGlobalRef(m_javaJniClientInstance);
    m_javaJniClientClass = nullptr;
    m_javaJniClientInstance = nullptr;
#endif

    gUTestbed1StructArrayInterfaceJniClientnotifyIsReady = [](bool value){(void)value; UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("notifyIsReady used but not set "));};
    gUTestbed1StructArrayInterfaceJniClientOnPropBoolChanged = gUTestbed1StructArrayInterfaceJniClientOnPropBoolChangedEmpty;
    gUTestbed1StructArrayInterfaceJniClientOnPropIntChanged = gUTestbed1StructArrayInterfaceJniClientOnPropIntChangedEmpty;
    gUTestbed1StructArrayInterfaceJniClientOnPropFloatChanged = gUTestbed1StructArrayInterfaceJniClientOnPropFloatChangedEmpty;
    gUTestbed1StructArrayInterfaceJniClientOnPropStringChanged = gUTestbed1StructArrayInterfaceJniClientOnPropStringChangedEmpty;
    gUTestbed1StructArrayInterfaceJniClientOnPropEnumChanged = gUTestbed1StructArrayInterfaceJniClientOnPropEnumChangedEmpty;

    gUTestbed1StructArrayInterfaceJniClientHandle = nullptr;
    Super::Deinitialize();
}
TArray<FTestbed1StructBool> UTestbed1StructArrayInterfaceJniClient::GetPropBool() const
{
    return PropBool;
}
void UTestbed1StructArrayInterfaceJniClient::SetPropBool(const TArray<FTestbed1StructBool>& InPropBool)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropBool"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropBool() == InPropBool )
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Property propBool to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropBool ([Ltestbed1/testbed1_api/StructBool;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropBool", "([Ltestbed1/testbed1_api/StructBool;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropBool ([Ltestbed1/testbed1_api/StructBool;)V not found"));
            return;
        }
        
        jobjectArray jlocal_PropBool = Testbed1DataJavaConverter::makeJavaStructBoolArray(Env, InPropBool);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropBool);
        Env->DeleteLocalRef(jlocal_PropBool);
    }
#endif

}
TArray<FTestbed1StructInt> UTestbed1StructArrayInterfaceJniClient::GetPropInt() const
{
    return PropInt;
}
void UTestbed1StructArrayInterfaceJniClient::SetPropInt(const TArray<FTestbed1StructInt>& InPropInt)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropInt"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropInt() == InPropInt )
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Property propInt to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropInt ([Ltestbed1/testbed1_api/StructInt;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropInt", "([Ltestbed1/testbed1_api/StructInt;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropInt ([Ltestbed1/testbed1_api/StructInt;)V not found"));
            return;
        }
        
        jobjectArray jlocal_PropInt = Testbed1DataJavaConverter::makeJavaStructIntArray(Env, InPropInt);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropInt);
        Env->DeleteLocalRef(jlocal_PropInt);
    }
#endif

}
TArray<FTestbed1StructFloat> UTestbed1StructArrayInterfaceJniClient::GetPropFloat() const
{
    return PropFloat;
}
void UTestbed1StructArrayInterfaceJniClient::SetPropFloat(const TArray<FTestbed1StructFloat>& InPropFloat)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropFloat"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropFloat() == InPropFloat )
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Property propFloat to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropFloat ([Ltestbed1/testbed1_api/StructFloat;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropFloat", "([Ltestbed1/testbed1_api/StructFloat;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropFloat ([Ltestbed1/testbed1_api/StructFloat;)V not found"));
            return;
        }
        
        jobjectArray jlocal_PropFloat = Testbed1DataJavaConverter::makeJavaStructFloatArray(Env, InPropFloat);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropFloat);
        Env->DeleteLocalRef(jlocal_PropFloat);
    }
#endif

}
TArray<FTestbed1StructString> UTestbed1StructArrayInterfaceJniClient::GetPropString() const
{
    return PropString;
}
void UTestbed1StructArrayInterfaceJniClient::SetPropString(const TArray<FTestbed1StructString>& InPropString)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropString"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropString() == InPropString )
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Property propString to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropString ([Ltestbed1/testbed1_api/StructString;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropString", "([Ltestbed1/testbed1_api/StructString;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropString ([Ltestbed1/testbed1_api/StructString;)V not found"));
            return;
        }
        
        jobjectArray jlocal_PropString = Testbed1DataJavaConverter::makeJavaStructStringArray(Env, InPropString);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropString);
        Env->DeleteLocalRef(jlocal_PropString);
    }
#endif

}
TArray<ETestbed1Enum0> UTestbed1StructArrayInterfaceJniClient::GetPropEnum() const
{
    return PropEnum;
}
void UTestbed1StructArrayInterfaceJniClient::SetPropEnum(const TArray<ETestbed1Enum0>& InPropEnum)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropEnum"));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return;
    }

    // only send change requests if the value changed -> reduce network load
    if (GetPropEnum() == InPropEnum )
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Property propEnum to set is same as current, new value won't be sent"));
        return;
    }

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
    {
        if (m_javaJniClientClass == nullptr)
        {
            UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropEnum ([Ltestbed1/testbed1_api/Enum0;)V CLASS not found"));
            return;
        }
        static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "setPropEnum", "([Ltestbed1/testbed1_api/Enum0;)V");
        if (MethodID == nullptr)
        {
            UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:setPropEnum ([Ltestbed1/testbed1_api/Enum0;)V not found"));
            return;
        }
        
        jobjectArray jlocal_PropEnum = Testbed1DataJavaConverter::makeJavaEnum0Array(Env, InPropEnum);
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, jlocal_PropEnum);
        Env->DeleteLocalRef(jlocal_PropEnum);
    }
#endif

}
TArray<FTestbed1StructBool> UTestbed1StructArrayInterfaceJniClient::FuncBool(const TArray<FTestbed1StructBool>& InParamBool)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcBool "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<FTestbed1StructBool>();
    }
    TPromise<TArray<FTestbed1StructBool>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcBoolAsync:(Ljava/lang/String;[Ltestbed1/testbed1_api/StructBool;)V CLASS not found"));
        return TArray<FTestbed1StructBool>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcBoolAsync", "(Ljava/lang/String;[Ltestbed1/testbed1_api/StructBool;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTestbed1StructArrayInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobjectArray jlocal_ParamBool = Testbed1DataJavaConverter::makeJavaStructBoolArray(Env, InParamBool);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamBool);
        Env->DeleteLocalRef(jlocal_ParamBool);
    }
    else
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcBoolAsync (Ljava/lang/String;[Ltestbed1/testbed1_api/StructBool;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<FTestbed1StructInt> UTestbed1StructArrayInterfaceJniClient::FuncInt(const TArray<FTestbed1StructInt>& InParamInt)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcInt "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<FTestbed1StructInt>();
    }
    TPromise<TArray<FTestbed1StructInt>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcIntAsync:(Ljava/lang/String;[Ltestbed1/testbed1_api/StructInt;)V CLASS not found"));
        return TArray<FTestbed1StructInt>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcIntAsync", "(Ljava/lang/String;[Ltestbed1/testbed1_api/StructInt;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTestbed1StructArrayInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobjectArray jlocal_ParamInt = Testbed1DataJavaConverter::makeJavaStructIntArray(Env, InParamInt);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamInt);
        Env->DeleteLocalRef(jlocal_ParamInt);
    }
    else
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcIntAsync (Ljava/lang/String;[Ltestbed1/testbed1_api/StructInt;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<FTestbed1StructFloat> UTestbed1StructArrayInterfaceJniClient::FuncFloat(const TArray<FTestbed1StructFloat>& InParamFloat)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcFloat "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<FTestbed1StructFloat>();
    }
    TPromise<TArray<FTestbed1StructFloat>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcFloatAsync:(Ljava/lang/String;[Ltestbed1/testbed1_api/StructFloat;)V CLASS not found"));
        return TArray<FTestbed1StructFloat>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcFloatAsync", "(Ljava/lang/String;[Ltestbed1/testbed1_api/StructFloat;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTestbed1StructArrayInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobjectArray jlocal_ParamFloat = Testbed1DataJavaConverter::makeJavaStructFloatArray(Env, InParamFloat);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamFloat);
        Env->DeleteLocalRef(jlocal_ParamFloat);
    }
    else
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcFloatAsync (Ljava/lang/String;[Ltestbed1/testbed1_api/StructFloat;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<FTestbed1StructString> UTestbed1StructArrayInterfaceJniClient::FuncString(const TArray<FTestbed1StructString>& InParamString)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcString "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<FTestbed1StructString>();
    }
    TPromise<TArray<FTestbed1StructString>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcStringAsync:(Ljava/lang/String;[Ltestbed1/testbed1_api/StructString;)V CLASS not found"));
        return TArray<FTestbed1StructString>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcStringAsync", "(Ljava/lang/String;[Ltestbed1/testbed1_api/StructString;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTestbed1StructArrayInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobjectArray jlocal_ParamString = Testbed1DataJavaConverter::makeJavaStructStringArray(Env, InParamString);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamString);
        Env->DeleteLocalRef(jlocal_ParamString);
    }
    else
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcStringAsync (Ljava/lang/String;[Ltestbed1/testbed1_api/StructString;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}
TArray<ETestbed1Enum0> UTestbed1StructArrayInterfaceJniClient::FuncEnum(const TArray<ETestbed1Enum0>& InParamEnum)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcEnum "));
    if (!b_isReady)
    {
#if PLATFORM_ANDROID && USE_ANDROID_JNI
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("No valid connection to service. Check that android service is set up correctly"));
#else
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Log, TEXT("No valid connection to service. Check that android service is set up correctly"));
#endif
        return TArray<ETestbed1Enum0>();
    }
    TPromise<TArray<ETestbed1Enum0>> Promise;

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcEnumAsync:(Ljava/lang/String;[Ltestbed1/testbed1_api/Enum0;)V CLASS not found"));
        return TArray<ETestbed1Enum0>();
    }
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "funcEnumAsync", "(Ljava/lang/String;[Ltestbed1/testbed1_api/Enum0;)V");
    if (MethodID != nullptr)
    {
        auto id = gUTestbed1StructArrayInterfaceJniClientmethodHelper.StorePromise(Promise);
        auto idString = FJavaHelper::ToJavaString(Env, id.ToString(EGuidFormats::Digits));
        jobjectArray jlocal_ParamEnum = Testbed1DataJavaConverter::makeJavaEnum0Array(Env, InParamEnum);;

        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID, *idString, jlocal_ParamEnum);
        Env->DeleteLocalRef(jlocal_ParamEnum);
    }
    else
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:funcEnumAsync (Ljava/lang/String;[Ltestbed1/testbed1_api/Enum0;)V not found"));
    }
#endif
    //TODO probalby #elsif set some default on promise as a result.
    return Promise.GetFuture().Get();

}

bool UTestbed1StructArrayInterfaceJniClient::_bindToService(FString servicePackage, FString connectionId)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Request JNI connection to %s"), *servicePackage);
    if (b_isReady)
    {
        if (servicePackage == m_lastBoundServicePackage && connectionId == m_lastConnectionId)
        {
            UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Already bound"));
            return true;
        }
        else
        {
            _unbind();
        }
    }
    m_lastBoundServicePackage = servicePackage;
    m_lastConnectionId = connectionId;
#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:bind:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z CLASS not found"));
        return false;
    }
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "bind", "(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z");
    if (MethodID != nullptr)
    {
        jobject Activity = FJavaWrapper::GameActivityThis;
        auto jPackage = FJavaHelper::ToJavaString(Env, servicePackage);
        auto jConnId = FJavaHelper::ToJavaString(Env, connectionId);
        auto res = FJavaWrapper::CallBooleanMethod(Env, m_javaJniClientInstance, MethodID, Activity, *jPackage, *jConnId);
        return res;
    }
    else
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:bind (Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Z not found"));
    }
#endif
    return false;
}

void UTestbed1StructArrayInterfaceJniClient::_unbind()
{

    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Request JNI unbind"));

#if PLATFORM_ANDROID && USE_ANDROID_JNI
    JNIEnv* Env = FAndroidApplication::GetJavaEnv();
    if (m_javaJniClientClass == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:unbind:()V CLASS not found"));
        return;
    }
    static jmethodID MethodID = Env->GetMethodID(m_javaJniClientClass, "unbind", "()V");
    if (MethodID != nullptr)
    {
        FJavaWrapper::CallVoidMethod(Env, m_javaJniClientInstance, MethodID);
    }
    else
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("testbed1/testbed1jniclient/StructArrayInterfaceJniClient:unbind ()V not found"));
    }
#endif
}

bool UTestbed1StructArrayInterfaceJniClient::_IsReady() const
{
    return b_isReady;
}

#if PLATFORM_ANDROID && USE_ANDROID_JNI
JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropBoolChanged(JNIEnv* Env, jclass Clazz,jobjectArray propBool)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropBoolChanged"));
    if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropBoolChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<FTestbed1StructBool> local_prop_bool = TArray<FTestbed1StructBool>();
    Testbed1DataJavaConverter::fillStructBoolArray(Env, propBool, local_prop_bool);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_bool= MoveTemp(local_prop_bool)]()
    {
        gUTestbed1StructArrayInterfaceJniClientOnPropBoolChanged(plocal_prop_bool);
    });
}
JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropIntChanged(JNIEnv* Env, jclass Clazz,jobjectArray propInt)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropIntChanged"));
    if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropIntChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<FTestbed1StructInt> local_prop_int = TArray<FTestbed1StructInt>();
    Testbed1DataJavaConverter::fillStructIntArray(Env, propInt, local_prop_int);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_int= MoveTemp(local_prop_int)]()
    {
        gUTestbed1StructArrayInterfaceJniClientOnPropIntChanged(plocal_prop_int);
    });
}
JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropFloatChanged(JNIEnv* Env, jclass Clazz,jobjectArray propFloat)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropFloatChanged"));
    if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropFloatChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<FTestbed1StructFloat> local_prop_float = TArray<FTestbed1StructFloat>();
    Testbed1DataJavaConverter::fillStructFloatArray(Env, propFloat, local_prop_float);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_float= MoveTemp(local_prop_float)]()
    {
        gUTestbed1StructArrayInterfaceJniClientOnPropFloatChanged(plocal_prop_float);
    });
}
JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropStringChanged(JNIEnv* Env, jclass Clazz,jobjectArray propString)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropStringChanged"));
    if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropStringChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<FTestbed1StructString> local_prop_string = TArray<FTestbed1StructString>();
    Testbed1DataJavaConverter::fillStructStringArray(Env, propString, local_prop_string);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_string= MoveTemp(local_prop_string)]()
    {
        gUTestbed1StructArrayInterfaceJniClientOnPropStringChanged(plocal_prop_string);
    });
}
JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropEnumChanged(JNIEnv* Env, jclass Clazz,jobjectArray propEnum)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropEnumChanged"));
    if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnPropEnumChanged: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<ETestbed1Enum0> local_prop_enum = TArray<ETestbed1Enum0>();
    Testbed1DataJavaConverter::fillEnum0Array(Env, propEnum, local_prop_enum);

    AsyncTask(ENamedThreads::GameThread, [plocal_prop_enum= MoveTemp(local_prop_enum)]()
    {
        gUTestbed1StructArrayInterfaceJniClientOnPropEnumChanged(plocal_prop_enum);
    });
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigBool(JNIEnv* Env, jclass Clazz, jobjectArray paramBool)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigBool"));
    if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigBool: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<FTestbed1StructBool> local_param_bool = TArray<FTestbed1StructBool>();
    Testbed1DataJavaConverter::fillStructBoolArray(Env, paramBool, local_param_bool);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_bool= MoveTemp(local_param_bool)]()
        {
            if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigBool: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTestbed1StructArrayInterfaceJniClientHandle->_GetPublisher()->BroadcastSigBoolSignal( plocal_param_bool);
        });
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigInt(JNIEnv* Env, jclass Clazz, jobjectArray paramInt)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigInt"));
    if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigInt: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<FTestbed1StructInt> local_param_int = TArray<FTestbed1StructInt>();
    Testbed1DataJavaConverter::fillStructIntArray(Env, paramInt, local_param_int);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_int= MoveTemp(local_param_int)]()
        {
            if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigInt: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTestbed1StructArrayInterfaceJniClientHandle->_GetPublisher()->BroadcastSigIntSignal( plocal_param_int);
        });
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigFloat(JNIEnv* Env, jclass Clazz, jobjectArray paramFloat)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigFloat"));
    if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigFloat: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<FTestbed1StructFloat> local_param_float = TArray<FTestbed1StructFloat>();
    Testbed1DataJavaConverter::fillStructFloatArray(Env, paramFloat, local_param_float);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_float= MoveTemp(local_param_float)]()
        {
            if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigFloat: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTestbed1StructArrayInterfaceJniClientHandle->_GetPublisher()->BroadcastSigFloatSignal( plocal_param_float);
        });
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigString(JNIEnv* Env, jclass Clazz, jobjectArray paramString)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigString"));
    if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigString: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<FTestbed1StructString> local_param_string = TArray<FTestbed1StructString>();
    Testbed1DataJavaConverter::fillStructStringArray(Env, paramString, local_param_string);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_string= MoveTemp(local_param_string)]()
        {
            if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigString: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTestbed1StructArrayInterfaceJniClientHandle->_GetPublisher()->BroadcastSigStringSignal( plocal_param_string);
        });
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigEnum(JNIEnv* Env, jclass Clazz, jobjectArray paramEnum)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigEnum"));
    if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
    {
        UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigEnum: JNI SERVICE ADAPTER NOT FOUND "));
        return;
    }
    TArray<ETestbed1Enum0> local_param_enum = TArray<ETestbed1Enum0>();
    Testbed1DataJavaConverter::fillEnum0Array(Env, paramEnum, local_param_enum);

    AsyncTask(ENamedThreads::GameThread, [ plocal_param_enum= MoveTemp(local_param_enum)]()
        {
            if (gUTestbed1StructArrayInterfaceJniClientHandle == nullptr)
            {
                UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Warning, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnSigEnum: JNI SERVICE ADAPTER NOT FOUND "));
                return;
            }
            gUTestbed1StructArrayInterfaceJniClientHandle->_GetPublisher()->BroadcastSigEnumSignal( plocal_param_enum);
        });
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnFuncBoolResult(JNIEnv* Env, jclass Clazz, jobjectArray result, jstring callId)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnFuncBoolResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<FTestbed1StructBool> cpp_result = TArray<FTestbed1StructBool>();
    Testbed1DataJavaConverter::fillStructBoolArray(Env, result, cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTestbed1StructArrayInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnFuncIntResult(JNIEnv* Env, jclass Clazz, jobjectArray result, jstring callId)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnFuncIntResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<FTestbed1StructInt> cpp_result = TArray<FTestbed1StructInt>();
    Testbed1DataJavaConverter::fillStructIntArray(Env, result, cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTestbed1StructArrayInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnFuncFloatResult(JNIEnv* Env, jclass Clazz, jobjectArray result, jstring callId)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnFuncFloatResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<FTestbed1StructFloat> cpp_result = TArray<FTestbed1StructFloat>();
    Testbed1DataJavaConverter::fillStructFloatArray(Env, result, cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTestbed1StructArrayInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnFuncStringResult(JNIEnv* Env, jclass Clazz, jobjectArray result, jstring callId)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnFuncStringResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<FTestbed1StructString> cpp_result = TArray<FTestbed1StructString>();
    Testbed1DataJavaConverter::fillStructStringArray(Env, result, cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTestbed1StructArrayInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnFuncEnumResult(JNIEnv* Env, jclass Clazz, jobjectArray result, jstring callId)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT("Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeOnFuncEnumResult"));
    FString callIdString = FJavaHelper::FStringFromParam(Env, callId);
    FGuid guid;
    TArray<ETestbed1Enum0> cpp_result = TArray<ETestbed1Enum0>();
    Testbed1DataJavaConverter::fillEnum0Array(Env, result, cpp_result);

    FGuid::Parse(callIdString, guid);
    AsyncTask(ENamedThreads::GameThread, [guid, local_result = MoveTemp(cpp_result)]()
    {
        gUTestbed1StructArrayInterfaceJniClientmethodHelper.FulfillPromise(guid, local_result);
    });
    
}

JNI_METHOD void Java_testbed1_testbed1jniclient_StructArrayInterfaceJniClient_nativeIsReady(JNIEnv* Env, jclass Clazz, jboolean value)
{
    AsyncTask(ENamedThreads::GameThread, [value]()
        {
            gUTestbed1StructArrayInterfaceJniClientnotifyIsReady(value);
        });
}
#endif


template <typename ResultType>
FGuid UTestbed1StructArrayInterfaceJniClientMethodHelper::StorePromise(TPromise<ResultType>& Promise)
{
    FGuid Id = FGuid::NewGuid();
    FScopeLock Lock(&ReplyPromisesMapCS);
    ReplyPromisesMap.Add(Id, &Promise);
    //TODO invalid id if sth goes wrong + log + checking
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT(" method store id %s"), *(Id.ToString(EGuidFormats::Digits)));
    return Id;
}

template <typename ResultType>
bool UTestbed1StructArrayInterfaceJniClientMethodHelper::FulfillPromise(const FGuid& Id, const ResultType& Value)
{
    UE_LOG(LogTestbed1StructArrayInterfaceClient_JNI, Verbose, TEXT(" method resolving id %s"), *(Id.ToString(EGuidFormats::Digits)));
    TPromise<ResultType>* PromisePtr = nullptr;

    {
        FScopeLock Lock(&ReplyPromisesMapCS);
        if (auto** Found = ReplyPromisesMap.Find(Id))
        {
            PromisePtr = static_cast<TPromise<ResultType>*>(*Found);
            ReplyPromisesMap.Remove(Id);
        }
    }

    if (PromisePtr)
    {
        AsyncTask(ENamedThreads::GameThread, [Value, PromisePtr]()
            {
                PromisePtr->SetValue(Value);
            });
        return true;

    }
    return false;
}
template FGuid UTestbed1StructArrayInterfaceJniClientMethodHelper::StorePromise<TArray<ETestbed1Enum0>>(TPromise<TArray<ETestbed1Enum0>>& Promise);
template bool UTestbed1StructArrayInterfaceJniClientMethodHelper::FulfillPromise<TArray<ETestbed1Enum0>>(const FGuid& Id, const TArray<ETestbed1Enum0>& Value);
template FGuid UTestbed1StructArrayInterfaceJniClientMethodHelper::StorePromise<TArray<FTestbed1StructBool>>(TPromise<TArray<FTestbed1StructBool>>& Promise);
template bool UTestbed1StructArrayInterfaceJniClientMethodHelper::FulfillPromise<TArray<FTestbed1StructBool>>(const FGuid& Id, const TArray<FTestbed1StructBool>& Value);
template FGuid UTestbed1StructArrayInterfaceJniClientMethodHelper::StorePromise<TArray<FTestbed1StructFloat>>(TPromise<TArray<FTestbed1StructFloat>>& Promise);
template bool UTestbed1StructArrayInterfaceJniClientMethodHelper::FulfillPromise<TArray<FTestbed1StructFloat>>(const FGuid& Id, const TArray<FTestbed1StructFloat>& Value);
template FGuid UTestbed1StructArrayInterfaceJniClientMethodHelper::StorePromise<TArray<FTestbed1StructInt>>(TPromise<TArray<FTestbed1StructInt>>& Promise);
template bool UTestbed1StructArrayInterfaceJniClientMethodHelper::FulfillPromise<TArray<FTestbed1StructInt>>(const FGuid& Id, const TArray<FTestbed1StructInt>& Value);
template FGuid UTestbed1StructArrayInterfaceJniClientMethodHelper::StorePromise<TArray<FTestbed1StructString>>(TPromise<TArray<FTestbed1StructString>>& Promise);
template bool UTestbed1StructArrayInterfaceJniClientMethodHelper::FulfillPromise<TArray<FTestbed1StructString>>(const FGuid& Id, const TArray<FTestbed1StructString>& Value);

